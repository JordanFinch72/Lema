[{"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\index.js":"1","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\Lema.js":"2","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\reportWebVitals.js":"3","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\Banner.jsx":"4","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\LeftBar.jsx":"5","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\Map.jsx":"6","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\Toast.jsx":"7","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\modals\\ViewMapsModal.jsx":"8","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\ControlBox.jsx":"9","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\modals\\LoginRegisterModal.jsx":"10","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\modals\\GenericModal.jsx":"11","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\modals\\SaveModal.jsx":"12","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\CollectionArea.jsx":"13","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\modals\\ProfileSettingsModal.jsx":"14","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\modals\\AddEditNodeModal.jsx":"15","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\LabeledControl.jsx":"16","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\Textbox.jsx":"17","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\ContextMenu.jsx":"18","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\Button.jsx":"19","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\RadioGroup.jsx":"20","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\modals\\AddEditCollectionModal.jsx":"21","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\CommunityMap.jsx":"22","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\Collection.jsx":"23","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\ColourPicker.jsx":"24","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\Collapser.jsx":"25","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\Meatballs.jsx":"26"},{"size":522,"mtime":1652800738740,"results":"27","hashOfConfig":"28"},{"size":32948,"mtime":1652906382173,"results":"29","hashOfConfig":"28"},{"size":375,"mtime":1652800738740,"results":"30","hashOfConfig":"28"},{"size":4475,"mtime":1652800738667,"results":"31","hashOfConfig":"28"},{"size":1195,"mtime":1652800738669,"results":"32","hashOfConfig":"28"},{"size":27898,"mtime":1652906382174,"results":"33","hashOfConfig":"28"},{"size":156,"mtime":1652800738670,"results":"34","hashOfConfig":"28"},{"size":4173,"mtime":1652800738673,"results":"35","hashOfConfig":"28"},{"size":5580,"mtime":1652800738668,"results":"36","hashOfConfig":"28"},{"size":9389,"mtime":1652800738672,"results":"37","hashOfConfig":"28"},{"size":117,"mtime":1652800738672,"results":"38","hashOfConfig":"28"},{"size":3980,"mtime":1652900519546,"results":"39","hashOfConfig":"28"},{"size":7022,"mtime":1652800738668,"results":"40","hashOfConfig":"28"},{"size":2666,"mtime":1652800738673,"results":"41","hashOfConfig":"28"},{"size":16376,"mtime":1652906382175,"results":"42","hashOfConfig":"28"},{"size":571,"mtime":1652800738671,"results":"43","hashOfConfig":"28"},{"size":898,"mtime":1652800738671,"results":"44","hashOfConfig":"28"},{"size":622,"mtime":1652800738670,"results":"45","hashOfConfig":"28"},{"size":611,"mtime":1652800738670,"results":"46","hashOfConfig":"28"},{"size":1377,"mtime":1652800738671,"results":"47","hashOfConfig":"28"},{"size":2720,"mtime":1652800738672,"results":"48","hashOfConfig":"28"},{"size":1313,"mtime":1652800738668,"results":"49","hashOfConfig":"28"},{"size":4963,"mtime":1652800738668,"results":"50","hashOfConfig":"28"},{"size":637,"mtime":1652800738670,"results":"51","hashOfConfig":"28"},{"size":428,"mtime":1652800738670,"results":"52","hashOfConfig":"28"},{"size":724,"mtime":1652800738671,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},"g9dnia",{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"57"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"57"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"57"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"57"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"57"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"57"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"57"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\index.js",["115"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Lema from './Lema';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Lema />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n",["116","117"],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\Lema.js",["118"],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\reportWebVitals.js",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\Banner.jsx",["119"],"import {Component} from \"react\";\r\nimport {LoginRegisterModal} from \"./modals/LoginRegisterModal\";\r\nimport {SaveModal} from \"./modals/SaveModal\";\r\nimport {ViewMapsModal} from \"./modals/ViewMapsModal\";\r\nimport {ProfileSettingsModal} from \"./modals/ProfileSettingsModal\";\r\nimport {GenericModal} from \"./modals/GenericModal\";\r\n\r\nexport class Banner extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst showcaseText = (this.props.isShowcaseMode) ? \"Hide Community Showcase\" : \"Show Community Showcase\";\r\n\t\tconst showcase =\r\n\t\t\t<div className={\"showcase-button\"} onClick={(e) => {\r\n\t\t\t\tthis.props.toggleShowcaseMode(e);\r\n\t\t\t}}>\r\n\t\t\t\t{showcaseText}\r\n\t\t\t</div>;\r\n\r\n\t\tlet buttons = [\r\n\t\t\t<div className={\"new-map-button\"} onClick={(e) => {\r\n\t\t\t\tconst userConfirmed = window.confirm(\"This will wipe your currently active map so that you can start from scratch.\\n\" +\r\n\t\t\t\t\t\"You should save/export your map first if you wish to save your progress.\\n\\nDo you wish to continue?\");\r\n\t\t\t\tif(userConfirmed) this.props.newMap(e);\r\n\t\t\t}}>\r\n\t\t\t\tNew Map\r\n\t\t\t</div>,\r\n\t\t\t<div className={\"login-button\"} onClick={(e) => {\r\n\t\t\t\tthis.props.openModal(e, <LoginRegisterModal mode={\"login\"} handler={this.props.authenticateUser} createToast={this.props.createToast} />);\r\n\t\t\t}}>\r\n\t\t\t\tLog In\r\n\t\t\t</div>,\r\n\t\t\t<div className={\"register-button\"} onClick={(e) => {\r\n\t\t\t\tthis.props.openModal(e, <LoginRegisterModal mode={\"register\"} handler={this.props.registerUser} openModal={this.props.openModal} createToast={this.props.createToast} />);\r\n\t\t\t}}>\r\n\t\t\t\tRegister\r\n\t\t\t</div>\r\n\t\t];\r\n\t\tif(this.props.activeUser)\r\n\t\t{\r\n\t\t\tbuttons = [\r\n\t\t\t\t<div className={\"new-map-button\"} onClick={(e) => {\r\n\t\t\t\t\tconst userConfirmed = window.confirm(\"This will wipe your currently active map so that you can start from scratch.\\n\" +\r\n\t\t\t\t\t\t\"You should save/export your map first if you wish to save your progress.\\n\\nDo you wish to continue?\");\r\n\t\t\t\t\tif(userConfirmed) this.props.newMap(e);\r\n\t\t\t\t}}>\r\n\t\t\t\t\tNew Map\r\n\t\t\t\t</div>,\r\n\t\t\t\t<div className={\"save-button\"} onClick={(e) => {\r\n\t\t\t\t\tthis.props.openModal(e, <SaveModal handler={this.props.saveMap} activeMap={this.props.activeMap} createToast={this.props.createToast} />);\r\n\t\t\t\t}}>\r\n\t\t\t\t\tSave Map / Export\r\n\t\t\t\t</div>,\r\n\t\t\t\t<div className={\"view-maps-button\"} onClick={(e) => {\r\n\t\t\t\t\tthis.props.openModal(e, <ViewMapsModal loadMap={this.props.loadMap} deleteMap={this.props.deleteMap}\r\n\t\t\t\t\t                                       activeUser={this.props.activeUser} openModal={this.props.openModal}\r\n\t\t\t\t\t                                       handleResponse={this.props.handleResponse}  />);\r\n\t\t\t\t}}>\r\n\t\t\t\t\tView Maps / Import\r\n\t\t\t\t</div>,\r\n\t\t\t\t<div className={\"share-button\"} onClick={(e) => {\r\n\t\t\t\t\tif(this.props.activeMap)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(this.props.activeMap.mapID)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst domain = \"http://localhost:3000/\"; // Major TODO: Update this when hosted\r\n\t\t\t\t\t\t\tconst link = `${domain}/map/${this.props.activeUser.username}/${this.props.activeMap.mapID}`;\r\n\t\t\t\t\t\t\tconst linkModal =\r\n\t\t\t\t\t\t\t\t<GenericModal>\r\n\t\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t\tHere is the link to your map: <a href={link}>{link}</a><br /><br />\r\n\t\t\t\t\t\t\t\t\t\tThis will not share your map to the showcase, but anybody with the link can access it.<br />\r\n\t\t\t\t\t\t\t\t\t\tWhenever you save your map, your changes will be shown via this same link.\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t</GenericModal>\r\n\t\t\t\t\t\t\tthis.props.openModal(null, linkModal, true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.props.createToast(e, \"Map must be saved to profile before it can be shared.\", 7000, \"error\")\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.props.createToast(e, \"No active map. Create/load a map and save it to your profile before sharing.\", 7000, \"error\")\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}}>\r\n\t\t\t\t\tShare\r\n\t\t\t\t</div>,\r\n\t\t\t\t<div className={\"settings-button\"} onClick={(e) => {\r\n\t\t\t\t\tthis.props.openModal(e, <ProfileSettingsModal editProfile={this.props.editProfile} deleteProfile={this.props.deleteProfile} activeUser={this.props.activeUser} createToast={this.props.createToast} />);\r\n\t\t\t\t}}>\r\n\t\t\t\t\tProfile Settings\r\n\t\t\t\t</div>,\r\n\t\t\t\t<div className={\"logout-button\"} onClick={this.props.logoutUser}>\r\n\t\t\t\t\tLog Out\r\n\t\t\t\t</div>\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\treturn(\r\n\t\t\t<div className={\"banner-container\"}>\r\n\t\t\t\t<h2>LEMA: Linguistic Etymology Map Assistant</h2>\r\n\t\t\t\t<div className={\"buttons-container\"}>\r\n\t\t\t\t\t{showcase}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"buttons-container\"}>\r\n\t\t\t\t\t{buttons}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\LeftBar.jsx",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\Map.jsx",["120","121","122","123","124","125","126","127","128","129","130","131","132","133","134"],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\Toast.jsx",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\modals\\ViewMapsModal.jsx",["135","136","137","138"],"import {Component} from \"react\";\r\nimport {Textbox} from \"../controls/Textbox\";\r\nimport {Button} from \"../controls/Button\";\r\nimport {LabeledControl} from \"../controls/LabeledControl\";\r\nimport axios from \"axios\";\r\nimport {GenericModal} from \"./GenericModal\";\r\n\r\nclass MapItem extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\treturn(\r\n\t\t\t<div className={\"map-item\"}>\r\n\t\t\t\t{/* Flex-row */}\r\n\t\t\t\t<div className={\"title\"}>{this.props.map.activeMap.title}</div>\r\n\t\t\t\t<div className={\"buttons-container\"}>\r\n\t\t\t\t\t<Button value={\"LOAD\"} onClick={(e) => {\r\n\t\t\t\t\t\tconst userConfirmed = window.confirm(\"This will overwrite your currently active map.\\nYou may wish to save your map before you load another one.\\n\\nWould you like to continue?\");\r\n\r\n\t\t\t\t\t\tif(userConfirmed)\r\n\t\t\t\t\t\t\tthis.props.loadMap(e, this.props.map, \"database\");\r\n\t\t\t\t\t}} />\r\n\t\t\t\t\t<Button value={\"X\"} onClick={(e) => {\r\n\t\t\t\t\t\tconst userConfirmed = window.confirm(\"This will permanently delete this map from the database (and the showcase)!\\n\\nWould you like to continue?\");\r\n\r\n\t\t\t\t\t\tif(userConfirmed)\r\n\t\t\t\t\t\t\tthis.props.deleteMap(e, this.props.map.activeMap.mapID);\r\n\t\t\t\t\t}} />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport class ViewMapsModal extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tloadedMaps: [],\r\n\t\t\tloadedFileName: null,\r\n\t\t\tloading: true\r\n\t\t};\r\n\r\n\t\tthis.onFieldChange = this.onFieldChange.bind(this);\r\n\r\n\t}\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tthis.loadUserMaps(this.props.activeUser.username, this.props.activeUser.jwt);\r\n\t}\r\n\r\n\tloadUserMaps(username, jwt)\r\n\t{\r\n\t\tconsole.debug(\"[== LOADING MAPS ==]\");\r\n\r\n\t\t// Fetch maps belonging to this user\r\n\t\taxios.get(`/maps/${username}/0/${jwt}`).then((response) =>\r\n\t\t{\r\n\t\t\tconst handleResponse = this.props.handleResponse(response, \"User's maps retrieved.\", null, false);\r\n\t\t\tconsole.log(handleResponse);\r\n\t\t\tif(handleResponse === true)\r\n\t\t\t{\r\n\t\t\t\tthis.setState({loadedMaps: response.data.maps, loading: false})\r\n\t\t\t}\r\n\t\t\telse if(handleResponse === false)\r\n\t\t\t{\r\n\t\t\t\tconsole.error(\"Error loading maps.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthis.loadUserMaps(this.props.activeUser.username, this.props.activeUser.jwt);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tonFieldChange(event)\r\n\t{\r\n\t\tconst target = event.target;\r\n\t\tconst name = target.name;\r\n\t\tconst value = (target.type === \"checkbox\") ? target.checked : target.value;\r\n\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tlet mapItems = [];\r\n\t\tthis.state.loadedMaps.forEach((m) => mapItems.push(<MapItem activeUser={this.props.activeUser} map={m} openModal={this.props.openModal}\r\n\t\t                                                            loadMap={this.props.loadMap} deleteMap={this.props.deleteMap} />));\r\n\t\tif(this.state.loading)\r\n\t\t\tmapItems = \"Loading...\";\r\n\t\telse if(mapItems.length === 0)\r\n\t\t\tmapItems = \"No maps here! Try saving one to your profile! Alternatively, feel free to load one in from a file.\";\r\n\r\n\t\treturn (\r\n\t\t\t<div className={\"modal\"}>\r\n\t\t\t\t<div className={\"top\"}>\r\n\t\t\t\t\t<div className={\"left load\"}>\r\n\t\t\t\t\t\t<h2>View / Import Map</h2>\r\n\t\t\t\t\t\t<div className={\"map-data\"}>\r\n\t\t\t\t\t\t\t<div className={\"section\"}>\r\n\t\t\t\t\t\t\t\t{mapItems}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className={\"section\"}>\r\n\t\t\t\t\t\t\t\t<h4>Load From File</h4>\r\n\t\t\t\t\t\t\t\t<div className={\"form\"}>\r\n\t\t\t\t\t\t\t\t\t<input type={\"file\"} id={\"mapJSON\"} name={\"mapJSON\"} accept={\"application/json\"} />\r\n\t\t\t\t\t\t\t\t\t<Button value={\"Import...\"} onClick={(e) =>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tconst files = document.getElementById(\"mapJSON\").files;\r\n\t\t\t\t\t\t\t\t\t\tif(files.length > 0)\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tconst userConfirmed = window.confirm(\"This will overwrite your current map.\\nYou should save your map before you load another one.\\n\\nWould you like to continue?\");\r\n\t\t\t\t\t\t\t\t\t\t\tif(userConfirmed)\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst fileReader = new window.FileReader();\r\n\t\t\t\t\t\t\t\t\t\t\t\tfileReader.onload = () => this.props.loadMap(e, JSON.parse(fileReader.result), \"file\");\r\n\t\t\t\t\t\t\t\t\t\t\t\tfileReader.readAsText(files[0]);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"bottom\"}>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\ControlBox.jsx",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\modals\\LoginRegisterModal.jsx",["139"],"import {Component} from \"react\";\r\nimport {Textbox} from \"../controls/Textbox\";\r\nimport {Button} from \"../controls/Button\";\r\nimport {LabeledControl} from \"../controls/LabeledControl\";\r\nimport {GenericModal} from \"./GenericModal\";\r\n\r\nexport class LoginRegisterModal extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tmode: this.props.mode, // \"login\" || \"register\"\r\n\r\n\t\t\t/* Login */\r\n\t\t\tloginUsername: \"\",\r\n\t\t\tloginPassword: \"\",\r\n\t\t\trememberMe: false,\r\n\r\n\t\t\t/* Register */\r\n\t\t\tdisplayName: \"\",\r\n\t\t\tusername: \"\",\r\n\t\t\tpassword: \"\",\r\n\t\t\tpasswordConfirm: \"\",\r\n\t\t\temail: \"\",\r\n\t\t\temailConfirm: \"\",\r\n\t\t\tdataConsent: false\r\n\t\t};\r\n\r\n\t\tthis.onFieldChange = this.onFieldChange.bind(this);\r\n\t\tthis.validate = this.validate.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\t// Load in preserved data\r\n\t\tconst loginRegisterForm = JSON.parse(localStorage.getItem(\"LEMA_loginRegisterForm\"));\r\n\t\tif(loginRegisterForm)\r\n\t\t{\r\n\t\t\tloginRegisterForm.mode = this.props.mode;\r\n\t\t\tthis.setState(loginRegisterForm);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tonFieldChange(event)\r\n\t{\r\n\t\tconst target = event.target;\r\n\t\tconst name = target.name;\r\n\t\tconst value = (target.type === \"checkbox\") ? target.checked : target.value;\r\n\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates form data.\r\n\t * @param mode Whether to validate login or register data\r\n\t * @returns {boolean}\r\n\t */\r\n\tvalidate(mode)\r\n\t{\r\n\t\tlet errorCollector = \"\";\r\n\t\tif(mode === \"login\")\r\n\t\t{\r\n\t\t\t// New user data\r\n\t\t\tconst username = this.state.loginUsername;\r\n\t\t\tconst password = this.state.loginPassword;\r\n\r\n\t\t\t// Client-side validation\r\n\t\t\tif(username === \"\")\r\n\t\t\t\terrorCollector += \"Username missing.\\n\";\r\n\t\t\tif(password === \"\")\r\n\t\t\t\terrorCollector += \"Password missing.\\n\";\r\n\t\t}\r\n\t\telse if(mode === \"register\")\r\n\t\t{\r\n\t\t\tconst dataConsent = this.state.dataConsent;\r\n\t\t\tif(!dataConsent)\r\n\t\t\t{\r\n\t\t\t\terrorCollector += \"You must agree to the privacy policy to create a profile.\";\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// New user data\r\n\t\t\t\tconst username = this.state.username;\r\n\t\t\t\tconst displayName = this.state.displayName;\r\n\t\t\t\tconst password = this.state.password;\r\n\t\t\t\tconst passwordConfirm = this.state.passwordConfirm;\r\n\t\t\t\tconst email = this.state.email;\r\n\t\t\t\tconst emailConfirm = this.state.emailConfirm;\r\n\r\n\t\t\t\t// Client-side validation\r\n\t\t\t\tif(displayName.length < 3)\r\n\t\t\t\t\terrorCollector += \"Display name too short (min. 3 characters).\\n\";\r\n\t\t\t\tif(displayName.length > 32)\r\n\t\t\t\t\terrorCollector += \"Display name too long (max. 32 characters).\\n\";\r\n\t\t\t\tif(username.length < 3)\r\n\t\t\t\t\terrorCollector += \"Username too short (min. 3 characters).\\n\";\r\n\t\t\t\tif(username.length > 32)\r\n\t\t\t\t\terrorCollector += \"Username too long (max. 32 characters).\\n\";\r\n\t\t\t\tif(password.length < 6)\r\n\t\t\t\t\terrorCollector += \"Password too short (min. 6 characters).\\n\";\r\n\t\t\t\tif(password !== passwordConfirm)\r\n\t\t\t\t\terrorCollector += \"Passwords do not match.\\n\";\r\n\t\t\t\tif(!email.match(/^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/))\r\n\t\t\t\t\terrorCollector += \"E-mail address invalid.\\n\";\r\n\t\t\t\tif(email !== emailConfirm)\r\n\t\t\t\t\terrorCollector += \"E-mail addresses do not match.\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(errorCollector !== \"\")\r\n\t\t{\r\n\t\t\tthis.props.createToast(null, errorCollector, 5000, \"error\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse return true;\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\treturn (\r\n\t\t\t<div className={\"modal\"}>\r\n\t\t\t\t<div className={\"top\"}>\r\n\t\t\t\t\t{this.state.mode === \"login\" &&\r\n\t\t\t\t\t\t<div className={\"left login\"}>\r\n\t\t\t\t\t\t\t<h2>Login</h2>\r\n\t\t\t\t\t\t\t<div className={\"login-register-data\"}>\r\n\t\t\t\t\t\t\t\t<div className={\"section\"}>\r\n\t\t\t\t\t\t\t\t\t<div className={\"form\"}>\r\n\t\t\t\t\t\t\t\t\t\t<LabeledControl label={\"Username: \"}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Textbox name={\"loginUsername\"} value={this.state.loginUsername} hint={\"\"} autoFocus={true} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t\t\t<LabeledControl label={\"Password: \"}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Textbox name={\"loginPassword\"} isPassword={true} value={this.state.loginPassword} hint={\"\"} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t\t\t<LabeledControl label={\"Remember me:\"} tooltip={\"This will set an essential cookie to keep you logged in.\"}>\r\n\t\t\t\t\t\t\t\t\t\t\t<input type={\"checkbox\"} name={\"rememberMe\"} checked={this.state.rememberMe} onChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{this.state.mode === \"register\" &&\r\n\t\t\t\t\t\t<div className={\"left register\"}>\r\n\t\t\t\t\t\t\t<h2>Register</h2>\r\n\t\t\t\t\t\t\t<div className={\"login-register-data\"}>\r\n\t\t\t\t\t\t\t\t<div className={\"section\"}>\r\n\t\t\t\t\t\t\t\t\t<h4>User Data</h4>\r\n\t\t\t\t\t\t\t\t\t<div className={\"form\"}>\r\n\t\t\t\t\t\t\t\t\t\t<LabeledControl label={\"Username: \"} tooltip={\"Min. 3 characters.\\nMax. 32 characters.\"}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Textbox name={\"username\"} value={this.state.username} hint={\"e.g. \\\"JordanFinch72\\\"\"} autoFocus={true} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t\t\t<LabeledControl label={\"Password: \"} tooltip={\"Min. 6 characters.\"}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Textbox name={\"password\"} isPassword={true} value={this.state.password} hint={\"\"} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t\t\t<LabeledControl label={\"Password (confirm): \"}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Textbox name={\"passwordConfirm\"} isPassword={true} value={this.state.passwordConfirm} hint={\"\"} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t\t\t<LabeledControl label={\"E-mail address: \"}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Textbox name={\"email\"} value={this.state.email} hint={\"e.g. \\\"lema@jordanfinch.dev\\\"\"} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t\t\t<LabeledControl label={\"E-mail address (confirm): \"}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Textbox name={\"emailConfirm\"} value={this.state.emailConfirm} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t\t\t<LabeledControl label={\"Display name: \"} tooltip={\"Display name shown on Community Showcase.\\nMin. 3 characters.\\nMax. 3 characters.\"}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Textbox name={\"displayName\"} value={this.state.displayName} hint={\"e.g. \\\"Master of Maps\\\"\"} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className={\"section\"}>\r\n\t\t\t\t\t\t\t\t\t<h4>Legal Stuff</h4>\r\n\t\t\t\t\t\t\t\t\t<div className={\"form\"}>\r\n\t\t\t\t\t\t\t\t\t\t<p>By ticking this box, you agree that your user data will be used in accordance with the <a href={\"#\"} onClick={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\tconst privacyPolicy =\r\n\t\t\t\t\t\t\t\t\t\t\t\t<GenericModal>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<main>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h1>Data & Privacy Policy</h1>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>This privacy policy details how the software Linguistic Etymology Map Assistant (LEMA) will handle private and/or personal user data submitted to it.</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<section>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h2>User Data</h2>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li>Any personally-identifiable data (PID) submitted to LEMA will be secured and encrypted using HTTPS/SSL protocols during its passage from client to server.</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li>Passwords submitted to LEMA will be appropriately secured by the server before being stored in any database.</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li>No user data will <b>ever</b> be shared with any third party and will be used <b>solely</b> for the functions of LEMA itself.</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</section>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<section>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h2>Cookies</h2>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li>LEMA uses <i>localStorage</i> cookies to: (1) keep you logged in; (2) auto-save your active maps and their collections so that you do not lose work by closing the app.</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li>localStorage use (1) is opt-in and this cookie can be avoided by not ticking the \"Remember me\" box when you log in. If you have already done so, logging out will delete the cookie.</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li>localStorage use (1) is an essential cookie for the proper function of this app. There is currently no way to opt out. If you feel that this option would be important, please contact me.</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</section>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<section>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h2>Community Showcase</h2>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li>Any maps shared on the Community Showcase will have all of their data - in addition to the username and display name of the map owner - exposed to all other users of LEMA.</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<li>If you wish your map to no longer be shared on the Community Showcase, you may load the map and then re-save it with the \"Share to showcase\" box unticked.</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</section>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</main>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</GenericModal>\r\n\t\t\t\t\t\t\t\t\t\t\tlocalStorage.setItem(\"LEMA_loginRegisterForm\", JSON.stringify(this.state)); // Preserve data\r\n\t\t\t\t\t\t\t\t\t\t\tthis.props.openModal(e, privacyPolicy, true);\r\n\t\t\t\t\t\t\t\t\t\t}}>privacy policy</a>.</p>\r\n\t\t\t\t\t\t\t\t\t\t<input type={\"checkbox\"} name={\"dataConsent\"} checked={this.state.dataConsent} onChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"bottom\"}>\r\n\t\t\t\t\t<div className={\"buttons-container\"}>\r\n\t\t\t\t\t\t<Button value={\"Submit\"} onClick={(e) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(this.validate(this.state.mode))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlocalStorage.removeItem(\"LEMA_loginRegisterForm\");\r\n\t\t\t\t\t\t\t\tthis.props.handler(e, this.state);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\modals\\GenericModal.jsx",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\modals\\SaveModal.jsx",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\CollectionArea.jsx",["140","141"],"import {Component} from \"react\";\r\nimport {Collection} from \"./Collection\";\r\nimport {Button} from \"./controls/Button\";\r\nimport {AddEditCollectionModal} from \"./modals/AddEditCollectionModal\";\r\nimport {AddEditNodeModal} from \"./modals/AddEditNodeModal\";\r\nimport {CommunityMap} from \"./CommunityMap\";\r\nimport axios from \"axios\";\r\n\r\nexport class CollectionArea extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tshowcaseMaps: []\r\n\t\t};\r\n\r\n\t\t/* Click, event handlers */\r\n\t\tthis.cAddNode = this.cAddNode.bind(this);\r\n\t\tthis.cAddNodeDefault = this.cAddNodeDefault.bind(this);\r\n\t\tthis.cRemoveCollection = this.cRemoveCollection.bind(this);\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState, snapshot)\r\n\t{\r\n\t\t// Retrieve shared maps\r\n\t\tif(this.props.isShowcaseMode && this.state.showcaseMaps.length <= 0)\r\n\t\t{\r\n\t\t\taxios.get(`/maps/1`).then((response) => {\r\n\t\t\t\tconsole.log(response);\r\n\t\t\t\tif(response.data.type === \"error\")\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.error(response.data.message);\r\n\t\t\t\t\tthis.props.createToast(null, response.data.message, 5000, \"error\");\r\n\t\t\t\t}\r\n\t\t\t\telse if(response.data.type === \"success\")\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(response.data);\r\n\t\t\t\t\tif(response.data.message === \"Maps retrieved.\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(prevState.showcaseMaps !== response.data.maps)\r\n\t\t\t\t\t\t\tthis.setState({showcaseMaps: response.data.maps}, () => console.log(this.state.showcaseMaps));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/* Context menu item handlers */\r\n\tcAddNode(e, data)\r\n\t{\r\n\t\t// Open the AddEditNodeModal with initial node data\r\n\t\tconst node = {word: \"\", language: \"\", parents: []};\r\n\t\tif(data.type === \"journey\")\r\n\t\t\tnode.vertex = {type: \"word\", customText: \"\", fontColour: \"#000000\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\", edgeStrokeColour: \"#000000\", edgeStrokeWidth: \"2px\", edgeArrowheadEnabled: true, edgeArrowheadStrokeColour: \"#000000\", edgeArrowheadFillColour: \"#000000\"};\r\n\t\tif(data.type === \"cognate\")\r\n\t\t{\r\n\t\t\tnode.fillColour = \"#FF0000\"; node.strokeColour = \"#000000\";\r\n\t\t\tnode.label = {type: \"word\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null};\r\n\t\t}\r\n\t\tthis.props.openModal(e, <AddEditNodeModal isNewWord={true} words={data.words} node={node} type={data.type} onNodeSubmit={this.props.addNode} collectionIndex={data.collectionIndex}/>);\r\n\t}\r\n\tcAddNodeDefault(e, data)\r\n\t{\r\n\t\t// Add node with initial node data\r\n\t\tconst node = {word: \"New Word\", language: \"Proto-Indo-European\", parents: []};\r\n\t\tif(data.type === \"journey\")\r\n\t\t\tnode.vertex = {type: \"word\", customText: \"\", fontColour: \"#000000\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\", edgeStrokeColour: \"#000000\", edgeStrokeWidth: \"2px\", edgeArrowheadEnabled: true, edgeArrowheadStrokeColour: \"#000000\", edgeArrowheadFillColour: \"#000000\"};\r\n\t\tif(data.type === \"cognate\")\r\n\t\t{\r\n\t\t\tnode.strokeColour = \"#000000\";\r\n\t\t\tnode.fillColour = \"#FF0000\";\r\n\t\t\tnode.label = {type: \"language\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null};\r\n\t\t}\r\n\r\n\t\tthis.props.addNode(e, data.collectionIndex, node);\r\n\t}\r\n\tcRemoveCollection(e, collectionIndex)\r\n\t{\r\n\t\tthis.props.removeCollection(e, collectionIndex);\r\n\t}\r\n\r\n\r\n\trender()\r\n\t{\r\n\t\tlet journeys, cognates, header, output = [];\r\n\t\tconst journeyCollections = [], cognateCollections = [], showcaseMaps = [];\r\n\r\n\t\tif(this.props.isShowcaseMode)\r\n\t\t{\r\n\t\t\t// Collection area header\r\n\t\t\theader = <h3>Shared Maps</h3>;\r\n\r\n\t\t\t// Add maps header to array\r\n\t\t\tshowcaseMaps.push(\r\n\t\t\t\t<div className={\"showcase-header\"}>\r\n\t\t\t\t\t{/* Flex-row */}\r\n\t\t\t\t\t<div onClick={(e) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// TODO: Sort by title\r\n\t\t\t\t\t}}>Title</div>\r\n\t\t\t\t\t<div onClick={(e) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// TODO: Sort by description, I guess\r\n\t\t\t\t\t}}>Description</div>\r\n\t\t\t\t\t<div onClick={(e) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// TODO: Sort by... owner?\r\n\t\t\t\t\t}}>Owner</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\r\n\t\t\t// Build list of shared maps\r\n\t\t\tconsole.log(this.state.showcaseMaps);\r\n\t\t\tthis.state.showcaseMaps.map((map, index) =>\r\n\t\t\t{\r\n\t\t\t\tif(typeof map !== \"undefined\" && map.activeMap)\r\n\t\t\t\t{\r\n\t\t\t\t\tconsole.log(map);\r\n\t\t\t\t\tshowcaseMaps.push(<CommunityMap key={index} mapID={map.activeMap.mapID} title={map.activeMap.title} description={map.activeMap.description} owner={map.activeMap.owner} />);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\toutput =\r\n\t\t\t\t<div className={\"showcase-container\"}>\r\n\t\t\t\t\t{showcaseMaps}\r\n\t\t\t\t</div>;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Build header\r\n\t\t\tconst headerText = (this.props.activeMap) ? this.props.activeMap.title : \"Collection Area\";\r\n\t\t\tconst headerDescription = (this.props.activeMap)\r\n\t\t\t\t? <div className={\"description\"}>{this.props.activeMap.description}</div>\r\n\t\t\t\t: null;\r\n\t\t\tconst mapID = (this.props.activeMap) ?\r\n\t\t\t\t(this.props.activeMap.mapID !== null) ?\r\n\t\t\t\t\t<div className={\"id\"}> Attached to profile (ID: {this.props.activeMap.mapID})</div> :\r\n\t\t\t\t\t<div className={\"id\"}> Loaded from file or link</div>\r\n\t\t\t\t: \"\";\r\n\t\t\theader = <h3>{headerText}{headerDescription}{mapID}</h3>;\r\n\r\n\t\t\tthis.props.collections.map((collection, index) =>\r\n\t\t\t{\r\n\t\t\t\tif(typeof collection !== \"undefined\")\r\n\t\t\t\t{\r\n\t\t\t\t\tconst component = <Collection\r\n\t\t\t\t\t\tcollections={this.props.collections} createToast={this.props.createToast}\r\n\t\t\t\t\t\tkey={index} index={index} type={collection.type} header={collection.header} openModal={this.props.openModal}\r\n\t\t\t\t\t\twords={collection.words} editCollection={this.props.editCollection}\r\n\t\t\t\t\t\topenContextMenu={this.props.openContextMenu} closeContextMenu={this.props.closeContextMenu}\r\n\t\t\t\t\t\tcAddNode={this.cAddNode} cAddNodeDefault={this.cAddNodeDefault} cRemoveCollection={this.cRemoveCollection}\r\n\t\t\t\t\t\taddNode={this.props.addNode} editNode={this.props.editNode} removeNode={this.props.removeNode}\r\n\t\t\t\t\t/>;\r\n\t\t\t\t\tif(collection.type === \"journey\")\r\n\t\t\t\t\t\tjourneyCollections.push(component);\r\n\t\t\t\t\telse if(collection.type === \"cognate\")\r\n\t\t\t\t\t\tcognateCollections.push(component);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tjourneys =\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className={\"header-container\"}>\r\n\t\t\t\t\t\t<h4>Journeys</h4>\r\n\t\t\t\t\t\t<Button value={\"+\"} id={\"manual-add\"} style={{alignSelf: \"end\"}}\r\n\t\t\t\t\t\t        onClick={(e) => {\r\n\t\t\t\t\t\t\t        this.props.openModal(e, <AddEditCollectionModal onCollectionSubmit={this.props.addCollection}/>);\r\n\t\t\t\t\t\t        }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{journeyCollections}\r\n\t\t\t\t</>;\r\n\t\t\tcognates =\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className={\"header-container\"}>\r\n\t\t\t\t\t\t<h4>Cognates</h4>\r\n\t\t\t\t\t\t<Button value={\"+\"} id={\"manual-add\"} style={{alignSelf: \"end\"}}\r\n\t\t\t\t\t\t        onClick={(e) => {\r\n\t\t\t\t\t\t\t        if(this.props.collections)\r\n\t\t\t\t\t\t\t\t        this.props.openModal(e, <AddEditCollectionModal onCollectionSubmit={this.props.addCollection} type={\"cognate\"}/>);\r\n\t\t\t\t\t\t        }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{cognateCollections}\r\n\t\t\t\t</>;\r\n\r\n\t\t\toutput.push(journeys); output.push(cognates);\r\n\t\t}\r\n\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<div className={\"collections-container\"}>\r\n\t\t\t\t{header}\r\n\t\t\t\t{output}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\modals\\ProfileSettingsModal.jsx",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\modals\\AddEditNodeModal.jsx",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\LabeledControl.jsx",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\Textbox.jsx",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\ContextMenu.jsx",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\Button.jsx",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\RadioGroup.jsx",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\modals\\AddEditCollectionModal.jsx",["142"],"import {Component} from \"react\";\r\nimport {Textbox} from \"../controls/Textbox\";\r\nimport {Button} from \"../controls/Button\";\r\nimport {LabeledControl} from \"../controls/LabeledControl\";\r\nimport {ColourPicker} from \"../controls/ColourPicker\";\r\n\r\nexport class AddEditCollectionModal extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttype: (this.props.type === \"cognate\") ? \"Cognates\" : \"Historical journey\",\r\n\t\t\tname: this.props.name || null\r\n\t\t};\r\n\r\n\t\tthis.onCollectionSubmit = this.props.onCollectionSubmit.bind(this);\r\n\t\tthis.onFieldChange = this.onFieldChange.bind(this);\r\n\t\tthis.validation = this.validation.bind(this);\r\n\t}\r\n\r\n\tonFieldChange(event)\r\n\t{\r\n\t\tconst target = event.target;\r\n\t\tconst name = target.name;\r\n\t\tconst value = target.value;\r\n\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t}\r\n\r\n\tvalidation()\r\n\t{\r\n\t\t// Data validation\r\n\t\t// TODO: For cognates, only one cognate per language should be allowed\r\n\t\t//  - Future feature: for additional cognate collections, change solid colours to patterns of the specified colours instead (e.g. stripes; checks)\r\n\t\tlet errorCollector = \"\";\r\n\t\tif(this.state.name === null || this.state.name.length <= 0)\r\n\t\t\terrorCollector += \"You must enter a name.\\n\";\r\n\r\n\t\tif(errorCollector.length > 0)\r\n\t\t{\r\n\t\t\tthis.props.createToast(null, errorCollector, 5000, \"error\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse return true;\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\treturn (\r\n\t\t\t<div className={\"modal\"}>\r\n\t\t\t\t<div className={\"top\"}>\r\n\t\t\t\t\t<div className={\"left\"}>\r\n\t\t\t\t\t\t<h2>New Collection</h2>\r\n\t\t\t\t\t\t<div className={\"node-data\"}>\r\n\t\t\t\t\t\t\t<div className={\"section\"}>\r\n\t\t\t\t\t\t\t\t<div className={\"form\"}>\r\n\t\t\t\t\t\t\t\t\t<LabeledControl label={\"Name: \"}>\r\n\t\t\t\t\t\t\t\t\t\t<Textbox name={\"name\"} value={this.state.name} hint={\"e.g. \\\"horse (PIE->English)\\\"\"} autoFocus={true} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t\t<LabeledControl label={\"Type: \"}>\r\n\t\t\t\t\t\t\t\t\t\t<select name={\"type\"} value={this.state.type} onChange={this.onFieldChange}>\r\n\t\t\t\t\t\t\t\t\t\t\t<option>Historical journey</option>\r\n\t\t\t\t\t\t\t\t\t\t\t<option>Cognates</option>\r\n\t\t\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"bottom\"}>\r\n\t\t\t\t\t<div className={\"buttons-container\"}>\r\n\t\t\t\t\t\t<Button value={\"Submit\"} id={\"add-collection-modal-submit\"} onClick={(e) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(this.validation())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tconst type = (this.state.type === \"Historical journey\") ? \"journey\" : \"cognate\";\r\n\t\t\t\t\t\t\t\tconst data = {type: type, header: {name: this.state.name}, index: this.props.index};\r\n\t\t\t\t\t\t\t\tthis.props.onCollectionSubmit(e, data);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\CommunityMap.jsx",["143","144","145","146","147","148"],"import React, {Component} from \"react\";\r\nimport {Meatballs} from \"./controls/Meatballs\";\r\nimport {Collapser} from \"./controls/Collapser\";\r\nimport {AddEditCollectionModal} from \"./modals/AddEditCollectionModal\";\r\nimport {AddEditNodeModal} from \"./modals/AddEditNodeModal\";\r\nimport {Button} from \"./controls/Button\";\r\n\r\nexport class CommunityMap extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\treturn (\r\n\t\t\t<div className={\"community-map\"} onClick={(e) => {\r\n\t\t\t\t// TODO: Load the map (equivalent to opening its link)\r\n\t\t\t\tconst mapID = this.props.mapID, username = this.props.owner;\r\n\t\t\t\tconst userConfirmed = window.confirm(\"Load this map? This will overwrite your active map.\\nYou may wish to save your own map first.\\n\\n\" +\r\n\t\t\t\t\t\"Do you with to continue?\");\r\n\r\n\t\t\t\tif(userConfirmed) window.location.href = `/map/${username}/${mapID}`;\r\n\t\t\t}}>\r\n\t\t\t\t{/* Flex-row */}\r\n\t\t\t\t<div onClick={(e) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// TODO: Consider revealing the full title (if clipped)\r\n\t\t\t\t}}>{this.props.title}</div>\r\n\t\t\t\t<div onClick={(e) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// TODO: Consider revealing the full description (if clipped)\r\n\t\t\t\t}}>{this.props.description}</div>\r\n\t\t\t\t<div onClick={(e) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// TODO: Search for all maps by this owner\r\n\t\t\t\t}}>{this.props.owner}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\Collection.jsx",["149","150"],"import React, {Component} from \"react\";\r\nimport {Collapser} from \"./controls/Collapser\";\r\nimport {AddEditCollectionModal} from \"./modals/AddEditCollectionModal\";\r\nimport {AddEditNodeModal} from \"./modals/AddEditNodeModal\";\r\nimport {Button} from \"./controls/Button\";\r\n\r\nclass CollectionNode extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst nodeColour = this.props.node.fillColour || this.props.node.vertex.fillColour; // TODO: Advanced logic for determining next unused colour (per journey)\r\n\t\tlet changeColourTimeout;\r\n\t\tconst collectionList = this.props.collections.filter((collection, i) => {\r\n\t\t\tif(collection.type === this.props.type)\r\n\t\t\t{\r\n\t\t\t\tcollection.collectionIndex = i;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn (\r\n\t\t\t<div className={\"collection-node\"}>\r\n\t\t\t\t{/* Flex-row */}\r\n\t\t\t\t<div onClick={(e) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.props.openModal(e, <AddEditNodeModal\r\n\t\t\t\t\t\tcollectionList={collectionList}\r\n\t\t\t\t\t\twords={this.props.words}\r\n\t\t\t\t\t\ttype={this.props.type}\r\n\t\t\t\t\t\tnode={this.props.node}\r\n\t\t\t\t\t\tlanguage={this.props.node.language}\r\n\t\t\t\t\t\tonNodeSubmit={this.props.editNode}\r\n\t\t\t\t\t\tcollectionIndex={this.props.collectionIndex}\r\n\t\t\t\t\t\tcreateToast={this.props.createToast}\r\n\t\t\t\t\t/>);\r\n\t\t\t\t}}>{this.props.node.word}</div>\r\n\t\t\t\t<div onClick={(e) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.props.openModal(e, <AddEditNodeModal\r\n\t\t\t\t\t\tcollectionList={collectionList}\r\n\t\t\t\t\t\twords={this.props.words}\r\n\t\t\t\t\t\ttype={this.props.type}\r\n\t\t\t\t\t\tnode={this.props.node}\r\n\t\t\t\t\t\tlanguage={this.props.node.language}\r\n\t\t\t\t\t\tonNodeSubmit={this.props.editNode}\r\n\t\t\t\t\t\tcollectionIndex={this.props.collectionIndex}\r\n\t\t\t\t\t\tcreateToast={this.props.createToast}\r\n\t\t\t\t\t/>);\r\n\t\t\t\t}}>{this.props.node.language}</div>\r\n\t\t\t\t<div className={\"buttons-container\"}>\r\n\t\t\t\t\t<input type={\"color\"} defaultValue={nodeColour} onChange={(e) => {\r\n\t\t\t\t\t\t// Throttle the onChange; there's no way to have it only change when the user clicks off of it, annoyingly\r\n\t\t\t\t\t\tconst node = this;\r\n\t\t\t\t\t\twindow.clearTimeout(changeColourTimeout);\r\n\t\t\t\t\t\tchangeColourTimeout = window.setTimeout(function()\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst updatedNode = {\r\n\t\t\t\t\t\t\t\t...node.props.node\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tif(node.props.type === \"journey\")\r\n\t\t\t\t\t\t\t\tupdatedNode.vertex.fillColour = e.target.value;\r\n\t\t\t\t\t\t\telse if(node.props.type === \"cognate\")\r\n\t\t\t\t\t\t\t\tupdatedNode.fillColour = e.target.value;\r\n\t\t\t\t\t\t\tnode.props.editNode(e, node.props.collectionIndex, updatedNode);\r\n\t\t\t\t\t\t}, 100);\r\n\t\t\t\t\t}}/>\r\n\t\t\t\t\t<Button value={\"X\"} id={\"remove-node\"}\r\n\t\t\t\t\t        onClick={(e) => this.props.removeNode(e, this.props.collectionIndex, this.props.node.arrayIndex)}/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport class Collection extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcollapsed: false, // Note: Could be lifted if we want persistence when editing types\r\n\t\t};\r\n\r\n\t\tthis.toggleCollapse = this.toggleCollapse.bind(this);\r\n\t}\r\n\r\n\ttoggleCollapse(e)\r\n\t{\r\n\t\tthis.setState({collapsed: !this.state.collapsed});\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst wordComponents = [];\r\n\t\tconsole.log(this.props);\r\n\r\n\t\tif(!this.state.collapsed)\r\n\t\t{\r\n\t\t\tfor(let i = 0; i < this.props.words.length; ++i)\r\n\t\t\t{\r\n\t\t\t\twordComponents.push(<CollectionNode\r\n\t\t\t\t\tkey={i}\r\n\t\t\t\t\tcollections={this.props.collections}\r\n\t\t\t\t\ttype={this.props.type}\r\n\t\t\t\t\twords={this.props.words}\r\n\t\t\t\t\tnode={this.props.words[i]}\r\n\t\t\t\t\teditNode={this.props.editNode}\r\n\t\t\t\t\tremoveNode={this.props.removeNode}\r\n\t\t\t\t\topenModal={this.props.openModal}\r\n\t\t\t\t\tcollectionIndex={this.props.index}  // Index of collection the node belongs to\r\n\t\t\t\t\tcreateToast={this.props.createToast}\r\n\t\t\t\t/>);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className={\"collection-container\"}>\r\n\t\t\t\t<div className={\"collection-header\"}>\r\n\t\t\t\t\t{/* Flex-row */}\r\n\t\t\t\t\t<div className={\"name\"} onClick={(e) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.props.openModal(e, <AddEditCollectionModal\r\n\t\t\t\t\t\t\ttype={this.props.type}\r\n\t\t\t\t\t\t\tname={this.props.header.name}\r\n\t\t\t\t\t\t\tonCollectionSubmit={this.props.editCollection}\r\n\t\t\t\t\t\t\tindex={this.props.index}\r\n\t\t\t\t\t\t\tcreateToast={this.props.createToast}\r\n\t\t\t\t\t\t/>);\r\n\t\t\t\t\t}}>{this.props.header.name}</div>\r\n\t\t\t\t\t<div className={\"meatball-collapser-container\"}>\r\n\t\t\t\t\t\t<Button value={\"+\"} id={\"manual-add\"} style={{alignSelf: \"end\"}}\r\n\t\t\t\t\t\t        onClick={(e) => {\r\n\t\t\t\t\t\t\t        this.props.cAddNode(e, {type: this.props.type, collectionIndex: this.props.index, words: this.props.words});\r\n\t\t\t\t\t\t        }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Button value={\"X\"} id={\"manual-delete\"} style={{alignSelf: \"end\"}}\r\n\t\t\t\t\t\t        onClick={(e) => {\r\n\t\t\t\t\t\t\t\t\tconst userConfirmed = window.confirm(\"This will remove the entire collection of nodes from your map.\\nDo you wish to continue?\");\r\n\t\t\t\t\t\t\t\t\tif(userConfirmed)\r\n\t\t\t\t\t\t\t            this.props.cRemoveCollection(e, this.props.index);\r\n\t\t\t\t\t\t        }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Collapser toggleCollapse={this.toggleCollapse} collapsed={this.state.collapsed}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t{wordComponents}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\ColourPicker.jsx",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\Collapser.jsx",[],"D:\\xampp\\htdocs\\COMP3000_LEMA\\client\\src\\components\\controls\\Meatballs.jsx",[],{"ruleId":"151","severity":1,"message":"152","line":5,"column":8,"nodeType":"153","messageId":"154","endLine":5,"endColumn":23},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"151","severity":1,"message":"159","line":4,"column":9,"nodeType":"153","messageId":"154","endLine":4,"endColumn":15},{"ruleId":"160","severity":1,"message":"161","line":10,"column":2,"nodeType":"162","messageId":"163","endLine":13,"endColumn":3},{"ruleId":"151","severity":1,"message":"164","line":1,"column":27,"nodeType":"153","messageId":"154","endLine":1,"endColumn":35},{"ruleId":"165","severity":1,"message":"166","line":91,"column":67,"nodeType":"167","messageId":"168","endLine":91,"endColumn":69},{"ruleId":"165","severity":1,"message":"166","line":117,"column":67,"nodeType":"167","messageId":"168","endLine":117,"endColumn":69},{"ruleId":"165","severity":1,"message":"166","line":145,"column":66,"nodeType":"167","messageId":"168","endLine":145,"endColumn":68},{"ruleId":"169","severity":1,"message":"170","line":278,"column":29,"nodeType":"171","messageId":"172","endLine":278,"endColumn":31},{"ruleId":"169","severity":1,"message":"170","line":278,"column":49,"nodeType":"171","messageId":"172","endLine":278,"endColumn":51},{"ruleId":"169","severity":1,"message":"173","line":278,"column":49,"nodeType":"171","messageId":"172","endLine":278,"endColumn":51},{"ruleId":"169","severity":1,"message":"173","line":278,"column":69,"nodeType":"171","messageId":"172","endLine":278,"endColumn":71},{"ruleId":"165","severity":1,"message":"166","line":443,"column":67,"nodeType":"167","messageId":"168","endLine":443,"endColumn":69},{"ruleId":"174","severity":1,"message":"175","line":498,"column":18,"nodeType":"167","messageId":"176","endLine":546,"endColumn":7},{"ruleId":"169","severity":1,"message":"170","line":502,"column":28,"nodeType":"171","messageId":"172","endLine":502,"endColumn":30},{"ruleId":"169","severity":1,"message":"170","line":502,"column":48,"nodeType":"171","messageId":"172","endLine":502,"endColumn":50},{"ruleId":"169","severity":1,"message":"173","line":502,"column":48,"nodeType":"171","messageId":"172","endLine":502,"endColumn":50},{"ruleId":"169","severity":1,"message":"173","line":502,"column":68,"nodeType":"171","messageId":"172","endLine":502,"endColumn":70},{"ruleId":"151","severity":1,"message":"177","line":580,"column":9,"nodeType":"153","messageId":"154","endLine":580,"endColumn":19},{"ruleId":"151","severity":1,"message":"178","line":2,"column":9,"nodeType":"153","messageId":"154","endLine":2,"endColumn":16},{"ruleId":"151","severity":1,"message":"179","line":4,"column":9,"nodeType":"153","messageId":"154","endLine":4,"endColumn":23},{"ruleId":"151","severity":1,"message":"180","line":6,"column":9,"nodeType":"153","messageId":"154","endLine":6,"endColumn":21},{"ruleId":"160","severity":1,"message":"161","line":10,"column":2,"nodeType":"162","messageId":"163","endLine":13,"endColumn":3},{"ruleId":"181","severity":1,"message":"182","line":176,"column":101,"nodeType":"183","endLine":209,"endColumn":14},{"ruleId":"165","severity":1,"message":"184","line":115,"column":45,"nodeType":"167","messageId":"185","endLine":115,"endColumn":47},{"ruleId":"165","severity":1,"message":"184","line":143,"column":51,"nodeType":"167","messageId":"185","endLine":143,"endColumn":53},{"ruleId":"151","severity":1,"message":"186","line":5,"column":9,"nodeType":"153","messageId":"154","endLine":5,"endColumn":21},{"ruleId":"151","severity":1,"message":"187","line":2,"column":9,"nodeType":"153","messageId":"154","endLine":2,"endColumn":18},{"ruleId":"151","severity":1,"message":"188","line":3,"column":9,"nodeType":"153","messageId":"154","endLine":3,"endColumn":18},{"ruleId":"151","severity":1,"message":"189","line":4,"column":9,"nodeType":"153","messageId":"154","endLine":4,"endColumn":31},{"ruleId":"151","severity":1,"message":"190","line":5,"column":9,"nodeType":"153","messageId":"154","endLine":5,"endColumn":25},{"ruleId":"151","severity":1,"message":"191","line":6,"column":9,"nodeType":"153","messageId":"154","endLine":6,"endColumn":15},{"ruleId":"160","severity":1,"message":"161","line":10,"column":2,"nodeType":"162","messageId":"163","endLine":13,"endColumn":3},{"ruleId":"160","severity":1,"message":"161","line":9,"column":2,"nodeType":"162","messageId":"163","endLine":12,"endColumn":3},{"ruleId":"165","severity":1,"message":"166","line":18,"column":72,"nodeType":"167","messageId":"168","endLine":18,"endColumn":74},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["192"],"no-negated-in-lhs",["193"],"'useJwt' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'useState' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'startEdgeXOffset', 'startEdgeYOffset', 'startEdgeXOffset', 'startEdgeYOffset'.","unsafeRefs","'graticules' is assigned a value but never used.","'Textbox' is defined but never used.","'LabeledControl' is defined but never used.","'GenericModal' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","Array.prototype.map() expects a return value from arrow function.","expectedInside","'ColourPicker' is defined but never used.","'Meatballs' is defined but never used.","'Collapser' is defined but never used.","'AddEditCollectionModal' is defined but never used.","'AddEditNodeModal' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]