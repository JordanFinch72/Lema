{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\Lema.js\";\nimport \"./css/Lema.css\";\nimport { Component } from \"react\";\nimport { Banner } from \"./components/Banner\";\nimport { LeftBar } from \"./components/LeftBar\";\nimport { Map } from \"./components/Map\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Lema extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeModal: null,\n      // Either null or a React component\n      activeContextMenu: null,\n      // Either null or a React component\n      mapRef: null,\n      collections: [],\n      journeyCount: 0\n    };\n    this.defaultJourneyColours = [\"#ff0000\", \"#00ff00\", \"#0000ff\", \"#da35aa\", \"#ffcc00\"]; // TODO: Better colours\n\n    this.flattenTree = this.flattenTree.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.openContextMenu = this.openContextMenu.bind(this);\n    this.closeContextMenu = this.closeContextMenu.bind(this);\n    this.addCollection = this.addCollection.bind(this);\n    this.editCollection = this.editCollection.bind(this);\n    this.addJourneyFromDatabase = this.addJourneyFromDatabase.bind(this);\n    this.addNode = this.addNode.bind(this);\n    this.editNode = this.editNode.bind(this);\n    this.removeNode = this.removeNode.bind(this);\n    this.removeCollection = this.removeCollection.bind(this);\n  }\n  /**\n   * A recursive function that flattens the nested data structure returned from the etymological database into an\n   * array of word nodes.\n   * @param wordArray Flat array of words (initially empty)\n   * @param edWords Object of words returned by the etymological database\n   * @param edStructure Original data structure returned by the etymological database\n   * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n   * @param wordID The ID of the word currently being operated on in the recursive function\n   * @returns {array} The wordArray object, which has nodes pushed to it throughout the function\n   */\n\n\n  flattenTree(wordArray, edWords, edStructure, wordID) {\n    let edAffixes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let parents = [],\n        wordNode = {}; // Parents\n\n    if (Object.keys(edStructure).length > 0) {\n      // Loop through parents\n      for (let wordID in edStructure) {\n        if (edAffixes !== null && !edAffixes.includes(Number(wordID)) || edAffixes == null) {\n          parents.push(wordID);\n          wordArray = this.flattenTree(wordArray, edWords, edStructure[wordID], wordID, edAffixes);\n        }\n      }\n    } // Retrieve word from ED and convert to Lema-compatible object\n\n\n    if (wordID !== null) {\n      wordNode = edWords[wordID];\n      wordNode = {\n        id: Number(wordID),\n        arrayIndex: wordArray.length,\n        word: wordNode.word,\n        language: wordNode.language_name,\n        parents: [],\n        vertex: {\n          type: \"word\",\n          customText: \"\",\n          fontColour: \"#000000\",\n          strokeColour: \"#000000\",\n          fillColour: this.defaultJourneyColours[this.state.journeyCount],\n          radius: null,\n          fontSize: null,\n          x: null,\n          y: null,\n          edgeStart: \"centre\",\n          edgeEnd: \"centre\",\n          edgeStrokeColour: \"#000000\",\n          edgeStrokeWidth: \"2px\",\n          edgeArrowheadEnabled: true,\n          edgeArrowheadStrokeColour: \"#000000\",\n          edgeArrowheadFillColour: \"#000000\"\n        }\n      };\n\n      for (let i = 0; i < parents.length; ++i) {\n        let parentID = Number(parents[i]);\n        let parent = wordArray.find(_ref => {\n          let {\n            id\n          } = _ref;\n          return id === parentID;\n        });\n\n        if (edAffixes !== null && !edAffixes.includes(parentID) || edAffixes === null) {\n          wordNode.parents.push(parent);\n        }\n      }\n\n      wordArray.push(wordNode);\n    }\n\n    return wordArray;\n  }\n  /**\n   * Creates a journey collection from words returned by the etymological database and automatically adds them to the existing journey collections array\n   * @param edWords Object of words returned by the etymological database\n   * @param edStructure Original data structure returned by the etymological database\n   * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n   */\n\n\n  addJourneyFromDatabase(edWords, edStructure) {\n    let edAffixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let newCollections = this.state.collections,\n        newJourneyCount = this.state.journeyCount; // Flatten the data structure\n\n    let journeyWords = [];\n    journeyWords = this.flattenTree(journeyWords, edWords, edStructure, null, edAffixes);\n    console.log(journeyWords); // Create the new journey and add it to collections\n\n    let newJourney = {\n      type: \"journey\",\n      header: {\n        word: journeyWords[journeyWords.length - 1].word,\n        language: journeyWords[journeyWords.length - 1].language\n      },\n      words: journeyWords\n    };\n    newCollections.push(newJourney);\n    this.setState({\n      collections: newCollections,\n      journeyCount: newJourneyCount + 1\n    });\n  }\n  /**\n   * Opens a modal if one is not already open.\n   * @param e SyntheticEvent\n   * @param modalComponent React component of the modal that is to be opened.\n   */\n\n\n  openModal(e, modalComponent) {\n    if (!this.state.activeModal) this.setState({\n      activeModal: modalComponent\n    });\n  }\n  /**\n   * Closes any currently-open modal.\n   */\n\n\n  closeModal() {\n    if (this.state.activeModal) this.setState({\n      activeModal: null\n    });\n  }\n  /**\n   * Opens a context menu if one is not already open.\n   * Note: currently, only one context menu can be active at a time. This means context menus' items must not attempt to open a context menu on themselves.\n   * @param e\n   * @param menuComponent A React component of the context menu that is to be opened.\n   */\n\n\n  openContextMenu(e, menuComponent) {\n    if (!this.state.activeContextMenu) this.setState({\n      activeContextMenu: menuComponent\n    });\n  }\n  /**\n   * Closes any currently-open context menu.\n   */\n\n\n  closeContextMenu() {\n    if (this.state.activeContextMenu) this.setState({\n      activeContextMenu: null\n    });\n  }\n  /**\n   * Adds a node to the specified collection in the state's collection array.\n   * @param e SyntheticEvent\n   * @param collectionIndex The index of the collection to which the new node will belong.\n   * @param newNode The new node.\n   */\n\n\n  addNode(e, collectionIndex, newNode) {\n    // Validation (note: node data validation exists in the AddEditNodeModal)\n    let errorCollector = \"\";\n\n    if (this.state.collections[collectionIndex].type === \"cognate\") {\n      // Check for existing language\n      for (let i = 0; i < this.state.collections[collectionIndex].words.length; ++i) {\n        let childNode = this.state.collections[collectionIndex].words[i];\n\n        if (childNode.language === newNode.language) {\n          errorCollector += \"A language can only appear in a cognate collection once.\\n\" + \"Additional cognate collections may contain a language used in another cognate collection.\";\n          break;\n        }\n      }\n    }\n\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error message with toast\n    else {\n      // Insert new node\n      let newCollections = this.state.collections;\n      newNode.arrayIndex = newCollections[collectionIndex].words.length;\n      newCollections[collectionIndex].words.push(newNode);\n      this.setState({\n        collections: newCollections\n      });\n    }\n  }\n  /**\n   * Updates a node in the specified collection in the state's collections array with updated data.\n   * @param e React SyntheticEvent\n   * @param collectionIndex Index of collection to which the node belongs.\n   * @param updatedNode The updated node to be set in the collections array.\n   */\n\n\n  editNode(e, collectionIndex, updatedNode) {\n    let newCollections = this.state.collections;\n    console.log(e);\n    console.log(collectionIndex);\n    console.log(updatedNode); // Find node\n\n    let node = newCollections[collectionIndex].words[updatedNode.arrayIndex]; // Update node by reference\n\n    for (let index in updatedNode) if (node[index]) node[index] = updatedNode[index];\n\n    this.setState({\n      collections: newCollections\n    }, () => {\n      console.log(\"Post-edit collections: \");\n      console.log(this.state.collections);\n      this.closeModal();\n    });\n  }\n  /**\n   * Removes a specified node from a specified collection in the state's collections array.\n   * The user will be warned before deletion occurs (and will be notified of any existing parents, lest they have to add them all again).\n   * @param e SyntheticEvent\n   * @param collectionIndex Index of the collection to which the node belongs.\n   * @param arrayIndex Index of the node inside the specified collection.\n   */\n\n\n  removeNode(e, collectionIndex, arrayIndex) {\n    let newCollections = this.state.collections; // Find node\n\n    let node = newCollections[collectionIndex].words[arrayIndex];\n    let confirmed = false;\n    if (node.parents.length > 0) confirmed = window.confirm(\"Warning: this node is connected to \" + node.parents.length + \" parent nodes. The nodes will be unaffected by the deletion. Do you still wish to delete?\");else confirmed = window.confirm(\"Are you sure you wish to delete this node?\");\n    if (confirmed) newCollections[collectionIndex].words.splice(arrayIndex, 1); // Delete node\n\n    this.setState({\n      collections: newCollections\n    }, this.closeModal);\n  }\n  /**\n   * Adds a new collection to the state's collection array.\n   * @param e SyntheticEvent\n   * @param data An object containing the data required to build the new collection (collection object).\n   */\n\n\n  addCollection(e, data) {\n    let newCollections = this.state.collections;\n    newCollections.push({\n      type: data.type,\n      header: data.header,\n      words: []\n    });\n    this.setState({\n      collections: newCollections\n    }, this.closeModal);\n  }\n  /**\n   * Updates an existing collection in the state's collection array with updated data.\n   * @param e SyntheticEvent\n   * @param data An object containing the data required to update the existing collection (collection object, collection index).\n   */\n\n\n  editCollection(e, data) {\n    let newCollections = this.state.collections;\n    newCollections[data.index].type = data.type;\n    newCollections[data.index].header = data.header;\n    this.setState({\n      collections: newCollections\n    }, this.closeModal);\n  }\n  /**\n   * Removes the specified collection from the state's collection array.\n   * @param e SyntheticEvent\n   * @param collectionIndex Index of the collection to be removed.\n   */\n\n\n  removeCollection(e, collectionIndex) {\n    let newCollections = this.state.collections;\n    newCollections.splice(collectionIndex, 1);\n    this.setState({\n      collections: newCollections\n    });\n  }\n\n  render() {\n    // Render any active modals and context menus\n    let modalContainer = null,\n        contextMenuContainer = null;\n\n    if (this.state.activeModal !== null) {\n      let activeModal = this.state.activeModal;\n      modalContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-container\",\n        onClick: e => {\n          if (e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n        },\n        children: activeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 5\n      }, this);\n    }\n\n    if (this.state.activeContextMenu !== null) {\n      let activeContextMenu = this.state.activeContextMenu;\n      contextMenuContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"context-menu-container\",\n        onClick: this.closeContextMenu,\n        children: activeContextMenu\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 5\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Lema\",\n      children: [/*#__PURE__*/_jsxDEV(Banner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-view-container\",\n        children: [/*#__PURE__*/_jsxDEV(LeftBar, {\n          collections: this.state.collections,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          addJourneyFromDatabase: this.addJourneyFromDatabase,\n          addNode: this.addNode,\n          editNode: this.editNode,\n          editNodeColour: this.editNodeColour,\n          removeNode: this.removeNode,\n          addCollection: this.addCollection,\n          editCollection: this.editCollection,\n          removeCollection: this.removeCollection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Map, {\n          collections: this.state.collections,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          addNode: this.addNode,\n          editNode: this.editNode,\n          editNodeColour: this.editNodeColour,\n          removeNode: this.removeNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 5\n      }, this), modalContainer, contextMenuContainer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Lema;","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/Lema.js"],"names":["Component","Banner","LeftBar","Map","Lema","constructor","props","state","activeModal","activeContextMenu","mapRef","collections","journeyCount","defaultJourneyColours","flattenTree","bind","openModal","closeModal","openContextMenu","closeContextMenu","addCollection","editCollection","addJourneyFromDatabase","addNode","editNode","removeNode","removeCollection","wordArray","edWords","edStructure","wordID","edAffixes","parents","wordNode","Object","keys","length","includes","Number","push","id","arrayIndex","word","language","language_name","vertex","type","customText","fontColour","strokeColour","fillColour","radius","fontSize","x","y","edgeStart","edgeEnd","edgeStrokeColour","edgeStrokeWidth","edgeArrowheadEnabled","edgeArrowheadStrokeColour","edgeArrowheadFillColour","i","parentID","parent","find","newCollections","newJourneyCount","journeyWords","console","log","newJourney","header","words","setState","e","modalComponent","menuComponent","collectionIndex","newNode","errorCollector","childNode","alert","updatedNode","node","index","confirmed","window","confirm","splice","data","render","modalContainer","contextMenuContainer","nativeEvent","target","className","editNodeColour"],"mappings":";AAAA,OAAO,gBAAP;AACA,SAAQA,SAAR,QAAwB,OAAxB;AACA,SAAQC,MAAR,QAAqB,qBAArB;AACA,SAAQC,OAAR,QAAsB,sBAAtB;AACA,SAAQC,GAAR,QAAkB,kBAAlB;;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CACA;AACCK,EAAAA,WAAW,CAACC,KAAD,EACX;AACC,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACZC,MAAAA,WAAW,EAAE,IADD;AACO;AACnBC,MAAAA,iBAAiB,EAAE,IAFP;AAEa;AACzBC,MAAAA,MAAM,EAAE,IAHI;AAIZC,MAAAA,WAAW,EAAE,EAJD;AAKZC,MAAAA,YAAY,EAAE;AALF,KAAb;AAQA,SAAKC,qBAAL,GAA6B,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAA7B,CAXD,CAWsF;;AAErF,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKI,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBJ,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKK,aAAL,GAAqB,KAAKA,aAAL,CAAmBL,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKM,cAAL,GAAsB,KAAKA,cAAL,CAAoBN,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKO,sBAAL,GAA8B,KAAKA,sBAAL,CAA4BP,IAA5B,CAAiC,IAAjC,CAA9B;AACA,SAAKQ,OAAL,GAAe,KAAKA,OAAL,CAAaR,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKS,QAAL,GAAgB,KAAKA,QAAL,CAAcT,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKU,UAAL,GAAkB,KAAKA,UAAL,CAAgBV,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKW,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBX,IAAtB,CAA2B,IAA3B,CAAxB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCD,EAAAA,WAAW,CAACa,SAAD,EAAYC,OAAZ,EAAqBC,WAArB,EAAkCC,MAAlC,EACX;AAAA,QADqDC,SACrD,uEADiE,IACjE;AACC,QAAIC,OAAO,GAAG,EAAd;AAAA,QAAkBC,QAAQ,GAAG,EAA7B,CADD,CAEC;;AACA,QAAGC,MAAM,CAACC,IAAP,CAAYN,WAAZ,EAAyBO,MAAzB,GAAkC,CAArC,EACA;AACC;AACA,WAAI,IAAIN,MAAR,IAAkBD,WAAlB,EACA;AACC,YAAIE,SAAS,KAAK,IAAd,IAAsB,CAACA,SAAS,CAACM,QAAV,CAAmBC,MAAM,CAACR,MAAD,CAAzB,CAAxB,IACCC,SAAS,IAAI,IADjB,EAEA;AACCC,UAAAA,OAAO,CAACO,IAAR,CAAaT,MAAb;AACAH,UAAAA,SAAS,GAAG,KAAKb,WAAL,CAAiBa,SAAjB,EAA4BC,OAA5B,EAAqCC,WAAW,CAACC,MAAD,CAAhD,EAA0DA,MAA1D,EAAkEC,SAAlE,CAAZ;AACA;AACD;AACD,KAfF,CAiBC;;;AACA,QAAGD,MAAM,KAAK,IAAd,EACA;AACCG,MAAAA,QAAQ,GAAGL,OAAO,CAACE,MAAD,CAAlB;AACAG,MAAAA,QAAQ,GAAG;AACVO,QAAAA,EAAE,EAAEF,MAAM,CAACR,MAAD,CADA;AAEVW,QAAAA,UAAU,EAAEd,SAAS,CAACS,MAFZ;AAGVM,QAAAA,IAAI,EAAET,QAAQ,CAACS,IAHL;AAIVC,QAAAA,QAAQ,EAAEV,QAAQ,CAACW,aAJT;AAKVZ,QAAAA,OAAO,EAAE,EALC;AAMVa,QAAAA,MAAM,EAAE;AAACC,UAAAA,IAAI,EAAE,MAAP;AAAeC,UAAAA,UAAU,EAAE,EAA3B;AAA+BC,UAAAA,UAAU,EAAE,SAA3C;AAAsDC,UAAAA,YAAY,EAAE,SAApE;AAA+EC,UAAAA,UAAU,EAAE,KAAKrC,qBAAL,CAA2B,KAAKN,KAAL,CAAWK,YAAtC,CAA3F;AAAgJuC,UAAAA,MAAM,EAAE,IAAxJ;AAA8JC,UAAAA,QAAQ,EAAE,IAAxK;AAA8KC,UAAAA,CAAC,EAAE,IAAjL;AAAuLC,UAAAA,CAAC,EAAE,IAA1L;AAAgMC,UAAAA,SAAS,EAAE,QAA3M;AAAqNC,UAAAA,OAAO,EAAE,QAA9N;AAAwOC,UAAAA,gBAAgB,EAAE,SAA1P;AAAqQC,UAAAA,eAAe,EAAE,KAAtR;AAA6RC,UAAAA,oBAAoB,EAAE,IAAnT;AAAyTC,UAAAA,yBAAyB,EAAE,SAApV;AAA+VC,UAAAA,uBAAuB,EAAE;AAAxX;AANE,OAAX;;AAQA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG9B,OAAO,CAACI,MAA3B,EAAmC,EAAE0B,CAArC,EACA;AACC,YAAIC,QAAQ,GAAGzB,MAAM,CAACN,OAAO,CAAC8B,CAAD,CAAR,CAArB;AACA,YAAIE,MAAM,GAAGrC,SAAS,CAACsC,IAAV,CAAe;AAAA,cAAC;AAACzB,YAAAA;AAAD,WAAD;AAAA,iBAAUA,EAAE,KAAKuB,QAAjB;AAAA,SAAf,CAAb;;AACA,YAAIhC,SAAS,KAAK,IAAd,IAAsB,CAACA,SAAS,CAACM,QAAV,CAAmB0B,QAAnB,CAAxB,IACChC,SAAS,KAAK,IADlB,EAEA;AACCE,UAAAA,QAAQ,CAACD,OAAT,CAAiBO,IAAjB,CAAsByB,MAAtB;AACA;AACD;;AACDrC,MAAAA,SAAS,CAACY,IAAV,CAAeN,QAAf;AACA;;AACD,WAAON,SAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCL,EAAAA,sBAAsB,CAACM,OAAD,EAAUC,WAAV,EACtB;AAAA,QAD6CE,SAC7C,uEADyD,IACzD;AACC,QAAImC,cAAc,GAAG,KAAK3D,KAAL,CAAWI,WAAhC;AAAA,QAA6CwD,eAAe,GAAG,KAAK5D,KAAL,CAAWK,YAA1E,CADD,CAGC;;AACA,QAAIwD,YAAY,GAAG,EAAnB;AACAA,IAAAA,YAAY,GAAG,KAAKtD,WAAL,CAAiBsD,YAAjB,EAA+BxC,OAA/B,EAAwCC,WAAxC,EAAqD,IAArD,EAA2DE,SAA3D,CAAf;AACAsC,IAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EAND,CAQC;;AACA,QAAIG,UAAU,GAAG;AAACzB,MAAAA,IAAI,EAAE,SAAP;AAAkB0B,MAAAA,MAAM,EAAE;AAAC9B,QAAAA,IAAI,EAAE0B,YAAY,CAACA,YAAY,CAAChC,MAAb,GAAoB,CAArB,CAAZ,CAAoCM,IAA3C;AAAiDC,QAAAA,QAAQ,EAAEyB,YAAY,CAACA,YAAY,CAAChC,MAAb,GAAoB,CAArB,CAAZ,CAAoCO;AAA/F,OAA1B;AAAoI8B,MAAAA,KAAK,EAAEL;AAA3I,KAAjB;AACAF,IAAAA,cAAc,CAAC3B,IAAf,CAAoBgC,UAApB;AAEA,SAAKG,QAAL,CAAc;AAAC/D,MAAAA,WAAW,EAAEuD,cAAd;AAA8BtD,MAAAA,YAAY,EAAEuD,eAAe,GAAC;AAA5D,KAAd;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCnD,EAAAA,SAAS,CAAC2D,CAAD,EAAIC,cAAJ,EACT;AACC,QAAG,CAAC,KAAKrE,KAAL,CAAWC,WAAf,EACC,KAAKkE,QAAL,CAAc;AAAClE,MAAAA,WAAW,EAAEoE;AAAd,KAAd;AACD;AAED;AACD;AACA;;;AACC3D,EAAAA,UAAU,GACV;AACC,QAAG,KAAKV,KAAL,CAAWC,WAAd,EACC,KAAKkE,QAAL,CAAc;AAAClE,MAAAA,WAAW,EAAE;AAAd,KAAd;AACD;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCU,EAAAA,eAAe,CAACyD,CAAD,EAAIE,aAAJ,EACf;AACC,QAAG,CAAC,KAAKtE,KAAL,CAAWE,iBAAf,EACC,KAAKiE,QAAL,CAAc;AAACjE,MAAAA,iBAAiB,EAAEoE;AAApB,KAAd;AACD;AAED;AACD;AACA;;;AACC1D,EAAAA,gBAAgB,GAChB;AACC,QAAG,KAAKZ,KAAL,CAAWE,iBAAd,EACC,KAAKiE,QAAL,CAAc;AAACjE,MAAAA,iBAAiB,EAAE;AAApB,KAAd;AACD;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCc,EAAAA,OAAO,CAACoD,CAAD,EAAIG,eAAJ,EAAqBC,OAArB,EACP;AACC;AACA,QAAIC,cAAc,GAAG,EAArB;;AACA,QAAG,KAAKzE,KAAL,CAAWI,WAAX,CAAuBmE,eAAvB,EAAwChC,IAAxC,KAAiD,SAApD,EACA;AACC;AACA,WAAI,IAAIgB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKvD,KAAL,CAAWI,WAAX,CAAuBmE,eAAvB,EAAwCL,KAAxC,CAA8CrC,MAAjE,EAAyE,EAAE0B,CAA3E,EACA;AACC,YAAImB,SAAS,GAAG,KAAK1E,KAAL,CAAWI,WAAX,CAAuBmE,eAAvB,EAAwCL,KAAxC,CAA8CX,CAA9C,CAAhB;;AACA,YAAGmB,SAAS,CAACtC,QAAV,KAAuBoC,OAAO,CAACpC,QAAlC,EACA;AACCqC,UAAAA,cAAc,IAAI,+DACZ,2FADN;AAEA;AACA;AACD;AACD;;AAED,QAAGA,cAAc,CAAC5C,MAAf,GAAwB,CAA3B,EACC8C,KAAK,CAACF,cAAD,CAAL,CADD,CACwB;AADxB,SAGA;AACC;AACA,UAAId,cAAc,GAAG,KAAK3D,KAAL,CAAWI,WAAhC;AACAoE,MAAAA,OAAO,CAACtC,UAAR,GAAqByB,cAAc,CAACY,eAAD,CAAd,CAAgCL,KAAhC,CAAsCrC,MAA3D;AACA8B,MAAAA,cAAc,CAACY,eAAD,CAAd,CAAgCL,KAAhC,CAAsClC,IAAtC,CAA2CwC,OAA3C;AAEA,WAAKL,QAAL,CAAc;AAAC/D,QAAAA,WAAW,EAAEuD;AAAd,OAAd;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;;;AACC1C,EAAAA,QAAQ,CAACmD,CAAD,EAAIG,eAAJ,EAAqBK,WAArB,EACR;AACC,QAAIjB,cAAc,GAAG,KAAK3D,KAAL,CAAWI,WAAhC;AACA0D,IAAAA,OAAO,CAACC,GAAR,CAAYK,CAAZ;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYQ,eAAZ;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAYa,WAAZ,EAJD,CAMC;;AACA,QAAIC,IAAI,GAAGlB,cAAc,CAACY,eAAD,CAAd,CAAgCL,KAAhC,CAAsCU,WAAW,CAAC1C,UAAlD,CAAX,CAPD,CASC;;AACA,SAAI,IAAI4C,KAAR,IAAiBF,WAAjB,EACC,IAAGC,IAAI,CAACC,KAAD,CAAP,EAAgBD,IAAI,CAACC,KAAD,CAAJ,GAAcF,WAAW,CAACE,KAAD,CAAzB;;AAEjB,SAAKX,QAAL,CAAc;AAAC/D,MAAAA,WAAW,EAAEuD;AAAd,KAAd,EAA6C,MAAM;AAClDG,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK/D,KAAL,CAAWI,WAAvB;AACA,WAAKM,UAAL;AACA,KAJD;AAKA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCQ,EAAAA,UAAU,CAACkD,CAAD,EAAIG,eAAJ,EAAqBrC,UAArB,EACV;AACC,QAAIyB,cAAc,GAAG,KAAK3D,KAAL,CAAWI,WAAhC,CADD,CAGC;;AACA,QAAIyE,IAAI,GAAGlB,cAAc,CAACY,eAAD,CAAd,CAAgCL,KAAhC,CAAsChC,UAAtC,CAAX;AACA,QAAI6C,SAAS,GAAG,KAAhB;AACA,QAAGF,IAAI,CAACpD,OAAL,CAAaI,MAAb,GAAsB,CAAzB,EACCkD,SAAS,GAAGC,MAAM,CAACC,OAAP,CAAe,wCAAsCJ,IAAI,CAACpD,OAAL,CAAaI,MAAnD,GAA0D,2FAAzE,CAAZ,CADD,KAGCkD,SAAS,GAAGC,MAAM,CAACC,OAAP,CAAe,4CAAf,CAAZ;AAED,QAAGF,SAAH,EACCpB,cAAc,CAACY,eAAD,CAAd,CAAgCL,KAAhC,CAAsCgB,MAAtC,CAA6ChD,UAA7C,EAAyD,CAAzD,EAZF,CAY+D;;AAE9D,SAAKiC,QAAL,CAAc;AAAC/D,MAAAA,WAAW,EAAEuD;AAAd,KAAd,EAA6C,KAAKjD,UAAlD;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCG,EAAAA,aAAa,CAACuD,CAAD,EAAIe,IAAJ,EACb;AACC,QAAIxB,cAAc,GAAG,KAAK3D,KAAL,CAAWI,WAAhC;AACAuD,IAAAA,cAAc,CAAC3B,IAAf,CAAoB;AAACO,MAAAA,IAAI,EAAE4C,IAAI,CAAC5C,IAAZ;AAAkB0B,MAAAA,MAAM,EAAEkB,IAAI,CAAClB,MAA/B;AAAuCC,MAAAA,KAAK,EAAE;AAA9C,KAApB;AACA,SAAKC,QAAL,CAAe;AAAC/D,MAAAA,WAAW,EAAEuD;AAAd,KAAf,EAA8C,KAAKjD,UAAnD;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCI,EAAAA,cAAc,CAACsD,CAAD,EAAIe,IAAJ,EACd;AACC,QAAIxB,cAAc,GAAG,KAAK3D,KAAL,CAAWI,WAAhC;AACAuD,IAAAA,cAAc,CAACwB,IAAI,CAACL,KAAN,CAAd,CAA2BvC,IAA3B,GAAkC4C,IAAI,CAAC5C,IAAvC;AACAoB,IAAAA,cAAc,CAACwB,IAAI,CAACL,KAAN,CAAd,CAA2Bb,MAA3B,GAAoCkB,IAAI,CAAClB,MAAzC;AACA,SAAKE,QAAL,CAAc;AAAC/D,MAAAA,WAAW,EAAEuD;AAAd,KAAd,EAA6C,KAAKjD,UAAlD;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCS,EAAAA,gBAAgB,CAACiD,CAAD,EAAIG,eAAJ,EAChB;AACC,QAAIZ,cAAc,GAAG,KAAK3D,KAAL,CAAWI,WAAhC;AACAuD,IAAAA,cAAc,CAACuB,MAAf,CAAsBX,eAAtB,EAAuC,CAAvC;AACA,SAAKJ,QAAL,CAAc;AAAC/D,MAAAA,WAAW,EAAEuD;AAAd,KAAd;AACA;;AAEDyB,EAAAA,MAAM,GACN;AACC;AACA,QAAIC,cAAc,GAAG,IAArB;AAAA,QAA2BC,oBAAoB,GAAG,IAAlD;;AACA,QAAG,KAAKtF,KAAL,CAAWC,WAAX,KAA2B,IAA9B,EACA;AACC,UAAIA,WAAW,GAAG,KAAKD,KAAL,CAAWC,WAA7B;AACAoF,MAAAA,cAAc,gBACb;AAAK,QAAA,SAAS,EAAE,iBAAhB;AAAmC,QAAA,OAAO,EAAGjB,CAAD,IAAM;AACjD,cAAGA,CAAC,CAACmB,WAAF,CAAcC,MAAd,CAAqBC,SAArB,KAAmC,iBAAtC,EAAyD,KAAK/E,UAAL,GADR,CAC2B;AAC5E,SAFD;AAAA,kBAEIT;AAFJ;AAAA;AAAA;AAAA;AAAA,cADD;AAIA;;AACD,QAAG,KAAKD,KAAL,CAAWE,iBAAX,KAAiC,IAApC,EACA;AACC,UAAIA,iBAAiB,GAAG,KAAKF,KAAL,CAAWE,iBAAnC;AACAoF,MAAAA,oBAAoB,gBACnB;AAAK,QAAA,SAAS,EAAE,wBAAhB;AAA0C,QAAA,OAAO,EAAE,KAAK1E,gBAAxD;AAAA,kBAA2EV;AAA3E;AAAA;AAAA;AAAA;AAAA,cADD;AAEA;;AAED,wBACC;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACC,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAK,QAAA,SAAS,EAAE,qBAAhB;AAAA,gCACC,QAAC,OAAD;AAAS,UAAA,WAAW,EAAE,KAAKF,KAAL,CAAWI,WAAjC;AACS,UAAA,SAAS,EAAE,KAAKK,SADzB;AACoC,UAAA,UAAU,EAAE,KAAKC,UADrD;AAES,UAAA,eAAe,EAAE,KAAKC,eAF/B;AAEgD,UAAA,gBAAgB,EAAE,KAAKC,gBAFvE;AAGS,UAAA,sBAAsB,EAAE,KAAKG,sBAHtC;AAIS,UAAA,OAAO,EAAE,KAAKC,OAJvB;AAIgC,UAAA,QAAQ,EAAE,KAAKC,QAJ/C;AAIyD,UAAA,cAAc,EAAE,KAAKyE,cAJ9E;AAI8F,UAAA,UAAU,EAAE,KAAKxE,UAJ/G;AAKS,UAAA,aAAa,EAAE,KAAKL,aAL7B;AAK4C,UAAA,cAAc,EAAE,KAAKC,cALjE;AAKiF,UAAA,gBAAgB,EAAE,KAAKK;AALxG;AAAA;AAAA;AAAA;AAAA,gBADD,eAQC,QAAC,GAAD;AAAK,UAAA,WAAW,EAAE,KAAKnB,KAAL,CAAWI,WAA7B;AACK,UAAA,eAAe,EAAE,KAAKO,eAD3B;AAC4C,UAAA,gBAAgB,EAAE,KAAKC,gBADnE;AAEK,UAAA,SAAS,EAAE,KAAKH,SAFrB;AAEgC,UAAA,UAAU,EAAE,KAAKC,UAFjD;AAGE,UAAA,OAAO,EAAE,KAAKM,OAHhB;AAGyB,UAAA,QAAQ,EAAE,KAAKC,QAHxC;AAGkD,UAAA,cAAc,EAAE,KAAKyE,cAHvE;AAGuF,UAAA,UAAU,EAAE,KAAKxE;AAHxG;AAAA;AAAA;AAAA;AAAA,gBARD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD,EAgBEmE,cAhBF,EAiBEC,oBAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAqBA;;AA1TF;;AA6TA,eAAezF,IAAf","sourcesContent":["import \"./css/Lema.css\";\nimport {Component} from \"react\";\nimport {Banner} from \"./components/Banner\";\nimport {LeftBar} from \"./components/LeftBar\";\nimport {Map} from \"./components/Map\";\n\nclass Lema extends Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tactiveModal: null, // Either null or a React component\n\t\t\tactiveContextMenu: null, // Either null or a React component\n\t\t\tmapRef: null,\n\t\t\tcollections: [],\n\t\t\tjourneyCount: 0\n\t\t};\n\n\t\tthis.defaultJourneyColours = [\"#ff0000\", \"#00ff00\", \"#0000ff\", \"#da35aa\", \"#ffcc00\"] // TODO: Better colours\n\n\t\tthis.flattenTree = this.flattenTree.bind(this);\n\t\tthis.openModal = this.openModal.bind(this);\n\t\tthis.closeModal = this.closeModal.bind(this);\n\t\tthis.openContextMenu = this.openContextMenu.bind(this);\n\t\tthis.closeContextMenu = this.closeContextMenu.bind(this);\n\t\tthis.addCollection = this.addCollection.bind(this);\n\t\tthis.editCollection = this.editCollection.bind(this);\n\t\tthis.addJourneyFromDatabase = this.addJourneyFromDatabase.bind(this);\n\t\tthis.addNode = this.addNode.bind(this);\n\t\tthis.editNode = this.editNode.bind(this);\n\t\tthis.removeNode = this.removeNode.bind(this);\n\t\tthis.removeCollection = this.removeCollection.bind(this);\n\t}\n\n\t/**\n\t * A recursive function that flattens the nested data structure returned from the etymological database into an\n\t * array of word nodes.\n\t * @param wordArray Flat array of words (initially empty)\n\t * @param edWords Object of words returned by the etymological database\n\t * @param edStructure Original data structure returned by the etymological database\n\t * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n\t * @param wordID The ID of the word currently being operated on in the recursive function\n\t * @returns {array} The wordArray object, which has nodes pushed to it throughout the function\n\t */\n\tflattenTree(wordArray, edWords, edStructure, wordID, edAffixes = null)\n\t{\n\t\tlet parents = [], wordNode = {};\n\t\t// Parents\n\t\tif(Object.keys(edStructure).length > 0)\n\t\t{\n\t\t\t// Loop through parents\n\t\t\tfor(let wordID in edStructure)\n\t\t\t{\n\t\t\t\tif((edAffixes !== null && !edAffixes.includes(Number(wordID)))\n\t\t\t\t\t|| edAffixes == null)\n\t\t\t\t{\n\t\t\t\t\tparents.push(wordID);\n\t\t\t\t\twordArray = this.flattenTree(wordArray, edWords, edStructure[wordID], wordID, edAffixes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Retrieve word from ED and convert to Lema-compatible object\n\t\tif(wordID !== null)\n\t\t{\n\t\t\twordNode = edWords[wordID];\n\t\t\twordNode = {\n\t\t\t\tid: Number(wordID),\n\t\t\t\tarrayIndex: wordArray.length,\n\t\t\t\tword: wordNode.word,\n\t\t\t\tlanguage: wordNode.language_name,\n\t\t\t\tparents: [],\n\t\t\t\tvertex: {type: \"word\", customText: \"\", fontColour: \"#000000\", strokeColour: \"#000000\", fillColour: this.defaultJourneyColours[this.state.journeyCount], radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\", edgeStrokeColour: \"#000000\", edgeStrokeWidth: \"2px\", edgeArrowheadEnabled: true, edgeArrowheadStrokeColour: \"#000000\", edgeArrowheadFillColour: \"#000000\"}\n\t\t\t}\n\t\t\tfor(let i = 0; i < parents.length; ++i)\n\t\t\t{\n\t\t\t\tlet parentID = Number(parents[i]);\n\t\t\t\tlet parent = wordArray.find(({id}) => id === parentID);\n\t\t\t\tif((edAffixes !== null && !edAffixes.includes(parentID))\n\t\t\t\t\t|| edAffixes === null)\n\t\t\t\t{\n\t\t\t\t\twordNode.parents.push(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\twordArray.push(wordNode);\n\t\t}\n\t\treturn wordArray;\n\t}\n\n\t/**\n\t * Creates a journey collection from words returned by the etymological database and automatically adds them to the existing journey collections array\n\t * @param edWords Object of words returned by the etymological database\n\t * @param edStructure Original data structure returned by the etymological database\n\t * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n\t */\n\taddJourneyFromDatabase(edWords, edStructure, edAffixes = null)\n\t{\n\t\tlet newCollections = this.state.collections, newJourneyCount = this.state.journeyCount;\n\n\t\t// Flatten the data structure\n\t\tlet journeyWords = [];\n\t\tjourneyWords = this.flattenTree(journeyWords, edWords, edStructure, null, edAffixes);\n\t\tconsole.log(journeyWords);\n\n\t\t// Create the new journey and add it to collections\n\t\tlet newJourney = {type: \"journey\", header: {word: journeyWords[journeyWords.length-1].word, language: journeyWords[journeyWords.length-1].language}, words: journeyWords};\n\t\tnewCollections.push(newJourney);\n\n\t\tthis.setState({collections: newCollections, journeyCount: newJourneyCount+1});\n\t}\n\n\t/**\n\t * Opens a modal if one is not already open.\n\t * @param e SyntheticEvent\n\t * @param modalComponent React component of the modal that is to be opened.\n\t */\n\topenModal(e, modalComponent)\n\t{\n\t\tif(!this.state.activeModal)\n\t\t\tthis.setState({activeModal: modalComponent});\n\t}\n\n\t/**\n\t * Closes any currently-open modal.\n\t */\n\tcloseModal()\n\t{\n\t\tif(this.state.activeModal)\n\t\t\tthis.setState({activeModal: null});\n\t}\n\n\t/**\n\t * Opens a context menu if one is not already open.\n\t * Note: currently, only one context menu can be active at a time. This means context menus' items must not attempt to open a context menu on themselves.\n\t * @param e\n\t * @param menuComponent A React component of the context menu that is to be opened.\n\t */\n\topenContextMenu(e, menuComponent)\n\t{\n\t\tif(!this.state.activeContextMenu)\n\t\t\tthis.setState({activeContextMenu: menuComponent});\n\t}\n\n\t/**\n\t * Closes any currently-open context menu.\n\t */\n\tcloseContextMenu()\n\t{\n\t\tif(this.state.activeContextMenu)\n\t\t\tthis.setState({activeContextMenu: null});\n\t}\n\n\t/**\n\t * Adds a node to the specified collection in the state's collection array.\n\t * @param e SyntheticEvent\n\t * @param collectionIndex The index of the collection to which the new node will belong.\n\t * @param newNode The new node.\n\t */\n\taddNode(e, collectionIndex, newNode)\n\t{\n\t\t// Validation (note: node data validation exists in the AddEditNodeModal)\n\t\tlet errorCollector = \"\";\n\t\tif(this.state.collections[collectionIndex].type === \"cognate\")\n\t\t{\n\t\t\t// Check for existing language\n\t\t\tfor(let i = 0; i < this.state.collections[collectionIndex].words.length; ++i)\n\t\t\t{\n\t\t\t\tlet childNode = this.state.collections[collectionIndex].words[i];\n\t\t\t\tif(childNode.language === newNode.language)\n\t\t\t\t{\n\t\t\t\t\terrorCollector += \"A language can only appear in a cognate collection once.\\n\" +\n\t\t\t\t\t\t\t\t\t  \"Additional cognate collections may contain a language used in another cognate collection.\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error message with toast\n\t\telse\n\t\t{\n\t\t\t// Insert new node\n\t\t\tlet newCollections = this.state.collections;\n\t\t\tnewNode.arrayIndex = newCollections[collectionIndex].words.length;\n\t\t\tnewCollections[collectionIndex].words.push(newNode);\n\n\t\t\tthis.setState({collections: newCollections});\n\t\t}\n\t}\n\n\t/**\n\t * Updates a node in the specified collection in the state's collections array with updated data.\n\t * @param e React SyntheticEvent\n\t * @param collectionIndex Index of collection to which the node belongs.\n\t * @param updatedNode The updated node to be set in the collections array.\n\t */\n\teditNode(e, collectionIndex, updatedNode)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tconsole.log(e);\n\t\tconsole.log(collectionIndex);\n\t\tconsole.log(updatedNode);\n\n\t\t// Find node\n\t\tlet node = newCollections[collectionIndex].words[updatedNode.arrayIndex];\n\n\t\t// Update node by reference\n\t\tfor(let index in updatedNode)\n\t\t\tif(node[index]) node[index] = updatedNode[index];\n\n\t\tthis.setState({collections: newCollections}, () => {\n\t\t\tconsole.log(\"Post-edit collections: \");\n\t\t\tconsole.log(this.state.collections);\n\t\t\tthis.closeModal();\n\t\t});\n\t}\n\n\t/**\n\t * Removes a specified node from a specified collection in the state's collections array.\n\t * The user will be warned before deletion occurs (and will be notified of any existing parents, lest they have to add them all again).\n\t * @param e SyntheticEvent\n\t * @param collectionIndex Index of the collection to which the node belongs.\n\t * @param arrayIndex Index of the node inside the specified collection.\n\t */\n\tremoveNode(e, collectionIndex, arrayIndex)\n\t{\n\t\tlet newCollections = this.state.collections;\n\n\t\t// Find node\n\t\tlet node = newCollections[collectionIndex].words[arrayIndex];\n\t\tlet confirmed = false;\n\t\tif(node.parents.length > 0)\n\t\t\tconfirmed = window.confirm(\"Warning: this node is connected to \"+node.parents.length+\" parent nodes. The nodes will be unaffected by the deletion. Do you still wish to delete?\");\n\t\telse\n\t\t\tconfirmed = window.confirm(\"Are you sure you wish to delete this node?\");\n\n\t\tif(confirmed)\n\t\t\tnewCollections[collectionIndex].words.splice(arrayIndex, 1); // Delete node\n\n\t\tthis.setState({collections: newCollections}, this.closeModal);\n\t}\n\n\t/**\n\t * Adds a new collection to the state's collection array.\n\t * @param e SyntheticEvent\n\t * @param data An object containing the data required to build the new collection (collection object).\n\t */\n\taddCollection(e, data)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tnewCollections.push({type: data.type, header: data.header, words: []});\n\t\tthis.setState( {collections: newCollections}, this.closeModal);\n\t}\n\n\t/**\n\t * Updates an existing collection in the state's collection array with updated data.\n\t * @param e SyntheticEvent\n\t * @param data An object containing the data required to update the existing collection (collection object, collection index).\n\t */\n\teditCollection(e, data)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tnewCollections[data.index].type = data.type;\n\t\tnewCollections[data.index].header = data.header;\n\t\tthis.setState({collections: newCollections}, this.closeModal);\n\t}\n\n\t/**\n\t * Removes the specified collection from the state's collection array.\n\t * @param e SyntheticEvent\n\t * @param collectionIndex Index of the collection to be removed.\n\t */\n\tremoveCollection(e, collectionIndex)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tnewCollections.splice(collectionIndex, 1);\n\t\tthis.setState({collections: newCollections});\n\t}\n\n\trender()\n\t{\n\t\t// Render any active modals and context menus\n\t\tlet modalContainer = null, contextMenuContainer = null;\n\t\tif(this.state.activeModal !== null)\n\t\t{\n\t\t\tlet activeModal = this.state.activeModal;\n\t\t\tmodalContainer =\n\t\t\t\t<div className={\"modal-container\"} onClick={(e) =>{\n\t\t\t\t\tif(e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n\t\t\t\t}}>{activeModal}</div>;\n\t\t}\n\t\tif(this.state.activeContextMenu !== null)\n\t\t{\n\t\t\tlet activeContextMenu = this.state.activeContextMenu;\n\t\t\tcontextMenuContainer =\n\t\t\t\t<div className={\"context-menu-container\"} onClick={this.closeContextMenu}>{activeContextMenu}</div>;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"Lema\">\n\t\t\t\t<Banner />\n\t\t\t\t<div className={\"main-view-container\"}>\n\t\t\t\t\t<LeftBar collections={this.state.collections}\n\t\t\t\t\t         openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t         openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t         addJourneyFromDatabase={this.addJourneyFromDatabase}\n\t\t\t\t\t         addNode={this.addNode} editNode={this.editNode} editNodeColour={this.editNodeColour} removeNode={this.removeNode}\n\t\t\t\t\t         addCollection={this.addCollection} editCollection={this.editCollection} removeCollection={this.removeCollection}\n\t\t\t\t\t/>\n\t\t\t\t\t<Map collections={this.state.collections}\n\t\t\t\t\t     openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t     openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t\t addNode={this.addNode} editNode={this.editNode} editNodeColour={this.editNodeColour} removeNode={this.removeNode}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{modalContainer}\n\t\t\t\t{contextMenuContainer}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Lema;\n"]},"metadata":{},"sourceType":"module"}