{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { useD3 } from \"../hooks/useD3\";\nimport world from \"../world.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Map() {\n  _s();\n\n  const ref = useD3(svg => {\n    let width = svg._groups[0][0].clientWidth;\n    let height = svg._groups[0][0].clientHeight;\n    let areas = world.features.filter(o => o.properties.continent === \"Europe\" || o.properties.name === \"Turkey\" || o.properties.name === \"Iceland\").reduce((countries2, feature) => {\n      // flatten multipolygons into polygons\n      if (feature.geometry.type === \"Polygon\") {\n        countries2.push(feature);\n      } else {\n        // MultiPolygon\n        feature.geometry.coordinates.forEach(coordinates => {\n          countries2.push({\n            type: \"Feature\",\n            properties: feature.properties,\n            geometry: {\n              type: \"Polygon\",\n              coordinates\n            }\n          });\n        });\n      }\n\n      return countries2;\n    }, []);\n    areas = new Set(areas);\n    console.log(areas); // TODO: Adjust dimensions so it displays better; have it auto-scale as window is dragged\n\n    const W = 1000;\n    const H = W * height / width;\n    /*const svg = d3.select(DOM.svg(W, H))\r\n     .style(\"border\", \"1px solid #000\")\r\n     .style(\"background\", \"#eee\");*/\n\n    const g = svg.append(\"g\");\n    const g_countries = g.append(\"g\");\n    const graticules = g.append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(0,0,0,.2)\");\n    let x = 0;\n    let z = 2;\n\n    function draw() {\n      const projection = d3.geoConicConformal().parallels([40, 68]).rotate([-10 + x / z / 15, 0]).center([8 - 10, 53.823]).scale(900 * z).translate([W / 2, H / 2]);\n      const path = d3.geoPath().projection(projection);\n      let fillColour = \"white\";\n      let foo = 1;\n      const countries = g_countries.selectAll(\"path\").data(areas);\n      countries.exit().remove();\n      console.log(countries);\n      countries.enter().append(\"path\").attr(\"fill\", function (d) {\n        // TODO: Determine fill colour by node colour data\n        //  - Need a language->country mapping\n        //  - Find node language, get corresponding country, if this d's name is country then change to node colour\n        let name = d.properties.name;\n        if (name === \"Netherlands\") console.log(d);\n        if (name === \"Netherlands\") return \"orange\";else return \"white\";\n      }).attr(\"stroke\", \"black\").attr(\"stroke-linejoin\", \"round\").merge(countries).attr(\"d\", path);\n      graticules.attr(\"d\", path(d3.geoGraticule().step([20, 20])()));\n    }\n    /*\r\n     svg.call(d3.zoom().on(\"zoom\", function () {\r\n     z = d3.event.transform.k;\r\n     draw();\r\n     }));\r\n     */\n\n\n    draw();\n    return svg.node();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: ref,\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        margin: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Map, \"r127xTdrGuIqcYXTmMbvPxoKAyo=\", false, function () {\n  return [useD3];\n});\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Map.jsx"],"names":["React","useEffect","d3","useD3","world","Map","ref","svg","width","_groups","clientWidth","height","clientHeight","areas","features","filter","o","properties","continent","name","reduce","countries2","feature","geometry","type","push","coordinates","forEach","Set","console","log","W","H","g","append","g_countries","graticules","attr","x","z","draw","projection","geoConicConformal","parallels","rotate","center","scale","translate","path","geoPath","fillColour","foo","countries","selectAll","data","exit","remove","enter","d","merge","geoGraticule","step","node","margin"],"mappings":"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","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {useD3} from \"../hooks/useD3\";\r\nimport world from \"../world.json\";\r\n\r\nexport function Map()\r\n{\r\n\tconst ref = useD3(\r\n\t\t(svg) =>\r\n\t\t{\r\n\r\n\t\t\tlet width = svg._groups[0][0].clientWidth;\r\n\t\t\tlet height = svg._groups[0][0].clientHeight;\r\n\r\n\t\t\tlet areas = world.features\r\n\t\t\t\t.filter(o => o.properties.continent === \"Europe\"\r\n\t\t\t\t || o.properties.name === \"Turkey\"\r\n\t\t\t\t || o.properties.name === \"Iceland\"\r\n\t\t\t\t )\r\n\t\t\t\t.reduce((countries2, feature) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// flatten multipolygons into polygons\r\n\t\t\t\t\tif(feature.geometry.type === \"Polygon\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcountries2.push(feature);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{ // MultiPolygon\r\n\t\t\t\t\t\tfeature.geometry.coordinates.forEach(coordinates =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcountries2.push({\r\n\t\t\t\t\t\t\t\ttype: \"Feature\",\r\n\t\t\t\t\t\t\t\tproperties: feature.properties,\r\n\t\t\t\t\t\t\t\tgeometry: {type: \"Polygon\", coordinates}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn countries2;\r\n\t\t\t\t}, []);\r\n\r\n\r\n\t\t\tareas = new Set(areas);\r\n\t\t\tconsole.log(areas);\r\n\r\n\t\t\t// TODO: Adjust dimensions so it displays better; have it auto-scale as window is dragged\r\n\t\t\tconst W = 1000;\r\n\t\t\tconst H = W * height / width;\r\n\t\t\t/*const svg = d3.select(DOM.svg(W, H))\r\n\t\t\t .style(\"border\", \"1px solid #000\")\r\n\t\t\t .style(\"background\", \"#eee\");*/\r\n\t\t\tconst g = svg.append(\"g\");\r\n\t\t\tconst g_countries = g.append(\"g\");\r\n\r\n\t\t\tconst graticules = g.append(\"path\")\r\n\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\");\r\n\r\n\t\t\tlet x = 0;\r\n\t\t\tlet z = 2;\r\n\r\n\t\t\tfunction draw()\r\n\t\t\t{\r\n\t\t\t\tconst projection = d3.geoConicConformal()\r\n\t\t\t\t\t.parallels([40, 68])\r\n\t\t\t\t\t.rotate([-10 + x / z / 15, 0])\r\n\t\t\t\t\t.center([8 - 10, 53.823])\r\n\t\t\t\t\t.scale(900 * z)\r\n\t\t\t\t\t.translate([W / 2, H / 2]);\r\n\r\n\t\t\t\tconst path = d3.geoPath().projection(projection);\r\n\r\n\t\t\t\tlet fillColour = \"white\";\r\n\r\n\t\t\t\tlet foo = 1;\r\n\t\t\t\tconst countries = g_countries.selectAll(\"path\").data(areas);\r\n\t\t\t\tcountries.exit().remove();\r\n\t\t\t\tconsole.log(countries);\r\n\t\t\t\tcountries\r\n\t\t\t\t\t.enter().append(\"path\")\r\n\t\t\t\t\t.attr(\"fill\", function(d){\r\n\r\n\t\t\t\t\t\t// TODO: Determine fill colour by node colour data\r\n\t\t\t\t\t\t//  - Need a language->country mapping\r\n\t\t\t\t\t\t//  - Find node language, get corresponding country, if this d's name is country then change to node colour\r\n\r\n\t\t\t\t\t\tlet name = d.properties.name;\r\n\t\t\t\t\t\tif(name === \"Netherlands\")\r\n\t\t\t\t\t\t\tconsole.log(d);\r\n\r\n\t\t\t\t\t\tif(name === \"Netherlands\")\r\n\t\t\t\t\t\t\treturn \"orange\";\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\treturn \"white\";\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t\t\t.attr(\"stroke-linejoin\", \"round\")\r\n\t\t\t\t\t.merge(countries)\r\n\t\t\t\t\t.attr(\"d\", path);\r\n\r\n\t\t\t\tgraticules.attr(\"d\", path(d3.geoGraticule().step([20, 20])()));\r\n\t\t\t}\r\n\r\n\r\n\t\t\t/*\r\n\t\t\t svg.call(d3.zoom().on(\"zoom\", function () {\r\n\t\t\t z = d3.event.transform.k;\r\n\t\t\t draw();\r\n\t\t\t }));\r\n\t\t\t */\r\n\r\n\t\t\tdraw();\r\n\r\n\t\t\treturn svg.node();\r\n\r\n\t\t},\r\n\t\t[]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className={\"map-container\"}>\r\n\t\t\t<svg\r\n\t\t\t\tref={ref}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmargin: 0\r\n\t\t\t\t}}>\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}