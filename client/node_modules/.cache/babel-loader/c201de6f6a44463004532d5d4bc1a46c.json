{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { useD3 } from \"../hooks/useD3\";\nimport languageCountries from \"../languageCountries.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Map(props) {\n  _s();\n\n  const items = props.items;\n\n  let topojson = require(\"topojson\");\n\n  let world = require(\"../data/world.json\");\n\n  let foo = [{\n    \"name\": \"Netherlands\",\n    \"continent\": \"Europe\"\n  }, {\n    \"name\": \"England\",\n    \"continent\": \"Europe\"\n  }, {\n    \"name\": \"Germany\",\n    \"continent\": \"Europe\"\n  }, {\n    \"name\": \"France\",\n    \"continent\": \"Europe\"\n  }];\n  /* Functional example of manipulating Map node after it's been constructed */\n  // Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\n\n  useEffect(() => {\n    let innerDiv = d3.selectAll(\".map-container\").append(\"div\");\n    innerDiv.selectAll(\"div\").data(items).text(d => {\n      return d.header.word + \" (\" + d.type + \")\";\n    }).enter().append(\"div\").text(d => {\n      return d.header.word + \" (\" + d.type + \")\";\n    });\n    return function cleanup() {\n      innerDiv.selectAll(\"div\").remove();\n    };\n  });\n  /* Example of using d3-geo in useEffect() instead of custom useD3() */\n  // Note: Still needs clean-up function to stop re-renders\n\n  useEffect(() => {\n    let svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\n    let width = svg._groups[0][0].clientWidth;\n    let height = svg._groups[0][0].clientHeight;\n    let areas = world.features.reduce((countries2, feature) => {\n      // flatten multipolygons into polygons\n      if (feature.geometry.type === \"Polygon\") {\n        countries2.push(feature);\n      } else {\n        // MultiPolygon\n        feature.geometry.coordinates.forEach(coordinates => {\n          countries2.push({\n            type: \"Feature\",\n            properties: feature.properties,\n            geometry: {\n              type: \"Polygon\",\n              coordinates\n            }\n          });\n        });\n      }\n\n      return countries2;\n    }, []); // TODO: Adjust dimensions so it displays better; have it auto-scale as window is dragged\n\n    const W = width;\n    const H = W * height / width;\n    const g = svg.append(\"g\");\n    const g_countries = g.append(\"g\");\n    const graticules = g.append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(0,0,0,.2)\");\n    let x = 0;\n    let z = 1.7;\n    const projection = d3.geoConicConformal().parallels([40, 68]).center([8 - 10, 53.823]).scale(900 * z).translate([W / 2, H / 2]);\n    const path = d3.geoPath().projection(projection);\n    const countries = svg.append(\"g\").append(\"g\").selectAll(\"path\").data(areas); //countries.exit().remove();\n\n    console.log(countries);\n    countries.enter().append(\"path\").attr(\"fill\", function (d) {\n      // TODO: Determine fill colour by node colour data\n      //  - Need a language->country mapping\n      //  - Find node language, get corresponding country, if this d's name is country then change to node colour\n      let countryName = d.properties.name;\n      let fillColour = \"white\";\n\n      for (let collection in items) {\n        if (items.hasOwnProperty(collection)) {\n          collection = items[collection];\n\n          if (collection.type === \"cognate\") {\n            for (let childNode in collection.childNodes) {\n              if (collection.childNodes.hasOwnProperty(childNode)) {\n                childNode = collection.childNodes[childNode];\n                if (languageCountries[childNode.language] === countryName) fillColour = childNode.colour;\n              }\n            }\n          }\n        }\n      }\n\n      return fillColour;\n    }).attr(\"stroke\", \"black\").attr(\"stroke-linejoin\", \"round\").attr(\"d\", path);\n    graticules.attr(\"d\", path(d3.geoGraticule().step([20, 20])()));\n    /*\r\n    svg.call(d3.zoom().on(\"zoom\", function () {\r\n    \tz = d3.event.transform.k;\r\n    \tdraw(); // TODO: Contain above render code into draw() function\r\n    }));\r\n     */\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      /*ref={ref}*/\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        margin: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Map, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Map.jsx"],"names":["React","useEffect","useState","d3","useD3","languageCountries","Map","props","items","topojson","require","world","foo","innerDiv","selectAll","append","data","text","d","header","word","type","enter","cleanup","remove","svg","width","_groups","clientWidth","height","clientHeight","areas","features","reduce","countries2","feature","geometry","push","coordinates","forEach","properties","W","H","g","g_countries","graticules","attr","x","z","projection","geoConicConformal","parallels","center","scale","translate","path","geoPath","countries","console","log","countryName","name","fillColour","collection","hasOwnProperty","childNode","childNodes","language","colour","geoGraticule","step","margin"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {useD3} from \"../hooks/useD3\";\r\nimport languageCountries from \"../languageCountries.json\";\r\n\r\nexport function Map(props)\r\n{\r\n\tconst items = props.items;\r\n\tlet topojson = require(\"topojson\");\r\n\tlet world = require(\"../data/world.json\");\r\n\r\n\tlet foo = [{\"name\": \"Netherlands\", \"continent\": \"Europe\"}, {\"name\": \"England\", \"continent\": \"Europe\"},\r\n\t\t{\"name\": \"Germany\", \"continent\": \"Europe\"}, {\"name\": \"France\", \"continent\": \"Europe\"}];\r\n\r\n\t/* Functional example of manipulating Map node after it's been constructed */\r\n\t// Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\r\n\tuseEffect(() => {\r\n\t\tlet innerDiv = d3.selectAll(\".map-container\").append(\"div\");\r\n\t\tinnerDiv\r\n\t\t\t.selectAll(\"div\")\r\n\t\t\t.data(items)\r\n\t\t\t.text((d) => {\r\n\t\t\t\treturn d.header.word + \" (\" + d.type + \")\";\r\n\t\t\t})\r\n\t\t\t.enter()\r\n\t\t\t.append(\"div\")\r\n\t\t\t.text((d) => {\r\n\t\t\t\treturn d.header.word + \" (\" + d.type + \")\";\r\n\t\t\t});\r\n\r\n\t\treturn function cleanup()\r\n\t\t{\r\n\t\t\tinnerDiv\r\n\t\t\t\t.selectAll(\"div\")\r\n\t\t\t\t.remove();\r\n\t\t}\r\n\t})\r\n\r\n\t/* Example of using d3-geo in useEffect() instead of custom useD3() */\r\n\t// Note: Still needs clean-up function to stop re-renders\r\n\tuseEffect(() => {\r\n\t\tlet svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\r\n\t\tlet width = svg._groups[0][0].clientWidth;\r\n\t\tlet height = svg._groups[0][0].clientHeight;\r\n\r\n\t\tlet areas = world.features\r\n\t\t\t.reduce((countries2, feature) =>\r\n\t\t\t{\r\n\t\t\t\t// flatten multipolygons into polygons\r\n\t\t\t\tif(feature.geometry.type === \"Polygon\")\r\n\t\t\t\t{\r\n\t\t\t\t\tcountries2.push(feature);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{ // MultiPolygon\r\n\t\t\t\t\tfeature.geometry.coordinates.forEach(coordinates =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcountries2.push({\r\n\t\t\t\t\t\t\ttype: \"Feature\",\r\n\t\t\t\t\t\t\tproperties: feature.properties,\r\n\t\t\t\t\t\t\tgeometry: {type: \"Polygon\", coordinates}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn countries2;\r\n\t\t\t}, []);\r\n\r\n\t\t// TODO: Adjust dimensions so it displays better; have it auto-scale as window is dragged\r\n\t\tconst W = width;\r\n\t\tconst H = W * height / width;\r\n\t\tconst g = svg.append(\"g\");\r\n\t\tconst g_countries = g.append(\"g\");\r\n\r\n\t\tconst graticules = g.append(\"path\")\r\n\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\");\r\n\r\n\t\tlet x = 0;\r\n\t\tlet z = 1.7;\r\n\r\n\t\tconst projection = d3.geoConicConformal()\r\n\t\t\t.parallels([40, 68])\r\n\t\t\t.center([8 - 10, 53.823])\r\n\t\t\t.scale(900 * z)\r\n\t\t\t.translate([W / 2, H / 2]);\r\n\r\n\t\tconst path = d3.geoPath().projection(projection);\r\n\t\tconst countries = svg.append(\"g\").append(\"g\").selectAll(\"path\").data(areas);\r\n\t\t//countries.exit().remove();\r\n\t\tconsole.log(countries);\r\n\t\tcountries\r\n\t\t\t.enter().append(\"path\")\r\n\t\t\t.attr(\"fill\", function(d){\r\n\t\t\t\t// TODO: Determine fill colour by node colour data\r\n\t\t\t\t//  - Need a language->country mapping\r\n\t\t\t\t//  - Find node language, get corresponding country, if this d's name is country then change to node colour\r\n\r\n\t\t\t\tlet countryName = d.properties.name;\r\n\t\t\t\tlet fillColour = \"white\";\r\n\r\n\t\t\t\tfor(let collection in items)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(items.hasOwnProperty(collection))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcollection = items[collection];\r\n\t\t\t\t\t\tif(collection.type === \"cognate\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(let childNode in collection.childNodes)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(collection.childNodes.hasOwnProperty(childNode))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tchildNode = collection.childNodes[childNode];\r\n\t\t\t\t\t\t\t\t\tif(languageCountries[childNode.language] === countryName)\r\n\t\t\t\t\t\t\t\t\t\tfillColour = childNode.colour;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn fillColour;\r\n\t\t\t})\r\n\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t.attr(\"stroke-linejoin\", \"round\")\r\n\t\t\t.attr(\"d\", path);\r\n\r\n\r\n\t\tgraticules.attr(\"d\", path(d3.geoGraticule().step([20, 20])()));\r\n\r\n\t\t/*\r\n\t\tsvg.call(d3.zoom().on(\"zoom\", function () {\r\n\t\t\tz = d3.event.transform.k;\r\n\t\t\tdraw(); // TODO: Contain above render code into draw() function\r\n\t\t}));\r\n\t\t */\r\n\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className={\"map-container\"}>\r\n\t\t\t<svg\r\n\t\t\t\t/*ref={ref}*/\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmargin: 0\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}