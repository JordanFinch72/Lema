{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\client\\\\src\\\\Lema.js\";\nimport \"./css/Lema.css\";\nimport { Component } from \"react\";\nimport { Banner } from \"./components/Banner\";\nimport { LeftBar } from \"./components/LeftBar\";\nimport { Map } from \"./components/Map\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Lema extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeModal: null,\n      // Either null or a React component\n      activeContextMenu: null,\n      // Either null or a React component\n      activeUser: null,\n      // Set upon user login\n      activeMap: null,\n      // Either null, set by load function, or set by save function once saved to profile\n      collections: [],\n      journeyCount: 0\n    };\n    this.defaultJourneyColours = [\"#ff0000\", \"#00ff00\", \"#0000ff\", \"#da35aa\", \"#ffcc00\"]; // TODO: Better colours\n\n    this.flattenTree = this.flattenTree.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.openContextMenu = this.openContextMenu.bind(this);\n    this.closeContextMenu = this.closeContextMenu.bind(this);\n    this.addCollection = this.addCollection.bind(this);\n    this.editCollection = this.editCollection.bind(this);\n    this.addJourneyFromDatabase = this.addJourneyFromDatabase.bind(this);\n    this.addNode = this.addNode.bind(this);\n    this.editNode = this.editNode.bind(this);\n    this.removeNode = this.removeNode.bind(this);\n    this.removeCollection = this.removeCollection.bind(this);\n    this.authenticateUser = this.authenticateUser.bind(this);\n    this.registerUser = this.registerUser.bind(this);\n    this.logoutUser = this.logoutUser.bind(this);\n    this.saveMap = this.saveMap.bind(this);\n    this.loadMap = this.loadMap.bind(this);\n    this.deleteMap = this.deleteMap.bind(this);\n  }\n\n  componentDidMount() {\n    // Check if user is already logged in\n    const activeUser = JSON.parse(localStorage.getItem(\"LEMA_activeUser\"));\n    if (activeUser) this.setState({\n      activeUser: activeUser\n    }); // Check if there are active collections (DISTINCT FROM activeMap!)\n\n    const activeCollections = JSON.parse(localStorage.getItem(\"LEMA_activeCollections\"));\n    if (activeCollections) this.setState({\n      collections: activeCollections.collections,\n      journeyCount: activeCollections.journeyCount\n    });\n  }\n  /**\n   * Sends log in data to server to authenticate user.\n   * @param e SyntheticEvent\n   * @param data Login data\n   */\n\n\n  authenticateUser(e, data) {\n    // Check the user\n    const username = data.loginUsername;\n    const password = data.loginPassword;\n    const rememberMe = data.rememberMe; // TODO: This\n\n    axios.get(`users/${username}/${password}`).then(response => {\n      if (this.handleResponse(response, \"User found.\", \"Login successful!\")) {\n        if (rememberMe) localStorage.setItem(\"LEMA_activeUser\", JSON.stringify(response.data.user));\n        this.setState({\n          activeUser: response.data.user\n        });\n      }\n    });\n  }\n  /**\n   * Sends register data to server to create a new user profile.\n   * @param e SyntheticEvent\n   * @param data Registration data\n   */\n\n\n  registerUser(e, data) {\n    // Register the user\n    const {\n      displayName,\n      username,\n      password,\n      email\n    } = data;\n    axios.put(`users/${displayName}/${username}/${password}/${email}`).then(response => {\n      this.handleResponse(response, \"User created.\", \"Profile created! You may now log in.\");\n    });\n    /*axios.put(`users/${displayName}/${username}/${password}/${email}`).then((response) => {\n    \tconsole.log(response);\n    \tif(response.data.type === \"error\")\n    \t{\n    \t\tconsole.error(response.data.message);\n    \t\talert(response.data.message);\n    \t}\n    \telse if(response.data.type === \"success\")\n    \t{\n    \t\tconsole.log(response.data);\n    \t\tif(response.data.message === \"User created.\")\n    \t\t{\n    \t\t\talert(\"Profile created! You may now log in.\");\n    \t\t\tthis.closeModal();\n    \t\t}\n    \t}\n    });*/\n  }\n  /**\n   * Logs the user out of the app.\n   * @param e SyntheticEvent\n   */\n\n\n  logoutUser(e) {\n    const userConfirmed = window.confirm(\"Are you sure you wish to log out? This will clear your map data.\");\n\n    if (userConfirmed) {\n      localStorage.removeItem(\"LEMA_activeUser\");\n      localStorage.removeItem(\"LEMA_activeCollections\");\n      this.setState({\n        activeUser: null,\n        activeMap: null,\n        collections: [],\n        journeyCount: 0\n      });\n    }\n  }\n  /**\n   * A recursive function that flattens the nested data structure returned from the etymological database into an\n   * array of word nodes.\n   * @param wordArray Flat array of words (initially empty)\n   * @param edWords Object of words returned by the etymological database\n   * @param edStructure Original data structure returned by the etymological database\n   * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n   * @param wordID The ID of the word currently being operated on in the recursive function\n   * @returns {array} The wordArray object, which has nodes pushed to it throughout the function\n   */\n\n\n  flattenTree(wordArray, edWords, edStructure, wordID) {\n    let edAffixes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let parents = [],\n        wordNode = {}; // Parents\n\n    if (Object.keys(edStructure).length > 0) {\n      // Loop through parents\n      for (const wordID in edStructure) {\n        if (edAffixes !== null && !edAffixes.includes(Number(wordID)) || edAffixes == null) {\n          parents.push(wordID);\n          wordArray = this.flattenTree(wordArray, edWords, edStructure[wordID], wordID, edAffixes);\n        }\n      }\n    } // Retrieve word from ED and convert to Lema-compatible object\n\n\n    if (wordID !== null) {\n      wordNode = edWords[wordID];\n      wordNode = {\n        id: Number(wordID),\n        arrayIndex: wordArray.length,\n        word: wordNode.word,\n        language: wordNode.language_name,\n        parents: [],\n        vertex: {\n          type: \"word\",\n          customText: \"\",\n          fontColour: \"#000000\",\n          strokeColour: \"#000000\",\n          fillColour: this.defaultJourneyColours[this.state.journeyCount],\n          radius: null,\n          fontSize: null,\n          x: null,\n          y: null,\n          edgeStart: \"centre\",\n          edgeEnd: \"centre\",\n          edgeStrokeColour: \"#000000\",\n          edgeStrokeWidth: \"2px\",\n          edgeArrowheadEnabled: true,\n          edgeArrowheadStrokeColour: \"#000000\",\n          edgeArrowheadFillColour: \"#000000\"\n        }\n      };\n\n      for (let i = 0; i < parents.length; ++i) {\n        const parentID = Number(parents[i]);\n        const parent = wordArray.find(_ref => {\n          let {\n            id\n          } = _ref;\n          return id === parentID;\n        });\n\n        if (edAffixes !== null && !edAffixes.includes(parentID) || edAffixes === null) {\n          wordNode.parents.push(parent);\n        }\n      }\n\n      wordArray.push(wordNode);\n    }\n\n    return wordArray;\n  }\n  /**\n   * Creates a journey collection from words returned by the etymological database and automatically adds them to the existing journey collections array\n   * @param edWords Object of words returned by the etymological database\n   * @param edStructure Original data structure returned by the etymological database\n   * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n   */\n\n\n  addJourneyFromDatabase(edWords, edStructure) {\n    let edAffixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const newCollections = this.state.collections,\n          newJourneyCount = this.state.journeyCount; // Flatten the data structure\n\n    let journeyWords = [];\n    journeyWords = this.flattenTree(journeyWords, edWords, edStructure, null, edAffixes);\n    console.log(journeyWords); // Create the new journey and add it to collections\n\n    const newJourney = {\n      type: \"journey\",\n      header: {\n        word: journeyWords[journeyWords.length - 1].word,\n        language: journeyWords[journeyWords.length - 1].language\n      },\n      words: journeyWords\n    };\n    newCollections.push(newJourney);\n    this.setState({\n      collections: newCollections,\n      journeyCount: newJourneyCount + 1\n    }, function () {\n      localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n        collections: newCollections,\n        journeyCount: this.state.journeyCount\n      }));\n    });\n  }\n  /**\n   * Opens a modal if one is not already open.\n   * @param e SyntheticEvent\n   * @param modalComponent React component of the modal that is to be opened.\n   */\n\n\n  openModal(e, modalComponent) {\n    if (!this.state.activeModal) this.setState({\n      activeModal: modalComponent\n    });\n  }\n  /**\n   * Closes any currently-open modal.\n   */\n\n\n  closeModal() {\n    if (this.state.activeModal) this.setState({\n      activeModal: null\n    });\n  }\n  /**\n   * Opens a context menu if one is not already open.\n   * Note: currently, only one context menu can be active at a time. This means context menus' items must not attempt to open a context menu on themselves.\n   * @param e\n   * @param menuComponent A React component of the context menu that is to be opened.\n   */\n\n\n  openContextMenu(e, menuComponent) {\n    if (!this.state.activeContextMenu) this.setState({\n      activeContextMenu: menuComponent\n    });\n  }\n  /**\n   * Closes any currently-open context menu.\n   */\n\n\n  closeContextMenu() {\n    if (this.state.activeContextMenu) this.setState({\n      activeContextMenu: null\n    });\n  }\n  /**\n   * Adds a node to the specified collection in the state's collection array.\n   * @param e SyntheticEvent\n   * @param collectionIndex The index of the collection to which the new node will belong.\n   * @param newNode The new node.\n   */\n\n\n  addNode(e, collectionIndex, newNode) {\n    let newCollectionIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    const collectionIndexActual = newCollectionIndex !== null ? newCollectionIndex : collectionIndex; // Validation (note: node data validation exists in the AddEditNodeModal)\n\n    let errorCollector = \"\";\n\n    if (this.state.collections[collectionIndexActual].type === \"cognate\") {\n      // Check for existing language\n      for (let i = 0; i < this.state.collections[collectionIndexActual].words.length; ++i) {\n        const childNode = this.state.collections[collectionIndexActual].words[i];\n\n        if (childNode.language === newNode.language) {\n          errorCollector += \"A language can only appear in a cognate collection once.\\n\" + \"Additional cognate collections may contain a language used in another cognate collection.\";\n          break;\n        }\n      }\n    }\n\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error message with toast\n    else {\n      // Insert new node\n      const newCollections = this.state.collections;\n      newNode.arrayIndex = newCollections[collectionIndexActual].words.length;\n      newCollections[collectionIndexActual].words.push(newNode);\n      this.setState({\n        collections: newCollections\n      }, function () {\n        localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n          collections: newCollections,\n          journeyCount: this.state.journeyCount\n        }));\n        this.closeModal();\n      });\n    }\n  }\n  /**\n   * Updates a node in the specified collection in the state's collections array with updated data.\n   * @param e React SyntheticEvent\n   * @param collectionIndex Index of collection to which the node belongs.\n   * @param updatedNode The updated node to be set in the collections array.\n   */\n\n\n  editNode(e, collectionIndex, updatedNode) {\n    let newCollectionIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    const newCollections = this.state.collections;\n    console.log(e);\n    console.log(collectionIndex);\n    console.log(updatedNode); // Find node\n\n    const node = newCollections[collectionIndex].words[updatedNode.arrayIndex]; // Update node by reference\n\n    for (const index in updatedNode) if (node[index]) node[index] = updatedNode[index]; // Additional operations if node was moved from one collection to another\n\n\n    if (newCollectionIndex !== null) {\n      node.arrayIndex = newCollections[newCollectionIndex].words.length; // Update arrayIndex to reflect new collection\n\n      node.parents.splice(0, node.parents.length); // Clear parents\n\n      newCollections[newCollectionIndex].words.push(node); // Add node to new collection\n\n      this.removeNode(e, collectionIndex, updatedNode.arrayIndex); // Delete node from original collection\n    }\n\n    this.setState({\n      collections: newCollections\n    }, () => {\n      localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n        collections: newCollections,\n        journeyCount: this.state.journeyCount\n      }));\n      this.closeModal();\n    });\n  }\n  /**\n   * Removes a specified node from a specified collection in the state's collections array.\n   * The user will be warned before deletion occurs (and will be notified of any existing parents, lest they have to add them all again).\n   * @param e SyntheticEvent\n   * @param collectionIndex Index of the collection to which the node belongs.\n   * @param arrayIndex Index of the node inside the specified collection.\n   */\n\n\n  removeNode(e, collectionIndex, arrayIndex) {\n    const newCollections = this.state.collections; // Find node\n\n    const node = newCollections[collectionIndex].words[arrayIndex];\n    let confirmed = false;\n    if (node.parents.length > 0) confirmed = window.confirm(\"Warning: this node is connected to \" + node.parents.length + \" parent nodes. The nodes will be unaffected by the deletion/move. Do you still wish to delete/move?\");else confirmed = window.confirm(\"Are you sure you wish to delete/move this node?\");\n\n    if (confirmed) {\n      newCollections[collectionIndex].words.splice(arrayIndex, 1); // Delete node\n\n      for (let i = 0; i < newCollections[collectionIndex].words.length; ++i) {\n        const word = newCollections[collectionIndex].words[i];\n        if (word.arrayIndex > arrayIndex) word.arrayIndex = word.arrayIndex - 1; // Shift down after splice\n        // Delete node in parents array of others (as splice() does not delete by reference)\n\n        for (let j = 0; j < word.parents.length; ++j) {\n          if (word.parents[j].id === node.id) {\n            alert(\"Found a parent! Get ready to splice!\");\n            word.parents.splice(j, 1);\n          }\n        }\n      }\n    }\n\n    this.setState({\n      collections: newCollections\n    }, function () {\n      localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n        collections: newCollections,\n        journeyCount: this.state.journeyCount\n      }));\n      this.closeModal();\n    });\n  }\n  /**\n   * Adds a new collection to the state's collection array.\n   * @param e SyntheticEvent\n   * @param data An object containing the data required to build the new collection (collection object).\n   */\n\n\n  addCollection(e, data) {\n    const newCollections = this.state.collections;\n    let newJourneyCount = this.state.journeyCount; // Only one cognate allowed, for now // TODO\n\n    if (data.type === \"cognate\" && newCollections.find(e => e.type === \"cognate\") !== undefined) alert(\"Support for multiple cognate collections coming soon!\");else {\n      if (data.type === \"journey\") newJourneyCount += 1;\n      newCollections.push({\n        type: data.type,\n        header: data.header,\n        words: []\n      });\n      this.setState({\n        collections: newCollections,\n        journeyCount: newJourneyCount\n      }, function () {\n        localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n          collections: newCollections,\n          journeyCount: this.state.journeyCount\n        }));\n        this.closeModal();\n      });\n    }\n  }\n  /**\n   * Updates an existing collection in the state's collection array with updated data.\n   * @param e SyntheticEvent\n   * @param data An object containing the data required to update the existing collection (collection object, collection index).\n   */\n\n\n  editCollection(e, data) {\n    const newCollections = this.state.collections;\n    newCollections[data.index].type = data.type;\n    newCollections[data.index].header = data.header;\n    this.setState({\n      collections: newCollections\n    }, function () {\n      localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n        collections: newCollections,\n        journeyCount: this.state.journeyCount\n      }));\n      this.closeModal();\n    });\n  }\n  /**\n   * Removes the specified collection from the state's collection array.\n   * @param e SyntheticEvent\n   * @param collectionIndex Index of the collection to be removed.\n   */\n\n\n  removeCollection(e, collectionIndex) {\n    const newCollections = this.state.collections;\n    let newJourneyCount = this.state.journeyCount;\n    if (newCollections[collectionIndex].type === \"journey\") newJourneyCount = this.state.journeyCount - 1;\n    newCollections.splice(collectionIndex, 1); // Remove the collection\n\n    this.setState({\n      collections: newCollections,\n      journeyCount: newJourneyCount\n    }, function () {\n      localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n        collections: newCollections,\n        journeyCount: this.state.journeyCount\n      }));\n    });\n  }\n  /**\n   * Serialises the map to JSON then saves it in the manner specified.\n   * @param data User-specified data about the map (such as the title).\n   */\n\n\n  saveMap(e, data) {\n    const username = this.state.activeUser.username;\n    const activeMapID = this.state.activeMap ? this.state.activeMap.mapID : null;\n    const isNewMap = data.isNewMap;\n    console.log(data);\n    console.log(this.state.activeMap); // Attach map data\n\n    data.mapData = {\n      collections: this.state.collections,\n      journeyCount: this.state.journeyCount\n    };\n\n    if (data.saveMode === \"Save to profile\") {\n      // Send to server\n      if (activeMapID === null || isNewMap) {\n        // Insert new map\n        axios.put(`maps/${username}`, {\n          data: data\n        }).then(response => {\n          if (this.handleResponse(response, \"Map inserted.\", \"Map saved!\")) this.setState({\n            activeMap: response.data.map\n          }); // Set new map data returned by server\n        });\n      } else {\n        // Update map\n        axios.put(`maps/${username}/${activeMapID}`, {\n          data: data\n        }).then(response => {\n          if (this.handleResponse(response, \"Map data updated.\", \"Map saved!\")) this.setState({\n            activeMap: response.data.map\n          }); // Set new map data returned by server\n        });\n      }\n    } else if (data.saveMode === \"Export to JSON file\") {// TODO: Exporting to JSON file\n    }\n  }\n  /**\n   * Loads the map using data returned by the server.\n   * @param e SyntheticEvent\n   * @param map The map object to be loaded.\n   */\n\n\n  loadMap(e, map) {\n    this.setState({\n      activeMap: map,\n      collections: map.mapData.collections,\n      journeyCount: map.mapData.journeyCount\n    }, function () {\n      localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n        collections: map.mapData.collections,\n        journeyCount: map.mapData.journeyCount\n      }));\n      this.closeModal();\n    });\n  }\n\n  deleteMap(e, mapID) {\n    const username = this.state.activeUser.username;\n    axios.delete(`maps/${username}/${mapID}`).then(response => {\n      this.handleResponse(response, \"Map deleted.\", null);\n    });\n  }\n  /**\n   * Handles responses from axios calls\n   * @param response Response returned by axios call\n   * @param successMessage Success message expected from server\n   * @param successAlert Success message to display to user\n   * @returns {boolean} If the response was a success\n   */\n\n\n  handleResponse(response, successMessage, successAlert) {\n    let closeModal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    console.log(response);\n\n    if (response.data.type === \"error\") {\n      console.error(response.data.message);\n      alert(response.data.message);\n    } else if (response.data.type === \"success\") {\n      console.log(response.data);\n\n      if (response.data.message === successMessage) {\n        if (successAlert) alert(successAlert);\n        if (closeModal) this.closeModal();\n        return true;\n      }\n    }\n  }\n\n  render() {\n    // Render any active modals and context menus\n    let modalContainer = null,\n        contextMenuContainer = null;\n\n    if (this.state.activeModal !== null) {\n      const activeModal = this.state.activeModal;\n      modalContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-container\",\n        onClick: e => {\n          if (e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n        },\n        children: activeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 5\n      }, this);\n    }\n\n    if (this.state.activeContextMenu !== null) {\n      const activeContextMenu = this.state.activeContextMenu;\n      contextMenuContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"context-menu-container\",\n        onClick: this.closeContextMenu,\n        children: activeContextMenu\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 5\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Lema\",\n      children: [/*#__PURE__*/_jsxDEV(Banner, {\n        activeUser: this.state.activeUser,\n        openModal: this.openModal,\n        activeMap: this.state.activeMap,\n        authenticateUser: this.authenticateUser,\n        registerUser: this.registerUser,\n        logoutUser: this.logoutUser,\n        saveMap: this.saveMap,\n        loadMap: this.loadMap,\n        deleteMap: this.deleteMap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-view-container\",\n        children: [/*#__PURE__*/_jsxDEV(LeftBar, {\n          collections: this.state.collections,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          addNode: this.addNode,\n          editNode: this.editNode,\n          removeNode: this.removeNode,\n          addCollection: this.addCollection,\n          editCollection: this.editCollection,\n          removeCollection: this.removeCollection,\n          addJourneyFromDatabase: this.addJourneyFromDatabase\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Map, {\n          collections: this.state.collections,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          addNode: this.addNode,\n          editNode: this.editNode,\n          removeNode: this.removeNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 5\n      }, this), modalContainer, contextMenuContainer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Lema;","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/client/src/Lema.js"],"names":["Component","Banner","LeftBar","Map","axios","Lema","constructor","props","state","activeModal","activeContextMenu","activeUser","activeMap","collections","journeyCount","defaultJourneyColours","flattenTree","bind","openModal","closeModal","openContextMenu","closeContextMenu","addCollection","editCollection","addJourneyFromDatabase","addNode","editNode","removeNode","removeCollection","authenticateUser","registerUser","logoutUser","saveMap","loadMap","deleteMap","componentDidMount","JSON","parse","localStorage","getItem","setState","activeCollections","e","data","username","loginUsername","password","loginPassword","rememberMe","get","then","response","handleResponse","setItem","stringify","user","displayName","email","put","userConfirmed","window","confirm","removeItem","wordArray","edWords","edStructure","wordID","edAffixes","parents","wordNode","Object","keys","length","includes","Number","push","id","arrayIndex","word","language","language_name","vertex","type","customText","fontColour","strokeColour","fillColour","radius","fontSize","x","y","edgeStart","edgeEnd","edgeStrokeColour","edgeStrokeWidth","edgeArrowheadEnabled","edgeArrowheadStrokeColour","edgeArrowheadFillColour","i","parentID","parent","find","newCollections","newJourneyCount","journeyWords","console","log","newJourney","header","words","modalComponent","menuComponent","collectionIndex","newNode","newCollectionIndex","collectionIndexActual","errorCollector","childNode","alert","updatedNode","node","index","splice","confirmed","j","undefined","activeMapID","mapID","isNewMap","mapData","saveMode","map","delete","successMessage","successAlert","error","message","render","modalContainer","contextMenuContainer","nativeEvent","target","className"],"mappings":"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","sourcesContent":["import \"./css/Lema.css\";\nimport {Component} from \"react\";\nimport {Banner} from \"./components/Banner\";\nimport {LeftBar} from \"./components/LeftBar\";\nimport {Map} from \"./components/Map\";\nimport axios from \"axios\";\n\nclass Lema extends Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tactiveModal: null,       // Either null or a React component\n\t\t\tactiveContextMenu: null, // Either null or a React component\n\t\t\tactiveUser: null,        // Set upon user login\n\t\t\tactiveMap: null,         // Either null, set by load function, or set by save function once saved to profile\n\t\t\tcollections: [],\n\t\t\tjourneyCount: 0\n\t\t};\n\n\t\tthis.defaultJourneyColours = [\"#ff0000\", \"#00ff00\", \"#0000ff\", \"#da35aa\", \"#ffcc00\"] // TODO: Better colours\n\n\t\tthis.flattenTree = this.flattenTree.bind(this);\n\t\tthis.openModal = this.openModal.bind(this);\n\t\tthis.closeModal = this.closeModal.bind(this);\n\t\tthis.openContextMenu = this.openContextMenu.bind(this);\n\t\tthis.closeContextMenu = this.closeContextMenu.bind(this);\n\t\tthis.addCollection = this.addCollection.bind(this);\n\t\tthis.editCollection = this.editCollection.bind(this);\n\t\tthis.addJourneyFromDatabase = this.addJourneyFromDatabase.bind(this);\n\t\tthis.addNode = this.addNode.bind(this);\n\t\tthis.editNode = this.editNode.bind(this);\n\t\tthis.removeNode = this.removeNode.bind(this);\n\t\tthis.removeCollection = this.removeCollection.bind(this);\n\t\tthis.authenticateUser = this.authenticateUser.bind(this);\n\t\tthis.registerUser = this.registerUser.bind(this);\n\t\tthis.logoutUser = this.logoutUser.bind(this);\n\t\tthis.saveMap = this.saveMap.bind(this);\n\t\tthis.loadMap = this.loadMap.bind(this);\n\t\tthis.deleteMap = this.deleteMap.bind(this);\n\t}\n\n\tcomponentDidMount()\n\t{\n\t\t// Check if user is already logged in\n\t\tconst activeUser = JSON.parse(localStorage.getItem(\"LEMA_activeUser\"));\n\t\tif(activeUser)\n\t\t\tthis.setState({activeUser: activeUser});\n\n\t\t// Check if there are active collections (DISTINCT FROM activeMap!)\n\t\tconst activeCollections = JSON.parse(localStorage.getItem(\"LEMA_activeCollections\"));\n\t\tif(activeCollections)\n\t\t\tthis.setState({collections: activeCollections.collections, journeyCount: activeCollections.journeyCount});\n\t}\n\n\t/**\n\t * Sends log in data to server to authenticate user.\n\t * @param e SyntheticEvent\n\t * @param data Login data\n\t */\n\tauthenticateUser(e, data)\n\t{\n\t\t// Check the user\n\t\tconst username = data.loginUsername;\n\t\tconst password = data.loginPassword;\n\t\tconst rememberMe = data.rememberMe; // TODO: This\n\n\t\taxios.get(`users/${username}/${password}`).then((response) => {\n\t\t\tif(this.handleResponse(response, \"User found.\", \"Login successful!\"))\n\t\t\t{\n\t\t\t\tif(rememberMe) localStorage.setItem(\"LEMA_activeUser\", JSON.stringify(response.data.user));\n\t\t\t\tthis.setState({activeUser: response.data.user});\n\t\t\t}\n\t\t});\n\n\t}\n\t/**\n\t * Sends register data to server to create a new user profile.\n\t * @param e SyntheticEvent\n\t * @param data Registration data\n\t */\n\tregisterUser(e, data)\n\t{\n\t\t// Register the user\n\t\tconst {displayName, username, password, email} = data;\n\n\t\taxios.put(`users/${displayName}/${username}/${password}/${email}`).then((response) => {\n\t\t\tthis.handleResponse(response, \"User created.\", \"Profile created! You may now log in.\");\n\t\t});\n\n\t\t/*axios.put(`users/${displayName}/${username}/${password}/${email}`).then((response) => {\n\t\t\tconsole.log(response);\n\t\t\tif(response.data.type === \"error\")\n\t\t\t{\n\t\t\t\tconsole.error(response.data.message);\n\t\t\t\talert(response.data.message);\n\t\t\t}\n\t\t\telse if(response.data.type === \"success\")\n\t\t\t{\n\t\t\t\tconsole.log(response.data);\n\t\t\t\tif(response.data.message === \"User created.\")\n\t\t\t\t{\n\t\t\t\t\talert(\"Profile created! You may now log in.\");\n\t\t\t\t\tthis.closeModal();\n\t\t\t\t}\n\t\t\t}\n\t\t});*/\n\t}\n\n\t/**\n\t * Logs the user out of the app.\n\t * @param e SyntheticEvent\n\t */\n\tlogoutUser(e)\n\t{\n\t\tconst userConfirmed = window.confirm(\"Are you sure you wish to log out? This will clear your map data.\");\n\t\tif(userConfirmed)\n\t\t{\n\t\t\tlocalStorage.removeItem(\"LEMA_activeUser\");\n\t\t\tlocalStorage.removeItem(\"LEMA_activeCollections\");\n\t\t\tthis.setState({activeUser: null, activeMap: null, collections: [], journeyCount: 0});\n\t\t}\n\t}\n\n\t/**\n\t * A recursive function that flattens the nested data structure returned from the etymological database into an\n\t * array of word nodes.\n\t * @param wordArray Flat array of words (initially empty)\n\t * @param edWords Object of words returned by the etymological database\n\t * @param edStructure Original data structure returned by the etymological database\n\t * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n\t * @param wordID The ID of the word currently being operated on in the recursive function\n\t * @returns {array} The wordArray object, which has nodes pushed to it throughout the function\n\t */\n\tflattenTree(wordArray, edWords, edStructure, wordID, edAffixes = null)\n\t{\n\t\tlet parents = [], wordNode = {};\n\t\t// Parents\n\t\tif(Object.keys(edStructure).length > 0)\n\t\t{\n\t\t\t// Loop through parents\n\t\t\tfor(const wordID in edStructure)\n\t\t\t{\n\t\t\t\tif((edAffixes !== null && !edAffixes.includes(Number(wordID)))\n\t\t\t\t\t|| edAffixes == null)\n\t\t\t\t{\n\t\t\t\t\tparents.push(wordID);\n\t\t\t\t\twordArray = this.flattenTree(wordArray, edWords, edStructure[wordID], wordID, edAffixes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Retrieve word from ED and convert to Lema-compatible object\n\t\tif(wordID !== null)\n\t\t{\n\t\t\twordNode = edWords[wordID];\n\t\t\twordNode = {\n\t\t\t\tid: Number(wordID),\n\t\t\t\tarrayIndex: wordArray.length,\n\t\t\t\tword: wordNode.word,\n\t\t\t\tlanguage: wordNode.language_name,\n\t\t\t\tparents: [],\n\t\t\t\tvertex: {type: \"word\", customText: \"\", fontColour: \"#000000\", strokeColour: \"#000000\", fillColour: this.defaultJourneyColours[this.state.journeyCount], radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\", edgeStrokeColour: \"#000000\", edgeStrokeWidth: \"2px\", edgeArrowheadEnabled: true, edgeArrowheadStrokeColour: \"#000000\", edgeArrowheadFillColour: \"#000000\"}\n\t\t\t}\n\t\t\tfor(let i = 0; i < parents.length; ++i)\n\t\t\t{\n\t\t\t\tconst parentID = Number(parents[i]);\n\t\t\t\tconst parent = wordArray.find(({id}) => id === parentID);\n\t\t\t\tif((edAffixes !== null && !edAffixes.includes(parentID))\n\t\t\t\t\t|| edAffixes === null)\n\t\t\t\t{\n\t\t\t\t\twordNode.parents.push(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\twordArray.push(wordNode);\n\t\t}\n\t\treturn wordArray;\n\t}\n\n\t/**\n\t * Creates a journey collection from words returned by the etymological database and automatically adds them to the existing journey collections array\n\t * @param edWords Object of words returned by the etymological database\n\t * @param edStructure Original data structure returned by the etymological database\n\t * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n\t */\n\taddJourneyFromDatabase(edWords, edStructure, edAffixes = null)\n\t{\n\t\tconst newCollections = this.state.collections, newJourneyCount = this.state.journeyCount;\n\n\t\t// Flatten the data structure\n\t\tlet journeyWords = [];\n\t\tjourneyWords = this.flattenTree(journeyWords, edWords, edStructure, null, edAffixes);\n\t\tconsole.log(journeyWords);\n\n\t\t// Create the new journey and add it to collections\n\t\tconst newJourney = {type: \"journey\", header: {word: journeyWords[journeyWords.length-1].word, language: journeyWords[journeyWords.length-1].language}, words: journeyWords};\n\t\tnewCollections.push(newJourney);\n\n\t\tthis.setState({collections: newCollections, journeyCount: newJourneyCount+1}, function(){\n\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: newCollections, journeyCount: this.state.journeyCount}));\n\t\t});\n\t}\n\n\t/**\n\t * Opens a modal if one is not already open.\n\t * @param e SyntheticEvent\n\t * @param modalComponent React component of the modal that is to be opened.\n\t */\n\topenModal(e, modalComponent)\n\t{\n\t\tif(!this.state.activeModal)\n\t\t\tthis.setState({activeModal: modalComponent});\n\t}\n\n\t/**\n\t * Closes any currently-open modal.\n\t */\n\tcloseModal()\n\t{\n\t\tif(this.state.activeModal)\n\t\t\tthis.setState({activeModal: null});\n\t}\n\n\t/**\n\t * Opens a context menu if one is not already open.\n\t * Note: currently, only one context menu can be active at a time. This means context menus' items must not attempt to open a context menu on themselves.\n\t * @param e\n\t * @param menuComponent A React component of the context menu that is to be opened.\n\t */\n\topenContextMenu(e, menuComponent)\n\t{\n\t\tif(!this.state.activeContextMenu)\n\t\t\tthis.setState({activeContextMenu: menuComponent});\n\t}\n\n\t/**\n\t * Closes any currently-open context menu.\n\t */\n\tcloseContextMenu()\n\t{\n\t\tif(this.state.activeContextMenu)\n\t\t\tthis.setState({activeContextMenu: null});\n\t}\n\n\t/**\n\t * Adds a node to the specified collection in the state's collection array.\n\t * @param e SyntheticEvent\n\t * @param collectionIndex The index of the collection to which the new node will belong.\n\t * @param newNode The new node.\n\t */\n\taddNode(e, collectionIndex, newNode, newCollectionIndex = null)\n\t{\n\t\tconst collectionIndexActual = (newCollectionIndex !== null) ? newCollectionIndex : collectionIndex;\n\n\t\t// Validation (note: node data validation exists in the AddEditNodeModal)\n\t\tlet errorCollector = \"\";\n\t\tif(this.state.collections[collectionIndexActual].type === \"cognate\")\n\t\t{\n\t\t\t// Check for existing language\n\t\t\tfor(let i = 0; i < this.state.collections[collectionIndexActual].words.length; ++i)\n\t\t\t{\n\t\t\t\tconst childNode = this.state.collections[collectionIndexActual].words[i];\n\t\t\t\tif(childNode.language === newNode.language)\n\t\t\t\t{\n\t\t\t\t\terrorCollector += \"A language can only appear in a cognate collection once.\\n\" +\n\t\t\t\t\t\t\t\t\t  \"Additional cognate collections may contain a language used in another cognate collection.\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error message with toast\n\t\telse\n\t\t{\n\t\t\t// Insert new node\n\t\t\tconst newCollections = this.state.collections;\n\t\t\tnewNode.arrayIndex = newCollections[collectionIndexActual].words.length;\n\t\t\tnewCollections[collectionIndexActual].words.push(newNode);\n\n\t\t\tthis.setState({collections: newCollections}, function(){\n\t\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: newCollections, journeyCount: this.state.journeyCount}));\n\t\t\t\tthis.closeModal();\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Updates a node in the specified collection in the state's collections array with updated data.\n\t * @param e React SyntheticEvent\n\t * @param collectionIndex Index of collection to which the node belongs.\n\t * @param updatedNode The updated node to be set in the collections array.\n\t */\n\teditNode(e, collectionIndex, updatedNode, newCollectionIndex = null)\n\t{\n\t\tconst newCollections = this.state.collections;\n\t\tconsole.log(e);\n\t\tconsole.log(collectionIndex);\n\t\tconsole.log(updatedNode);\n\n\t\t// Find node\n\t\tconst node = newCollections[collectionIndex].words[updatedNode.arrayIndex];\n\n\t\t// Update node by reference\n\t\tfor(const index in updatedNode)\n\t\t\tif(node[index]) node[index] = updatedNode[index];\n\n\t\t// Additional operations if node was moved from one collection to another\n\t\tif(newCollectionIndex !== null)\n\t\t{\n\t\t\tnode.arrayIndex = newCollections[newCollectionIndex].words.length; // Update arrayIndex to reflect new collection\n\t\t\tnode.parents.splice(0, node.parents.length);                  // Clear parents\n\t\t\tnewCollections[newCollectionIndex].words.push(node);               // Add node to new collection\n\t\t\tthis.removeNode(e, collectionIndex, updatedNode.arrayIndex);       // Delete node from original collection\n\t\t}\n\n\t\tthis.setState({collections: newCollections}, () => {\n\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: newCollections, journeyCount: this.state.journeyCount}));\n\t\t\tthis.closeModal();\n\t\t});\n\t}\n\n\t/**\n\t * Removes a specified node from a specified collection in the state's collections array.\n\t * The user will be warned before deletion occurs (and will be notified of any existing parents, lest they have to add them all again).\n\t * @param e SyntheticEvent\n\t * @param collectionIndex Index of the collection to which the node belongs.\n\t * @param arrayIndex Index of the node inside the specified collection.\n\t */\n\tremoveNode(e, collectionIndex, arrayIndex)\n\t{\n\t\tconst newCollections = this.state.collections;\n\n\t\t// Find node\n\t\tconst node = newCollections[collectionIndex].words[arrayIndex];\n\t\tlet confirmed = false;\n\t\tif(node.parents.length > 0)\n\t\t\tconfirmed = window.confirm(\"Warning: this node is connected to \"+node.parents.length+\" parent nodes. The nodes will be unaffected by the deletion/move. Do you still wish to delete/move?\");\n\t\telse\n\t\t\tconfirmed = window.confirm(\"Are you sure you wish to delete/move this node?\");\n\n\t\tif(confirmed)\n\t\t{\n\t\t\tnewCollections[collectionIndex].words.splice(arrayIndex, 1); // Delete node\n\n\t\t\tfor(let i = 0; i < newCollections[collectionIndex].words.length; ++i)\n\t\t\t{\n\t\t\t\tconst word = newCollections[collectionIndex].words[i];\n\t\t\t\tif(word.arrayIndex > arrayIndex) word.arrayIndex = word.arrayIndex-1; // Shift down after splice\n\n\t\t\t\t// Delete node in parents array of others (as splice() does not delete by reference)\n\t\t\t\tfor(let j = 0; j < word.parents.length; ++j)\n\t\t\t\t{\n\t\t\t\t\tif(word.parents[j].id === node.id)\n\t\t\t\t\t{\n\t\t\t\t\t\talert(\"Found a parent! Get ready to splice!\")\n\t\t\t\t\t\tword.parents.splice(j, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({collections: newCollections}, function(){\n\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: newCollections, journeyCount: this.state.journeyCount}));\n\t\t\tthis.closeModal();\n\t\t});\n\t}\n\n\t/**\n\t * Adds a new collection to the state's collection array.\n\t * @param e SyntheticEvent\n\t * @param data An object containing the data required to build the new collection (collection object).\n\t */\n\taddCollection(e, data)\n\t{\n\t\tconst newCollections = this.state.collections;\n\t\tlet newJourneyCount = this.state.journeyCount;\n\n\t\t// Only one cognate allowed, for now // TODO\n\t\tif(data.type === \"cognate\" && newCollections.find(e => e.type === \"cognate\") !== undefined)\n\t\t\talert(\"Support for multiple cognate collections coming soon!\");\n\t\telse\n\t\t{\n\t\t\tif(data.type === \"journey\")\n\t\t\t\tnewJourneyCount += 1;\n\t\t\tnewCollections.push({type: data.type, header: data.header, words: []});\n\t\t\tthis.setState( {collections: newCollections, journeyCount: newJourneyCount}, function(){\n\t\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: newCollections, journeyCount: this.state.journeyCount}));\n\t\t\t\tthis.closeModal();\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Updates an existing collection in the state's collection array with updated data.\n\t * @param e SyntheticEvent\n\t * @param data An object containing the data required to update the existing collection (collection object, collection index).\n\t */\n\teditCollection(e, data)\n\t{\n\t\tconst newCollections = this.state.collections;\n\t\tnewCollections[data.index].type = data.type;\n\t\tnewCollections[data.index].header = data.header;\n\n\t\tthis.setState({collections: newCollections}, function(){\n\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: newCollections, journeyCount: this.state.journeyCount}));\n\t\t\tthis.closeModal();\n\t\t});\n\t}\n\n\t/**\n\t * Removes the specified collection from the state's collection array.\n\t * @param e SyntheticEvent\n\t * @param collectionIndex Index of the collection to be removed.\n\t */\n\tremoveCollection(e, collectionIndex)\n\t{\n\t\tconst newCollections = this.state.collections;\n\t\tlet newJourneyCount = this.state.journeyCount;\n\t\tif(newCollections[collectionIndex].type === \"journey\")\n\t\t\tnewJourneyCount = this.state.journeyCount-1;\n\n\t\tnewCollections.splice(collectionIndex, 1); // Remove the collection\n\n\t\tthis.setState({collections: newCollections, journeyCount: newJourneyCount}, function(){\n\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: newCollections, journeyCount: this.state.journeyCount}));\n\t\t});\n\t}\n\n\t/**\n\t * Serialises the map to JSON then saves it in the manner specified.\n\t * @param data User-specified data about the map (such as the title).\n\t */\n\tsaveMap(e, data)\n\t{\n\t\tconst username = this.state.activeUser.username;\n\t\tconst activeMapID = (this.state.activeMap) ? this.state.activeMap.mapID : null;\n\t\tconst isNewMap = data.isNewMap;\n\t\tconsole.log(data);\n\t\tconsole.log(this.state.activeMap);\n\n\t\t// Attach map data\n\t\tdata.mapData = {collections: this.state.collections, journeyCount: this.state.journeyCount};\n\n\t\tif(data.saveMode === \"Save to profile\")\n\t\t{\n\t\t\t// Send to server\n\t\t\tif(activeMapID === null || isNewMap)\n\t\t\t{\n\t\t\t\t// Insert new map\n\t\t\t\taxios.put(`maps/${username}`, {data: data}).then((response) =>\n\t\t\t\t{\n\t\t\t\t\tif(this.handleResponse(response, \"Map inserted.\", \"Map saved!\"))\n\t\t\t\t\t\tthis.setState({activeMap: response.data.map}); // Set new map data returned by server\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Update map\n\t\t\t\taxios.put(`maps/${username}/${activeMapID}`, {data: data}).then((response) => {\n\t\t\t\t\tif(this.handleResponse(response, \"Map data updated.\", \"Map saved!\"))\n\t\t\t\t\t\tthis.setState({activeMap: response.data.map}); // Set new map data returned by server\n\t\t\t\t});\n\t\t\t}\n\n\t\t}\n\t\telse if(data.saveMode === \"Export to JSON file\")\n\t\t{\n\t\t\t// TODO: Exporting to JSON file\n\t\t}\n\t}\n\n\t/**\n\t * Loads the map using data returned by the server.\n\t * @param e SyntheticEvent\n\t * @param map The map object to be loaded.\n\t */\n\tloadMap(e, map)\n\t{\n\t\tthis.setState({\n\t\t\tactiveMap: map,\n\t\t\tcollections: map.mapData.collections,\n\t\t\tjourneyCount: map.mapData.journeyCount\n\t\t}, function(){\n\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: map.mapData.collections, journeyCount: map.mapData.journeyCount}));\n\t\t\tthis.closeModal();\n\t\t});\n\t}\n\n\tdeleteMap(e, mapID)\n\t{\n\t\tconst username = this.state.activeUser.username;\n\t\taxios.delete(`maps/${username}/${mapID}`).then((response) => {\n\t\t\tthis.handleResponse(response, \"Map deleted.\", null);\n\t\t});\n\t}\n\n\t/**\n\t * Handles responses from axios calls\n\t * @param response Response returned by axios call\n\t * @param successMessage Success message expected from server\n\t * @param successAlert Success message to display to user\n\t * @returns {boolean} If the response was a success\n\t */\n\thandleResponse(response, successMessage, successAlert, closeModal = true)\n\t{\n\t\tconsole.log(response);\n\t\tif(response.data.type === \"error\")\n\t\t{\n\t\t\tconsole.error(response.data.message);\n\t\t\talert(response.data.message);\n\t\t}\n\t\telse if(response.data.type === \"success\")\n\t\t{\n\t\t\tconsole.log(response.data);\n\t\t\tif(response.data.message === successMessage)\n\t\t\t{\n\t\t\t\tif(successAlert) alert(successAlert);\n\t\t\t\tif(closeModal) this.closeModal();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\trender()\n\t{\n\t\t// Render any active modals and context menus\n\t\tlet modalContainer = null, contextMenuContainer = null;\n\t\tif(this.state.activeModal !== null)\n\t\t{\n\t\t\tconst activeModal = this.state.activeModal;\n\t\t\tmodalContainer =\n\t\t\t\t<div className={\"modal-container\"} onClick={(e) =>{\n\t\t\t\t\tif(e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n\t\t\t\t}}>\n\t\t\t\t\t{activeModal}\n\t\t\t\t</div>;\n\t\t}\n\t\tif(this.state.activeContextMenu !== null)\n\t\t{\n\t\t\tconst activeContextMenu = this.state.activeContextMenu;\n\t\t\tcontextMenuContainer =\n\t\t\t\t<div className={\"context-menu-container\"} onClick={this.closeContextMenu}>{activeContextMenu}</div>;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"Lema\">\n\t\t\t\t<Banner activeUser={this.state.activeUser} openModal={this.openModal} activeMap={this.state.activeMap}\n\t\t\t\t        authenticateUser={this.authenticateUser} registerUser={this.registerUser} logoutUser={this.logoutUser}\n\t\t\t\t        saveMap={this.saveMap} loadMap={this.loadMap} deleteMap={this.deleteMap} />\n\t\t\t\t<div className={\"main-view-container\"}>\n\t\t\t\t\t<LeftBar collections={this.state.collections}\n\t\t\t\t\t         openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t         openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t         addNode={this.addNode} editNode={this.editNode} removeNode={this.removeNode}\n\t\t\t\t\t         addCollection={this.addCollection} editCollection={this.editCollection} removeCollection={this.removeCollection}\n\t\t\t\t\t         addJourneyFromDatabase={this.addJourneyFromDatabase}\n\t\t\t\t\t/>\n\t\t\t\t\t<Map collections={this.state.collections}\n\t\t\t\t\t     openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t     openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t\t addNode={this.addNode} editNode={this.editNode} removeNode={this.removeNode}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{modalContainer}\n\t\t\t\t{contextMenuContainer}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Lema;\n"]},"metadata":{},"sourceType":"module"}