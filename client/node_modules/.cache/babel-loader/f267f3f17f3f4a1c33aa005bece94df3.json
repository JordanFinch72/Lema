{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { useD3 } from \"../hooks/useD3\";\nimport languageCountries from \"../languageCountries.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Map(props) {\n  _s();\n\n  const items = props.items;\n\n  let topojson = require(\"topojson\");\n\n  let world = require(\"../data/world.json\");\n\n  let foo = [{\n    \"name\": \"Netherlands\",\n    \"continent\": \"Europe\"\n  }, {\n    \"name\": \"England\",\n    \"continent\": \"Europe\"\n  }, {\n    \"name\": \"Germany\",\n    \"continent\": \"Europe\"\n  }, {\n    \"name\": \"France\",\n    \"continent\": \"Europe\"\n  }];\n  /* Example of using d3-geo in useEffect() instead of custom useD3() */\n  // Note: Still needs clean-up function to stop re-renders\n  // Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\n\n  useEffect(() => {\n    let svg = d3.selectAll(\".map-container\").selectAll(\"svg\"); // Condense data\n    // TODO: Sort this out beforehand so it doesn't have to compute it every time\n\n    let countries = world.features.reduce((countries2, feature) => {\n      // flatten multipolygons into polygons\n      if (feature.geometry.type === \"Polygon\") {\n        countries2.push(feature);\n      } else {\n        // MultiPolygon\n        feature.geometry.coordinates.forEach(coordinates => {\n          countries2.push({\n            type: \"Feature\",\n            properties: feature.properties,\n            geometry: {\n              type: \"Polygon\",\n              coordinates\n            }\n          });\n        });\n      }\n\n      return countries2;\n    }, []); // Create path (passed as svg attribute later to draw the countries)\n    // TODO: Have it auto-scale as window is dragged\n\n    const width = svg._groups[0][0].clientWidth;\n    const height = svg._groups[0][0].clientHeight;\n    const projection = d3.geoConicConformal().center([8, 52.823]) // Middle of Europe(ish)\n    .scale(1360).translate([width / 2, height / 2]);\n    const path = d3.geoPath().projection(projection); // Draw countries, bind data and handlers\n\n    svg.append(\"g\").selectAll(\"path\") // svg->g->path\n    .data(countries) // svg->g->path\n    .enter() // svg->g->path (create new nodes per data)\n    .append(\"path\") // svg->g->path (create new nodes per data)\n    .attr(\"fill\", d => determineFillColour(d)).on(\"click\", function (e, d) {\n      alert(\"Hello, \" + d.properties.name + \"!\");\n    }).on(\"mouseover\", function (e, d, i) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"white\") // White can't become transparent\n        element.attr(\"fill\", \"rgb(230,230,230)\");else element.attr(\"fill-opacity\", \"0.65\");\n    }).on(\"mouseout\", function (e, d) {\n      let element = d3.select(this);\n      console.log(element.attr(\"fill\"));\n      if (element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\n        element.attr(\"fill\", \"white\");else element.attr(\"fill-opacity\", \"0.65\");\n    }).attr(\"stroke\", \"black\").attr(\"stroke-linejoin\", \"round\").attr(\"d\", path); // Graticules (lines on the map)\n\n    const g = svg.append(\"g\");\n    const graticules = g.classed(\"graticules\", true).append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(0,0,0,.2)\").attr(\"d\", path(d3.geoGraticule()()));\n    /*\r\n    svg.call(d3.zoom().on(\"zoom\", function () {\r\n    \tz = d3.event.transform.k;\r\n    \tdraw(); // TODO: Contain above render code into draw() function\r\n    }));\r\n     */\n  });\n  /**\r\n   *\r\n   * @param d Data attached to DOM element via D3\r\n   * @returns {string} The fill colour, as chosen by user\r\n   */\n\n  function determineFillColour(d) {\n    // TODO: Determine fill colour by node colour data\n    //  - Need a language->country mapping\n    //  - Find node language, get corresponding country, if this d's name is country then change to node colour\n    let countryName = d.properties.name;\n    let fillColour = \"white\";\n\n    for (let collection in items) {\n      if (items.hasOwnProperty(collection)) {\n        collection = items[collection];\n\n        if (collection.type === \"cognate\") // Only search for cognates, as journeys aren't filled (at the moment)\n          {\n            for (let childNode in collection.childNodes) {\n              if (collection.childNodes.hasOwnProperty(childNode)) {\n                childNode = collection.childNodes[childNode];\n                if (languageCountries[childNode.language] === countryName) fillColour = childNode.colour;\n              }\n            }\n          }\n      }\n    }\n\n    return fillColour;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      /*ref={ref}*/\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        margin: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Map, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Map.jsx"],"names":["React","useEffect","useState","d3","useD3","languageCountries","Map","props","items","topojson","require","world","foo","svg","selectAll","countries","features","reduce","countries2","feature","geometry","type","push","coordinates","forEach","properties","width","_groups","clientWidth","height","clientHeight","projection","geoConicConformal","center","scale","translate","path","geoPath","append","data","enter","attr","d","determineFillColour","on","e","alert","name","i","element","select","console","log","g","graticules","classed","geoGraticule","countryName","fillColour","collection","hasOwnProperty","childNode","childNodes","language","colour","margin"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {useD3} from \"../hooks/useD3\";\r\nimport languageCountries from \"../languageCountries.json\";\r\n\r\nexport function Map(props)\r\n{\r\n\tconst items = props.items;\r\n\tlet topojson = require(\"topojson\");\r\n\tlet world = require(\"../data/world.json\");\r\n\r\n\tlet foo = [{\"name\": \"Netherlands\", \"continent\": \"Europe\"}, {\"name\": \"England\", \"continent\": \"Europe\"},\r\n\t\t{\"name\": \"Germany\", \"continent\": \"Europe\"}, {\"name\": \"France\", \"continent\": \"Europe\"}];\r\n\r\n\t/* Example of using d3-geo in useEffect() instead of custom useD3() */\r\n\t// Note: Still needs clean-up function to stop re-renders\r\n\t// Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\r\n\tuseEffect(() => {\r\n\t\tlet svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\r\n\r\n\t\t// Condense data\r\n\t\t// TODO: Sort this out beforehand so it doesn't have to compute it every time\r\n\t\tlet countries = world.features\r\n\t\t\t.reduce((countries2, feature) =>\r\n\t\t\t{\r\n\t\t\t\t// flatten multipolygons into polygons\r\n\t\t\t\tif(feature.geometry.type === \"Polygon\")\r\n\t\t\t\t{\r\n\t\t\t\t\tcountries2.push(feature);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{ // MultiPolygon\r\n\t\t\t\t\tfeature.geometry.coordinates.forEach(coordinates =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcountries2.push({\r\n\t\t\t\t\t\t\ttype: \"Feature\",\r\n\t\t\t\t\t\t\tproperties: feature.properties,\r\n\t\t\t\t\t\t\tgeometry: {type: \"Polygon\", coordinates}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn countries2;\r\n\t\t\t}, []);\r\n\r\n\t\t// Create path (passed as svg attribute later to draw the countries)\r\n\t\t// TODO: Have it auto-scale as window is dragged\r\n\t\tconst width = svg._groups[0][0].clientWidth;\r\n\t\tconst height = svg._groups[0][0].clientHeight;\r\n\t\tconst projection = d3.geoConicConformal()\r\n\t\t\t.center([8, 52.823]) // Middle of Europe(ish)\r\n\t\t\t.scale(1360)\r\n\t\t\t.translate([width/2, height/2]);\r\n\t\tconst path = d3.geoPath().projection(projection);\r\n\r\n\t\t// Draw countries, bind data and handlers\r\n\t\tsvg.append(\"g\")\r\n\t\t\t.selectAll(\"path\") // svg->g->path\r\n\t\t\t.data(countries)             // svg->g->path\r\n\t\t\t.enter()                 // svg->g->path (create new nodes per data)\r\n\t\t\t.append(\"path\")          // svg->g->path (create new nodes per data)\r\n\t\t\t.attr(\"fill\", (d) => determineFillColour(d))\r\n\t\t\t.on(\"click\", function(e, d){\r\n\t\t\t\talert(\"Hello, \" + d.properties.name + \"!\");\r\n\t\t\t})\r\n\t\t\t.on(\"mouseover\", function(e, d, i){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"white\") // White can't become transparent\r\n\t\t\t\t\telement.attr(\"fill\", \"rgb(230,230,230)\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"0.65\");\r\n\t\t\t})\r\n\t\t\t.on(\"mouseout\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tconsole.log(element.attr(\"fill\"));\r\n\t\t\t\tif(element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\r\n\t\t\t\t\telement.attr(\"fill\", \"white\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"0.65\");\r\n\t\t\t})\r\n\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t.attr(\"stroke-linejoin\", \"round\")\r\n\t\t\t.attr(\"d\", path);\r\n\r\n\t\t// Graticules (lines on the map)\r\n\t\tconst g = svg.append(\"g\");\r\n\t\tconst graticules = g.classed(\"graticules\", true)\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\")\r\n\t\t\t.attr(\"d\", path(d3.geoGraticule()()));\r\n\r\n\t\t/*\r\n\t\tsvg.call(d3.zoom().on(\"zoom\", function () {\r\n\t\t\tz = d3.event.transform.k;\r\n\t\t\tdraw(); // TODO: Contain above render code into draw() function\r\n\t\t}));\r\n\t\t */\r\n\r\n\t});\r\n\r\n\t/**\r\n\t *\r\n\t * @param d Data attached to DOM element via D3\r\n\t * @returns {string} The fill colour, as chosen by user\r\n\t */\r\n\tfunction determineFillColour(d)\r\n\t{\r\n\t\t// TODO: Determine fill colour by node colour data\r\n\t\t//  - Need a language->country mapping\r\n\t\t//  - Find node language, get corresponding country, if this d's name is country then change to node colour\r\n\r\n\t\tlet countryName = d.properties.name;\r\n\t\tlet fillColour = \"white\";\r\n\r\n\t\tfor(let collection in items)\r\n\t\t{\r\n\t\t\tif(items.hasOwnProperty(collection))\r\n\t\t\t{\r\n\t\t\t\tcollection = items[collection];\r\n\t\t\t\tif(collection.type === \"cognate\") // Only search for cognates, as journeys aren't filled (at the moment)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let childNode in collection.childNodes)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(collection.childNodes.hasOwnProperty(childNode))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tchildNode = collection.childNodes[childNode];\r\n\t\t\t\t\t\t\tif(languageCountries[childNode.language] === countryName)\r\n\t\t\t\t\t\t\t\tfillColour = childNode.colour;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn fillColour;\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div className={\"map-container\"}>\r\n\t\t\t<svg\r\n\t\t\t\t/*ref={ref}*/\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmargin: 0\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}