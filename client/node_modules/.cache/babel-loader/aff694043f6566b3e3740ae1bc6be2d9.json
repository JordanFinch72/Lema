{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\AddEditNodeModal.jsx\";\nimport { Component } from \"react\";\nimport { Textbox } from \"./Textbox\";\nimport { Button } from \"./Button\";\nimport { RadioGroup } from \"./RadioGroup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class AddEditNodeModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Node properties\n      word: this.props.node.word || null,\n      colour: this.props.node.colour || null,\n      labelType: this.props.node.label !== undefined ? this.props.node.label.type || null : null,\n      customText: this.props.node.label !== undefined ? this.props.node.label.customText || null : null,\n      // Note: Text can be \"\"\n      fontColour: this.props.node.label !== undefined ? this.props.node.label.fontColour || null : null,\n      // Optional or can be overridden\n      language: typeof this.props.language === \"object\" ? this.props.language[0] : this.props.language,\n      collection: this.props.collectionList !== undefined ? `${this.props.collectionList[0].type[0].toUpperCase() + this.props.collectionList[0].type.substring(1)}: ${this.props.collectionList[0].header.word}` : null\n    };\n    this.onNodeSubmit = this.props.onNodeSubmit.bind(this);\n    this.onFieldChange = this.onFieldChange.bind(this);\n    this.onLabelRadioClick = this.onLabelRadioClick.bind(this);\n  }\n\n  onFieldChange(event) {\n    const target = event.target;\n    const name = target.name;\n    let value = target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  onLabelRadioClick(e, data) {\n    // Update parent LeftBar component's state\n    let labelType;\n    if (data.id === 0) labelType = \"language\";else if (data.id === 1) labelType = \"country\";else if (data.id === 2) labelType = \"word\";else if (data.id === 3) labelType = \"customText\";\n    this.setState({\n      labelType: labelType\n    });\n  }\n\n  validation() {\n    // TODO: Validate form data\n    return true;\n  }\n\n  render() {\n    // Languages is a textbox if none or one language is supplied, or a drop-down menu if some are supplied\n    let languageInput;\n\n    if (typeof this.props.language === \"object\") {\n      let options = [];\n\n      for (let i = 0; i < this.props.language.length; ++i) {\n        options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n          children: this.props.language[i]\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 18\n        }, this));\n      }\n\n      languageInput = /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"language\",\n        value: this.state.language,\n        onChange: this.onFieldChange,\n        children: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 20\n      }, this);\n    } else {\n      languageInput = /*#__PURE__*/_jsxDEV(Textbox, {\n        hint: \"e.g. \\\"English (GB)\\\"\",\n        name: \"language\",\n        value: this.state.language,\n        onFieldChange: this.onFieldChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 20\n      }, this);\n    } // If no collectionIndex is supplied, allow them to select one from the list\n\n\n    let selectCollection;\n\n    if (!this.props.collectionIndex === undefined) {\n      let options = [];\n      let i = 0;\n\n      for (i; i < this.props.collectionList.length; ++i) {\n        let collection = this.props.collectionList[i];\n        let string = `${collection.type[0].toUpperCase() + collection.type.substring(1)}: ${this.props.collectionList[i].header.word}`;\n        options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n          children: string\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 18\n        }, this));\n      }\n\n      selectCollection = [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Collection\"\n      }, 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"collection\",\n        value: this.state.collection,\n        onChange: this.onFieldChange,\n        children: options\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this)];\n    } // Label components (if appropriate)\n\n\n    let labelControls = [];\n\n    if (this.props.node.label) {\n      // RadioGroup buttons\n      const buttons = [{\n        active: false,\n        label: \"Node language\"\n      }, {\n        active: false,\n        label: \"Node country/region\"\n      }, {\n        active: false,\n        label: \"Word\"\n      }, {\n        active: false,\n        label: \"Custom label:\"\n      }];\n      let labelTypeIndex;\n      if (this.state.labelType === \"language\") labelTypeIndex = 0;else if (this.state.labelType === \"country\") labelTypeIndex = 1;else if (this.state.labelType === \"word\") labelTypeIndex = 2;else if (this.state.labelType === \"customText\") labelTypeIndex = 3;\n      buttons[labelTypeIndex].active = true;\n      labelControls = [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Label\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label-controls-container\",\n        children: [\",\", /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n          buttons: buttons,\n          name: \"custom-label\",\n          onButtonClick: this.onLabelRadioClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Textbox, {\n          hint: \"Custom label text...\",\n          name: \"customText\",\n          value: this.state.customText,\n          onFieldChange: this.onFieldChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"label-colour-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Font colour: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"textbox\",\n            name: \"fontColour\",\n            value: this.state.fontColour,\n            onChange: this.onFieldChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"color\",\n            defaultValue: this.state.fontColour,\n            value: this.state.fontColour,\n            onChange: e => {\n              this.setState({\n                fontColour: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }, this)];\n    } // Parents\n\n\n    let parentList = [];\n\n    if (this.props.node.parents) {\n      // Gather current parents\n      for (let i = 0; i < this.props.node.parents.length; ++i) {\n        let parent = this.props.node.parents[i];\n        parentList.push( /*#__PURE__*/_jsxDEV(\"span\", {\n          children: parent.word + \" (\" + parent.language + \")\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this));\n      }\n    }\n\n    for (let i = 0; i < this.props.words.length; ++i) {\n      // List all potential new parents\n      let word = this.props.words[i];\n\n      if (!this.props.node.parents.includes(word)) // TODO: Test this works\n        {}\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Textbox, {\n        hint: \"e.g. \\\"Horse\\\"...\",\n        name: \"word\",\n        value: this.state.word,\n        onFieldChange: this.onFieldChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Language\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 5\n      }, this), languageInput, /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Node Colour\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-colour-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"textbox\",\n          name: \"colour\",\n          value: this.state.colour,\n          onChange: this.onFieldChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          defaultValue: this.state.colour,\n          value: this.state.colour,\n          onChange: e => {\n            this.setState({\n              colour: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Parents\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 5\n      }, this), parentList, labelControls, selectCollection, /*#__PURE__*/_jsxDEV(Button, {\n        value: \"Submit\",\n        id: \"add-node-modal-submit\",\n        onClick: e => {\n          if (this.validation()) {\n            // Build node structure to match collection type\n            let updatedNode;\n\n            if (this.props.type === \"journey\") {\n              updatedNode = {\n                word: this.state.word,\n                language: this.state.language,\n                colour: this.state.colour,\n                vertex: { ...this.props.node.vertex,\n                  fontColour: this.state.fontColour\n                }\n              };\n            } else if (this.props.type === \"cognate\") {\n              updatedNode = {\n                word: this.state.word,\n                language: this.state.language,\n                colour: this.state.colour,\n                label: { ...this.props.node.label,\n                  type: this.state.labelType,\n                  customText: this.state.customText,\n                  fontColour: this.state.fontColour,\n                  fontSize: this.state.fontSize\n                }\n              };\n            }\n\n            this.props.onNodeSubmit(e, this.props.collectionIndex, this.props.indexChain, updatedNode);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/AddEditNodeModal.jsx"],"names":["Component","Textbox","Button","RadioGroup","AddEditNodeModal","constructor","props","state","word","node","colour","labelType","label","undefined","type","customText","fontColour","language","collection","collectionList","toUpperCase","substring","header","onNodeSubmit","bind","onFieldChange","onLabelRadioClick","event","target","name","value","setState","e","data","id","validation","render","languageInput","options","i","length","push","selectCollection","collectionIndex","string","labelControls","buttons","active","labelTypeIndex","parentList","parents","parent","words","includes","updatedNode","vertex","fontSize","indexChain"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\r\nimport {Textbox} from \"./Textbox\";\r\nimport {Button} from \"./Button\";\r\nimport {RadioGroup} from \"./RadioGroup\";\r\n\r\nexport class AddEditNodeModal extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\t// Node properties\r\n\t\t\tword: this.props.node.word || null,\r\n\t\t\tcolour: this.props.node.colour || null,\r\n\t\t\tlabelType: (this.props.node.label !== undefined) ? this.props.node.label.type || null : null,\r\n\t\t\tcustomText: (this.props.node.label !== undefined) ? this.props.node.label.customText || null : null, // Note: Text can be \"\"\r\n\t\t\tfontColour: (this.props.node.label !== undefined) ? this.props.node.label.fontColour || null : null,\r\n\r\n\t\t\t// Optional or can be overridden\r\n\t\t\tlanguage: (typeof this.props.language === \"object\") ? this.props.language[0] : this.props.language,\r\n\t\t\tcollection: (this.props.collectionList !== undefined)\r\n\t\t\t\t? (`${this.props.collectionList[0].type[0].toUpperCase() + this.props.collectionList[0].type.substring(1)}: ${this.props.collectionList[0].header.word}`) : null,\r\n\t\t};\r\n\r\n\t\tthis.onNodeSubmit = this.props.onNodeSubmit.bind(this);\r\n\t\tthis.onFieldChange = this.onFieldChange.bind(this);\r\n\t\tthis.onLabelRadioClick = this.onLabelRadioClick.bind(this);\r\n\t}\r\n\r\n\tonFieldChange(event)\r\n\t{\r\n\t\tconst target = event.target;\r\n\t\tconst name = target.name;\r\n\t\tlet value = target.value;\r\n\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t}\r\n\r\n\tonLabelRadioClick(e, data)\r\n\t{\r\n\t\t// Update parent LeftBar component's state\r\n\t\tlet labelType;\r\n\t\tif(data.id === 0) labelType = \"language\";\r\n\t\telse if(data.id === 1) labelType = \"country\";\r\n\t\telse if(data.id === 2) labelType = \"word\";\r\n\t\telse if(data.id === 3) labelType = \"customText\";\r\n\r\n\t\tthis.setState({labelType: labelType});\r\n\t}\r\n\tvalidation()\r\n\t{\r\n\t\t// TODO: Validate form data\r\n\t\treturn true;\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\t// Languages is a textbox if none or one language is supplied, or a drop-down menu if some are supplied\r\n\t\tlet languageInput;\r\n\t\tif(typeof this.props.language === \"object\")\r\n\t\t{\r\n\t\t\tlet options = [];\r\n\t\t\tfor(let i = 0; i < this.props.language.length; ++i)\r\n\t\t\t{\r\n\t\t\t\toptions.push(<option key={i}>{this.props.language[i]}</option>);\r\n\t\t\t}\r\n\t\t\tlanguageInput = <select name={\"language\"} value={this.state.language} onChange={this.onFieldChange}>\r\n\t\t\t\t{options}\r\n\t\t\t</select>\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlanguageInput = <Textbox hint={\"e.g. \\\"English (GB)\\\"\"} name={\"language\"} value={this.state.language} onFieldChange={this.onFieldChange} />\r\n\t\t}\r\n\r\n\t\t// If no collectionIndex is supplied, allow them to select one from the list\r\n\t\tlet selectCollection;\r\n\t\tif(!this.props.collectionIndex === undefined)\r\n\t\t{\r\n\t\t\tlet options = [];\r\n\r\n\t\t\tlet i = 0;\r\n\t\t\tfor(i; i < this.props.collectionList.length; ++i)\r\n\t\t\t{\r\n\t\t\t\tlet collection = this.props.collectionList[i];\r\n\t\t\t\tlet string = `${collection.type[0].toUpperCase() + collection.type.substring(1)}: ${this.props.collectionList[i].header.word}`;\r\n\t\t\t\toptions.push(<option key={i}>{string}</option>);\r\n\t\t\t}\r\n\t\t\tselectCollection = [\r\n\t\t\t\t<h3 key={0}>Collection</h3>,\r\n\t\t\t\t<select key={1} name={\"collection\"} value={this.state.collection} onChange={this.onFieldChange}>\r\n\t\t\t\t\t{options}\r\n\t\t\t\t</select>\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\t// Label components (if appropriate)\r\n\t\tlet labelControls = [];\r\n\t\tif(this.props.node.label)\r\n\t\t{\r\n\t\t\t// RadioGroup buttons\r\n\t\t\tconst buttons = [{active: false, label: \"Node language\"}, {active: false, label: \"Node country/region\"}, {active: false, label: \"Word\"}, {active: false, label: \"Custom label:\"}];\r\n\t\t\tlet labelTypeIndex;\r\n\t\t\tif(this.state.labelType === \"language\")\r\n\t\t\t\tlabelTypeIndex = 0;\r\n\t\t\telse if(this.state.labelType === \"country\")\r\n\t\t\t\tlabelTypeIndex = 1;\r\n\t\t\telse if(this.state.labelType === \"word\")\r\n\t\t\t\tlabelTypeIndex = 2;\r\n\t\t\telse if(this.state.labelType === \"customText\")\r\n\t\t\t\tlabelTypeIndex = 3;\r\n\t\t\tbuttons[labelTypeIndex].active = true;\r\n\r\n\t\t\tlabelControls = [\r\n\t\t\t\t<h3>Label</h3>,\r\n\t\t\t\t<div className={\"label-controls-container\"}>,\r\n\t\t\t\t\t<h4>Text:</h4>\r\n\t\t\t\t\t<RadioGroup buttons={buttons} name={\"custom-label\"} onButtonClick={this.onLabelRadioClick} />\r\n\t\t\t\t\t<Textbox hint={\"Custom label text...\"} name={\"customText\"} value={this.state.customText} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t<div className={\"label-colour-container\"}>\r\n\t\t\t\t\t\t<h4>Font colour: </h4>\r\n\t\t\t\t\t\t<input type={\"textbox\"} name={\"fontColour\"} value={this.state.fontColour} onChange={this.onFieldChange} />\r\n\t\t\t\t\t\t<input type={\"color\"} defaultValue={this.state.fontColour} value={this.state.fontColour} onChange={(e) => {\r\n\t\t\t\t\t\t\tthis.setState({fontColour: e.target.value});\r\n\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t]\r\n\t\t}\r\n\r\n\t\t// Parents\r\n\t\tlet parentList = [];\r\n\t\tif(this.props.node.parents)\r\n\t\t{\r\n\t\t\t// Gather current parents\r\n\t\t\tfor(let i = 0; i < this.props.node.parents.length; ++i)\r\n\t\t\t{\r\n\t\t\t\tlet parent = this.props.node.parents[i];\r\n\t\t\t\tparentList.push(<span>{parent.word + \" (\" + parent.language + \")\"}</span>);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(let i = 0; i < this.props.words.length; ++i)\r\n\t\t{\r\n\t\t\t// List all potential new parents\r\n\t\t\tlet word = this.props.words[i];\r\n\t\t\tif(!this.props.node.parents.includes(word)) // TODO: Test this works\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className={\"modal\"}>\r\n\t\t\t\t<h3>Word</h3>\r\n\t\t\t\t<Textbox hint={\"e.g. \\\"Horse\\\"...\"} name={\"word\"} value={this.state.word} onFieldChange={this.onFieldChange}/>\r\n\t\t\t\t<h3>Language</h3>\r\n\t\t\t\t{languageInput}\r\n\t\t\t\t<h3>Node Colour</h3>\r\n\t\t\t\t<div className={\"node-colour-container\"}>\r\n\t\t\t\t\t<input type={\"textbox\"} name={\"colour\"} value={this.state.colour} onChange={this.onFieldChange} />\r\n\t\t\t\t\t<input type={\"color\"} defaultValue={this.state.colour} value={this.state.colour} onChange={(e) => {\r\n\t\t\t\t\t\tthis.setState({colour: e.target.value});\r\n\t\t\t\t\t}}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<h3>Parents</h3>\r\n\t\t\t\t{parentList}\r\n\t\t\t\t{labelControls}\r\n\t\t\t\t{selectCollection}\r\n\t\t\t\t<Button value={\"Submit\"} id={\"add-node-modal-submit\"} onClick={(e) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.validation())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Build node structure to match collection type\r\n\t\t\t\t\t\tlet updatedNode;\r\n\t\t\t\t\t\tif(this.props.type === \"journey\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tupdatedNode = {\r\n\t\t\t\t\t\t\t\tword: this.state.word, language: this.state.language, colour: this.state.colour,\r\n\t\t\t\t\t\t\t\tvertex: {\r\n\t\t\t\t\t\t\t\t\t...this.props.node.vertex,\r\n\t\t\t\t\t\t\t\t\tfontColour: this.state.fontColour\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(this.props.type === \"cognate\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tupdatedNode = {\r\n\t\t\t\t\t\t\t\tword: this.state.word, language: this.state.language, colour: this.state.colour,\r\n\t\t\t\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\t\t\t\t...this.props.node.label,\r\n\t\t\t\t\t\t\t\t\ttype: this.state.labelType, customText: this.state.customText, fontColour: this.state.fontColour, fontSize: this.state.fontSize\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.props.onNodeSubmit(e, this.props.collectionIndex, this.props.indexChain, updatedNode);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}