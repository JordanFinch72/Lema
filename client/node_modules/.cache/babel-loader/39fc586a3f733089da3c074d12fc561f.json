{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\client\\\\src\\\\components\\\\modals\\\\LoadModal.jsx\";\nimport { Component } from \"react\";\nimport { Textbox } from \"../controls/Textbox\";\nimport { Button } from \"../controls/Button\";\nimport { LabeledControl } from \"../controls/LabeledControl\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MapItem extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: this.props.mapData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        value: \"LOAD\",\n        onClick: e => {\n          const userConfirmed = confirm(\"This will overwrite your current map.\\nYou should save your map before you load another one.\\n\\nWould you like to continue?\");\n          if (userConfirmed) this.props.handler(e, this.props.mapData);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport class LoadModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loadedMaps: [],\n      loadedFileName: null\n    };\n    this.onFieldChange = this.onFieldChange.bind(this);\n  }\n\n  componentDidMount() {\n    // Fetch maps belonging to this user\n    const username = this.props.activeUser.username;\n    axios.get(`maps/${username}/0`).then(response => {\n      console.log(response);\n\n      if (response.data.type === \"error\") {\n        console.error(response.data.message);\n        alert(response.data.message);\n      } else if (response.data.type === \"success\") {\n        console.log(response.data);\n\n        if (response.data.message === \"User's maps retrieved.\") {\n          this.setState({\n            loadedMaps: response.data.maps\n          });\n        }\n      }\n    });\n  }\n\n  onFieldChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n  /**\r\n   * Validates file upload.\r\n   * @returns {boolean}\r\n   */\n\n\n  validate() {\n    /*let errorCollector = \"\";\r\n    \t\t if(errorCollector !== \"\")\r\n     {\r\n     alert(errorCollector);\r\n     return false;\r\n     }\r\n     else return true;*/\n  }\n\n  render() {\n    const mapItems = [];\n    this.state.loadedMaps.forEach(m => mapItems.push( /*#__PURE__*/_jsxDEV(MapItem, {\n      mapData: m\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 54\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left load\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Load Map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-data\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section\",\n              children: mapItems\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            value: \"Load from file...\",\n            onClick: e => {\n              /*if(this.validate())\r\n              {\r\n              \tthis.props.handler(e, this.state);\r\n              }*/\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Textbox, {\n            name: \"loadedFileName\",\n            value: this.state.loadedFileName,\n            hint: \"Accepted: .json\",\n            onFieldChange: this.onFieldChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/client/src/components/modals/LoadModal.jsx"],"names":["Component","Textbox","Button","LabeledControl","axios","MapItem","constructor","props","render","mapData","title","e","userConfirmed","confirm","handler","LoadModal","state","loadedMaps","loadedFileName","onFieldChange","bind","componentDidMount","username","activeUser","get","then","response","console","log","data","type","error","message","alert","setState","maps","event","target","name","value","checked","validate","mapItems","forEach","m","push"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\r\nimport {Textbox} from \"../controls/Textbox\";\r\nimport {Button} from \"../controls/Button\";\r\nimport {LabeledControl} from \"../controls/LabeledControl\";\r\nimport axios from \"axios\";\r\n\r\nclass MapItem extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\treturn(\r\n\t\t\t<div className={\"map-item\"}>\r\n\t\t\t\t{/* Flex-row */}\r\n\t\t\t\t<div className={\"title\"}>{this.props.mapData.title}</div>\r\n\t\t\t\t<Button value={\"LOAD\"} onClick={(e) => {\r\n\t\t\t\t\tconst userConfirmed = confirm(\"This will overwrite your current map.\\nYou should save your map before you load another one.\\n\\nWould you like to continue?\");\r\n\r\n\t\t\t\t\tif(userConfirmed)\r\n\t\t\t\t\t\tthis.props.handler(e, this.props.mapData);\r\n\t\t\t\t}} />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport class LoadModal extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tloadedMaps: [],\r\n\t\t\tloadedFileName: null\r\n\t\t};\r\n\r\n\t\tthis.onFieldChange = this.onFieldChange.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\t// Fetch maps belonging to this user\r\n\t\tconst username = this.props.activeUser.username;\r\n\t\taxios.get(`maps/${username}/0`).then((response) =>\r\n\t\t{\r\n\t\t\tconsole.log(response);\r\n\t\t\tif(response.data.type === \"error\")\r\n\t\t\t{\r\n\t\t\t\tconsole.error(response.data.message);\r\n\t\t\t\talert(response.data.message);\r\n\t\t\t}\r\n\t\t\telse if(response.data.type === \"success\")\r\n\t\t\t{\r\n\t\t\t\tconsole.log(response.data);\r\n\t\t\t\tif(response.data.message === \"User's maps retrieved.\")\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.setState({loadedMaps: response.data.maps})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tonFieldChange(event)\r\n\t{\r\n\t\tconst target = event.target;\r\n\t\tconst name = target.name;\r\n\t\tconst value = (target.type === \"checkbox\") ? target.checked : target.value;\r\n\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates file upload.\r\n\t * @returns {boolean}\r\n\t */\r\n\tvalidate()\r\n\t{\r\n\t\t/*let errorCollector = \"\";\r\n\r\n\t\t if(errorCollector !== \"\")\r\n\t\t {\r\n\t\t alert(errorCollector);\r\n\t\t return false;\r\n\t\t }\r\n\t\t else return true;*/\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst mapItems = [];\r\n\t\tthis.state.loadedMaps.forEach((m) => mapItems.push(<MapItem mapData={m} />));\r\n\r\n\t\treturn (\r\n\t\t\t<div className={\"modal\"}>\r\n\t\t\t\t<div className={\"top\"}>\r\n\t\t\t\t\t<div className={\"left load\"}>\r\n\t\t\t\t\t\t<h2>Load Map</h2>\r\n\t\t\t\t\t\t<div className={\"map-data\"}>\r\n\t\t\t\t\t\t\t<div className={\"section\"}>\r\n\t\t\t\t\t\t\t\t{mapItems}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"bottom\"}>\r\n\t\t\t\t\t<div className={\"left\"}>\r\n\t\t\t\t\t\t<Button value={\"Load from file...\"} onClick={(e) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t/*if(this.validate())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.props.handler(e, this.state);\r\n\t\t\t\t\t\t\t}*/\r\n\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t\t<Textbox name={\"loadedFileName\"} value={this.state.loadedFileName} hint={\"Accepted: .json\"} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}