{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { useD3 } from \"../hooks/useD3\";\nimport world from \"../data/world.json\";\nimport languageCountries from \"../languageCountries.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Map(props) {\n  _s();\n\n  const items = props.items;\n  let ref = useD3(svg => {\n    let width = svg._groups[0][0].clientWidth;\n    let height = svg._groups[0][0].clientHeight;\n    let areas = world.features.reduce((countries2, feature) => {\n      // flatten multipolygons into polygons\n      if (feature.geometry.type === \"Polygon\") {\n        countries2.push(feature);\n      } else {\n        // MultiPolygon\n        feature.geometry.coordinates.forEach(coordinates => {\n          countries2.push({\n            type: \"Feature\",\n            properties: feature.properties,\n            geometry: {\n              type: \"Polygon\",\n              coordinates\n            }\n          });\n        });\n      }\n\n      return countries2;\n    }, []); // TODO: Adjust dimensions so it displays better; have it auto-scale as window is dragged\n\n    const W = width;\n    const H = W * height / width;\n    const g = svg.append(\"g\");\n    const g_countries = g.append(\"g\");\n    const graticules = g.append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(0,0,0,.2)\");\n    let x = 0;\n    let z = 1.7;\n\n    function draw() {\n      const projection = d3.geoConicConformal().parallels([40, 68]).rotate([-10 + x / z / 15, 0]).center([8 - 10, 53.823]).scale(900 * z).translate([W / 2, H / 2]);\n      const path = d3.geoPath().projection(projection);\n      const countries = svg.append(\"g\").append(\"g\").selectAll(\"path\").data(areas);\n      countries.exit().remove();\n      console.log(countries);\n      countries.enter().append(\"path\").attr(\"fill\", function (d) {\n        // TODO: Determine fill colour by node colour data\n        //  - Need a language->country mapping\n        //  - Find node language, get corresponding country, if this d's name is country then change to node colour\n        let countryName = d.properties.name;\n        let fillColour = \"white\";\n\n        for (let collection in items) {\n          if (items.hasOwnProperty(collection)) {\n            collection = items[collection];\n\n            if (collection.type === \"cognate\") {\n              for (let childNode in collection.childNodes) {\n                if (collection.childNodes.hasOwnProperty(childNode)) {\n                  childNode = collection.childNodes[childNode];\n                  if (languageCountries[childNode.language] === countryName) fillColour = childNode.colour;\n                }\n              }\n            }\n          }\n        }\n\n        return fillColour;\n      }).attr(\"stroke\", \"black\").attr(\"stroke-linejoin\", \"round\").merge(countries).attr(\"d\", path);\n      graticules.attr(\"d\", path(d3.geoGraticule().step([20, 20])()));\n    }\n    /*\r\n     svg.call(d3.zoom().on(\"zoom\", function () {\r\n     z = d3.event.transform.k;\r\n     draw();\r\n     }));\r\n     */\n\n\n    draw();\n    return svg.node();\n  }, [props.mapRenderCounter]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: ref,\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        margin: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Map, \"r127xTdrGuIqcYXTmMbvPxoKAyo=\", false, function () {\n  return [useD3];\n});\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Map.jsx"],"names":["React","useState","d3","useD3","world","languageCountries","Map","props","items","ref","svg","width","_groups","clientWidth","height","clientHeight","areas","features","reduce","countries2","feature","geometry","type","push","coordinates","forEach","properties","W","H","g","append","g_countries","graticules","attr","x","z","draw","projection","geoConicConformal","parallels","rotate","center","scale","translate","path","geoPath","countries","selectAll","data","exit","remove","console","log","enter","d","countryName","name","fillColour","collection","hasOwnProperty","childNode","childNodes","language","colour","merge","geoGraticule","step","node","mapRenderCounter","margin"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {useD3} from \"../hooks/useD3\";\r\nimport world from \"../data/world.json\";\r\nimport languageCountries from \"../languageCountries.json\";\r\n\r\nexport function Map(props)\r\n{\r\n\tconst items = props.items;\r\n\r\n\tlet ref = useD3(\r\n\t\t(svg) =>\r\n\t\t{\r\n\t\t\tlet width = svg._groups[0][0].clientWidth;\r\n\t\t\tlet height = svg._groups[0][0].clientHeight;\r\n\r\n\t\t\tlet areas = world.features\r\n\t\t\t\t.reduce((countries2, feature) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// flatten multipolygons into polygons\r\n\t\t\t\t\tif(feature.geometry.type === \"Polygon\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcountries2.push(feature);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{ // MultiPolygon\r\n\t\t\t\t\t\tfeature.geometry.coordinates.forEach(coordinates =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcountries2.push({\r\n\t\t\t\t\t\t\t\ttype: \"Feature\",\r\n\t\t\t\t\t\t\t\tproperties: feature.properties,\r\n\t\t\t\t\t\t\t\tgeometry: {type: \"Polygon\", coordinates}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn countries2;\r\n\t\t\t\t}, []);\r\n\r\n\t\t\t// TODO: Adjust dimensions so it displays better; have it auto-scale as window is dragged\r\n\t\t\tconst W = width;\r\n\t\t\tconst H = W * height / width;\r\n\t\t\tconst g = svg.append(\"g\");\r\n\t\t\tconst g_countries = g.append(\"g\");\r\n\r\n\t\t\tconst graticules = g.append(\"path\")\r\n\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\");\r\n\r\n\t\t\tlet x = 0;\r\n\t\t\tlet z = 1.7;\r\n\r\n\t\t\tfunction draw()\r\n\t\t\t{\r\n\t\t\t\tconst projection = d3.geoConicConformal()\r\n\t\t\t\t\t.parallels([40, 68])\r\n\t\t\t\t\t.rotate([-10 + x / z / 15, 0])\r\n\t\t\t\t\t.center([8 - 10, 53.823])\r\n\t\t\t\t\t.scale(900 * z)\r\n\t\t\t\t\t.translate([W / 2, H / 2]);\r\n\r\n\t\t\t\tconst path = d3.geoPath().projection(projection);\r\n\t\t\t\tconst countries = svg.append(\"g\").append(\"g\").selectAll(\"path\").data(areas);\r\n\t\t\t\tcountries.exit().remove();\r\n\t\t\t\tconsole.log(countries);\r\n\t\t\t\tcountries\r\n\t\t\t\t\t.enter().append(\"path\")\r\n\t\t\t\t\t.attr(\"fill\", function(d){\r\n\t\t\t\t\t\t// TODO: Determine fill colour by node colour data\r\n\t\t\t\t\t\t//  - Need a language->country mapping\r\n\t\t\t\t\t\t//  - Find node language, get corresponding country, if this d's name is country then change to node colour\r\n\r\n\t\t\t\t\t\tlet countryName = d.properties.name;\r\n\t\t\t\t\t\tlet fillColour = \"white\";\r\n\r\n\t\t\t\t\t\tfor(let collection in items)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(items.hasOwnProperty(collection))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcollection = items[collection];\r\n\t\t\t\t\t\t\t\tif(collection.type === \"cognate\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let childNode in collection.childNodes)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(collection.childNodes.hasOwnProperty(childNode))\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tchildNode = collection.childNodes[childNode];\r\n\t\t\t\t\t\t\t\t\t\t\tif(languageCountries[childNode.language] === countryName)\r\n\t\t\t\t\t\t\t\t\t\t\t\tfillColour = childNode.colour;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn fillColour;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t\t\t.attr(\"stroke-linejoin\", \"round\")\r\n\t\t\t\t\t.merge(countries)\r\n\t\t\t\t\t.attr(\"d\", path);\r\n\r\n\t\t\t\tgraticules.attr(\"d\", path(d3.geoGraticule().step([20, 20])()));\r\n\t\t\t}\r\n\r\n\r\n\t\t\t/*\r\n\t\t\t svg.call(d3.zoom().on(\"zoom\", function () {\r\n\t\t\t z = d3.event.transform.k;\r\n\t\t\t draw();\r\n\t\t\t }));\r\n\t\t\t */\r\n\r\n\t\t\tdraw();\r\n\r\n\t\t\treturn svg.node();\r\n\r\n\t\t},\r\n\t\t[props.mapRenderCounter]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className={\"map-container\"}>\r\n\t\t\t<svg\r\n\t\t\t\tref={ref}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmargin: 0\r\n\t\t\t\t}}>\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}