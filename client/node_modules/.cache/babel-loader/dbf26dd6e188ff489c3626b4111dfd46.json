{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { useD3 } from \"../hooks/useD3\";\nimport languageCountries from \"../supportedLanguages.json\";\nimport countries_data from \"../data/countries/countries.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Map(props) {\n  _s();\n\n  // Prop functions\n  const openContextMenu = props.openContextMenu.bind(this);\n  const closeContextMenu = props.closeContextMenu.bind(this);\n  const items = props.items;\n\n  let topojson = require(\"topojson\");\n\n  let countries_data = require(\"../data/countries/countries.json\");\n  /* Example of using d3-geo in useEffect() instead of custom useD3() */\n  // Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\n\n\n  useEffect(() => {\n    let svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\n    let countries = countries_data.features; // Create path (passed as svg attribute later to draw the countries)\n    // TODO: Have it auto-scale as window is dragged\n\n    const width = svg._groups[0][0].clientWidth;\n    const height = svg._groups[0][0].clientHeight;\n    const projection = d3.geoConicConformal().center([8, 52.823]) // Middle of Europe(ish)\n    .scale(1360).translate([width / 2, height / 2]);\n    const path = d3.geoPath().projection(projection); // Draw countries, bind data and handlers\n\n    svg.append(\"g\").selectAll(\"path\") // svg->g->path\n    .data(countries) // svg->g->path\n    .enter() // svg->g->path (create new nodes per data)\n    .append(\"path\") // svg->g->path (create new nodes per data)\n    .attr(\"fill\", d => determineFillColour(d)).on(\"click\", function (e, d) {\n      // TODO: Functions (dragging nodes; etc.)\n      alert(\"Hello, \" + d.properties.name + \"! You speak \" + d.properties.languages + \"!\");\n    }).on(\"contextmenu\", function (e, d) {\n      // TODO: Functions (context menu items)\n      let meatballItems = [{\n        text: \"Add sibling node\",\n        handler: e => {\n          this.cAddNode(e, this.props.index);\n        }\n      }, {\n        text: \"Edit node\",\n        handler: e => {\n          this.cAddNodeDefault(e, this.props.index);\n        }\n      }, {\n        text: \"Remove node\",\n        handler: e => {\n          this.cRemoveCollection(e, this.props.index);\n        }\n      }];\n      openContextMenu();\n    }).on(\"mouseover\", function (e, d) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"white\") // White can't become transparent\n        element.attr(\"fill\", \"rgb(230,230,230)\");else element.attr(\"fill-opacity\", \"0.65\");\n    }).on(\"mouseout\", function (e, d) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\n        element.attr(\"fill\", \"white\");else element.attr(\"fill-opacity\", \"1\");\n    }).attr(\"stroke\", \"black\").attr(\"stroke-linejoin\", \"round\").attr(\"d\", path); // Graticules (lines on the map)\n\n    const g = svg.append(\"g\");\n    const graticules = g.classed(\"graticules\", true).append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(0,0,0,.2)\").attr(\"d\", path(d3.geoGraticule()()));\n    /*\r\n    svg.call(d3.zoom().on(\"zoom\", function () {\r\n    \tz = d3.event.transform.k;\r\n    \tdraw(); // TODO: Contain above render code into draw() function\r\n    }));\r\n     */\n    // Clean-up function (kills all SVG elements upon unmounting)\n\n    return function cleanup() {\n      svg.selectAll(\"g\").remove();\n    };\n  });\n  /**\r\n   * Determines country SVG fill colour according to countries' language(s) and the specified colour of that language's cognate node(s)\r\n   * @param d Data attached to DOM element via D3 (i.e. the country)\r\n   * @returns {string} The fill colour, as specified by user in Collection.jsx\r\n   */\n\n  function determineFillColour(d) {\n    let countryLanguages = d.properties.languages || [];\n    let fillColour = \"\"; // Search collections\n\n    for (let collection in items) {\n      if (items.hasOwnProperty(collection)) {\n        collection = items[collection]; // Search for cognates only\n\n        if (collection.type === \"cognate\") {\n          // Search for cognates' nodes\n          for (let childNode in collection.childNodes) {\n            if (collection.childNodes.hasOwnProperty(childNode)) {\n              childNode = collection.childNodes[childNode]; // Search for first instance of node's language in country passed into function\n\n              if (countryLanguages.includes(childNode.language)) {\n                fillColour = childNode.colour;\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      if (fillColour !== \"\") // Set colour only for first node of that language\n        break;\n    }\n\n    return fillColour === \"\" ? \"white\" : fillColour;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      /*ref={ref}*/\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        margin: 0,\n        backgroundColor: \"#3d73ab\"\n        /* The sea */\n\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Map, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Map.jsx"],"names":["React","useEffect","useState","d3","useD3","languageCountries","countries_data","Map","props","openContextMenu","bind","closeContextMenu","items","topojson","require","svg","selectAll","countries","features","width","_groups","clientWidth","height","clientHeight","projection","geoConicConformal","center","scale","translate","path","geoPath","append","data","enter","attr","d","determineFillColour","on","e","alert","properties","name","languages","meatballItems","text","handler","cAddNode","index","cAddNodeDefault","cRemoveCollection","element","select","g","graticules","classed","geoGraticule","cleanup","remove","countryLanguages","fillColour","collection","hasOwnProperty","type","childNode","childNodes","includes","language","colour","margin","backgroundColor"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {useD3} from \"../hooks/useD3\";\r\nimport languageCountries from \"../supportedLanguages.json\";\r\nimport countries_data from \"../data/countries/countries.json\";\r\n\r\nexport function Map(props)\r\n{\r\n\t// Prop functions\r\n\tconst openContextMenu = props.openContextMenu.bind(this);\r\n\tconst closeContextMenu = props.closeContextMenu.bind(this);\r\n\r\n\tconst items = props.items;\r\n\tlet topojson = require(\"topojson\");\r\n\tlet countries_data = require(\"../data/countries/countries.json\");\r\n\r\n\t/* Example of using d3-geo in useEffect() instead of custom useD3() */\r\n\t// Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\r\n\tuseEffect(() => {\r\n\t\tlet svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\r\n\t\tlet countries = countries_data.features;\r\n\r\n\t\t// Create path (passed as svg attribute later to draw the countries)\r\n\t\t// TODO: Have it auto-scale as window is dragged\r\n\t\tconst width = svg._groups[0][0].clientWidth;\r\n\t\tconst height = svg._groups[0][0].clientHeight;\r\n\t\tconst projection = d3.geoConicConformal()\r\n\t\t\t.center([8, 52.823]) // Middle of Europe(ish)\r\n\t\t\t.scale(1360)\r\n\t\t\t.translate([width/2, height/2]);\r\n\t\tconst path = d3.geoPath().projection(projection);\r\n\r\n\t\t// Draw countries, bind data and handlers\r\n\t\tsvg.append(\"g\")\r\n\t\t\t.selectAll(\"path\") // svg->g->path\r\n\t\t\t.data(countries)         // svg->g->path\r\n\t\t\t.enter()                 // svg->g->path (create new nodes per data)\r\n\t\t\t.append(\"path\")          // svg->g->path (create new nodes per data)\r\n\t\t\t.attr(\"fill\", (d) => determineFillColour(d))\r\n\t\t\t.on(\"click\", function(e, d){\r\n\t\t\t\t// TODO: Functions (dragging nodes; etc.)\r\n\r\n\t\t\t\talert(\"Hello, \" + d.properties.name + \"! You speak \" + d.properties.languages + \"!\");\r\n\t\t\t})\r\n\t\t\t.on(\"contextmenu\", function(e, d){\r\n\t\t\t\t// TODO: Functions (context menu items)\r\n\t\t\t\tlet meatballItems = [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttext: \"Add sibling node\", handler: (e) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.cAddNode(e, this.props.index);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttext: \"Edit node\", handler: (e) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.cAddNodeDefault(e, this.props.index);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttext: \"Remove node\", handler: (e) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.cRemoveCollection(e, this.props.index);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t];\r\n\r\n\t\t\t\topenContextMenu()\r\n\t\t\t})\r\n\t\t\t.on(\"mouseover\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"white\") // White can't become transparent\r\n\t\t\t\t\telement.attr(\"fill\", \"rgb(230,230,230)\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"0.65\");\r\n\t\t\t})\r\n\t\t\t.on(\"mouseout\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\r\n\t\t\t\t\telement.attr(\"fill\", \"white\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"1\");\r\n\t\t\t})\r\n\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t.attr(\"stroke-linejoin\", \"round\")\r\n\t\t\t.attr(\"d\", path);\r\n\r\n\t\t// Graticules (lines on the map)\r\n\t\tconst g = svg.append(\"g\");\r\n\t\tconst graticules = g.classed(\"graticules\", true)\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\")\r\n\t\t\t.attr(\"d\", path(d3.geoGraticule()()));\r\n\r\n\t\t/*\r\n\t\tsvg.call(d3.zoom().on(\"zoom\", function () {\r\n\t\t\tz = d3.event.transform.k;\r\n\t\t\tdraw(); // TODO: Contain above render code into draw() function\r\n\t\t}));\r\n\t\t */\r\n\r\n\t\t// Clean-up function (kills all SVG elements upon unmounting)\r\n\t\treturn function cleanup()\r\n\t\t{\r\n\t\t\tsvg.selectAll(\"g\").remove();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\t/**\r\n\t * Determines country SVG fill colour according to countries' language(s) and the specified colour of that language's cognate node(s)\r\n\t * @param d Data attached to DOM element via D3 (i.e. the country)\r\n\t * @returns {string} The fill colour, as specified by user in Collection.jsx\r\n\t */\r\n\tfunction determineFillColour(d)\r\n\t{\r\n\t\tlet countryLanguages = d.properties.languages || [];\r\n\t\tlet fillColour = \"\";\r\n\r\n\t\t// Search collections\r\n\t\tfor(let collection in items)\r\n\t\t{\r\n\t\t\tif(items.hasOwnProperty(collection))\r\n\t\t\t{\r\n\t\t\t\tcollection = items[collection];\r\n\r\n\t\t\t\t// Search for cognates only\r\n\t\t\t\tif(collection.type === \"cognate\")\r\n\t\t\t\t{\r\n\t\t\t\t\t// Search for cognates' nodes\r\n\t\t\t\t\tfor(let childNode in collection.childNodes)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(collection.childNodes.hasOwnProperty(childNode))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tchildNode = collection.childNodes[childNode];\r\n\t\t\t\t\t\t\t// Search for first instance of node's language in country passed into function\r\n\t\t\t\t\t\t\tif(countryLanguages.includes(childNode.language))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfillColour = childNode.colour;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(fillColour !== \"\") // Set colour only for first node of that language\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn (fillColour === \"\") ? \"white\" : fillColour;\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div className={\"map-container\"}>\r\n\t\t\t<svg\r\n\t\t\t\t/*ref={ref}*/\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\tbackgroundColor: \"#3d73ab\" /* The sea */\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}