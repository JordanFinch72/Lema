{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\client\\\\src\\\\components\\\\ControlBox.jsx\";\nimport { Component } from \"react\";\nimport { Textbox } from \"./controls/Textbox\";\nimport { RadioGroup } from \"./controls/RadioGroup\";\nimport { Button } from \"./controls/Button\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class ControlBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mapMode: this.props.isShowcaseMode ? \"all\" : \"journey\",\n      // \"all\" || \"journey\" || \"cognate\"\n      searchBoxValue: \"\",\n      searchFilter: \"English\",\n      includeAffixes: false\n    };\n    this.onFieldChange = this.onFieldChange.bind(this);\n    this.onButtonClick = this.onButtonClick.bind(this);\n    this.onRadioButtonClick = this.onRadioButtonClick.bind(this);\n  }\n\n  onFieldChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  onButtonClick() {\n    if (this.props.isShowcaseMode) {// TODO: Search for shared maps\n    } else {\n      const word = this.state.searchBoxValue;\n      const language = this.state.searchFilter;\n\n      if (word !== \"\" && language !== \"\") {\n        if (this.state.mapMode === \"journey\") {\n          const getString = `https://api.etymologyexplorer.com/dev/get_trees?common_descendant_count=0&language=${language}&word=${word}`;\n          let edWords, edConnections, edAffixes;\n          axios.get(getString).then(response => {\n            console.log(response);\n            edWords = response.data[1].words;\n            edConnections = response.data[2];\n            edAffixes = this.state.includeAffixes ? null : response.data[1].affixes; // Only pass if user doesn't want affixes (to check against it)\n\n            this.props.addJourneyFromDatabase(edWords, edConnections, edAffixes);\n          }).catch(error => {\n            if (error.response.data['Error message'].indexOf(\"Could not get an ids\") !== -1) {\n              alert(\"Database error: word not found.\");\n            }\n          });\n        } else if (this.state.mapMode === \"cognate\") {// TODO: Find translations for the word in every country shown on the map. Colour code translations that share the same ancestry (are cognates)\n        }\n      }\n    }\n  }\n\n  onRadioButtonClick(e, data) {\n    // Update parent LeftBar component's state\n    let mode;\n    if (data.id === 0) mode = this.props.isShowcaseMode ? \"all\" : \"journey\";else if (data.id === 1) mode = this.props.isShowcaseMode ? \"journey\" : \"cognate\";else if (data.id === 2) mode = \"cognate\";\n    this.setState({\n      mapMode: mode\n    });\n  }\n\n  render() {\n    // Set up view\n    let buttons = [{\n      active: this.state.mapMode === \"journey\",\n      label: \"Historical journey\"\n    }, {\n      active: this.state.mapMode === \"cognate\",\n      label: \"Cognates\"\n    }];\n    let header = \"Etymology Search\";\n    let textboxHint = \"Enter a word...\"; // TODO: This should autocomplete based on the ED's supported languages\n\n    let languageSelect = /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"searchFilter\",\n      value: this.state.searchFilter,\n      onChange: this.onFieldChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Ancient Greek\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"English\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"French\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"German\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Latin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Portuguese\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Spanish\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 4\n    }, this);\n\n    let affixSpan = /*#__PURE__*/_jsxDEV(\"span\", {\n      title: \"Some words include affixes (e.g. -y) that have a considerable amount of etymological ancestors, potentially cluttering your map. \\n\\n\" + \"You may tick this checkbox to include them in the return data.\",\n      children: \"?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }, this);\n\n    let modeSpan = /*#__PURE__*/_jsxDEV(\"span\", {\n      title: \"Historical journey mode: A new Journey collection will be created and auto-populated with nodes according to the chronological journey of that word through time (usually starting in PIE).\\n\\n\" + \"Cognate mode: A new Cognate collection will be created and automatically populated with translations of the searched words, with all translations that are cognates filled with the same colour.\",\n      children: \"?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 18\n    }, this); // Adjust view for the Community Showcase\n\n\n    if (this.props.isShowcaseMode) {\n      buttons = [{\n        active: this.state.mapMode === \"all\",\n        label: \"All\"\n      }, {\n        active: this.state.mapMode === \"journey\",\n        label: \"Historical journey\"\n      }, {\n        active: this.state.mapMode === \"cognate\",\n        label: \"Cognates\"\n      }];\n      header = \"Community Showcase\";\n      textboxHint = \"Enter a term...\";\n      languageSelect = /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"searchFilter\",\n        value: this.state.searchFilter,\n        onChange: this.onFieldChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 5\n      }, this);\n      affixSpan = null;\n      modeSpan = null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: header\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-fields\",\n        children: [/*#__PURE__*/_jsxDEV(Textbox, {\n          hint: textboxHint,\n          name: \"searchBoxValue\",\n          value: this.state.searchBoxValue,\n          onFieldChange: this.onFieldChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 6\n        }, this), \" \", languageSelect]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"affixes-selection\",\n        children: [\"Include affixes:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"includeAffixes\",\n          checked: this.state.includeAffixes,\n          onChange: this.onFieldChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 6\n        }, this), affixSpan]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mode-selection\",\n        children: [/*#__PURE__*/_jsxDEV(RadioGroup, {\n          buttons: buttons,\n          name: \"map-mode\",\n          onRadioButtonClick: this.onRadioButtonClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 6\n        }, this), \" \", modeSpan, /*#__PURE__*/_jsxDEV(Button, {\n          value: \"Search\",\n          id: \"search\",\n          onClick: this.onButtonClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/client/src/components/ControlBox.jsx"],"names":["Component","Textbox","RadioGroup","Button","axios","ControlBox","constructor","props","state","mapMode","isShowcaseMode","searchBoxValue","searchFilter","includeAffixes","onFieldChange","bind","onButtonClick","onRadioButtonClick","event","target","name","value","type","checked","setState","word","language","getString","edWords","edConnections","edAffixes","get","then","response","console","log","data","words","affixes","addJourneyFromDatabase","catch","error","indexOf","alert","e","mode","id","render","buttons","active","label","header","textboxHint","languageSelect","affixSpan","modeSpan"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\r\nimport {Textbox} from \"./controls/Textbox\";\r\nimport {RadioGroup} from \"./controls/RadioGroup\";\r\nimport {Button} from \"./controls/Button\";\r\nimport axios from \"axios\";\r\n\r\nexport class ControlBox extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tmapMode: (this.props.isShowcaseMode) ? \"all\" : \"journey\", // \"all\" || \"journey\" || \"cognate\"\r\n\t\t\tsearchBoxValue: \"\",\r\n\t\t\tsearchFilter: \"English\",\r\n\t\t\tincludeAffixes: false\r\n\t\t};\r\n\r\n\t\tthis.onFieldChange = this.onFieldChange.bind(this);\r\n\t\tthis.onButtonClick = this.onButtonClick.bind(this);\r\n\t\tthis.onRadioButtonClick = this.onRadioButtonClick.bind(this);\r\n\t}\r\n\r\n\tonFieldChange(event)\r\n\t{\r\n\t\tconst target = event.target;\r\n\t\tconst name = target.name;\r\n\t\tconst value = (target.type === \"checkbox\") ? target.checked : target.value;\r\n\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t}\r\n\tonButtonClick()\r\n\t{\r\n\t\tif(this.props.isShowcaseMode)\r\n\t\t{\r\n\t\t\t// TODO: Search for shared maps\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst word = this.state.searchBoxValue;\r\n\t\t\tconst language =  this.state.searchFilter;\r\n\t\t\tif(word !== \"\" && language !== \"\")\r\n\t\t\t{\r\n\t\t\t\tif(this.state.mapMode === \"journey\")\r\n\t\t\t\t{\r\n\t\t\t\t\tconst getString = `https://api.etymologyexplorer.com/dev/get_trees?common_descendant_count=0&language=${language}&word=${word}`;\r\n\t\t\t\t\tlet edWords, edConnections, edAffixes;\r\n\r\n\t\t\t\t\taxios.get(getString)\r\n\t\t\t\t\t\t.then((response) => {\r\n\t\t\t\t\t\t\tconsole.log(response);\r\n\t\t\t\t\t\t\tedWords = response.data[1].words;\r\n\t\t\t\t\t\t\tedConnections = response.data[2];\r\n\t\t\t\t\t\t\tedAffixes = (this.state.includeAffixes) ? null : response.data[1].affixes; // Only pass if user doesn't want affixes (to check against it)\r\n\r\n\t\t\t\t\t\t\tthis.props.addJourneyFromDatabase(edWords, edConnections, edAffixes);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch((error) => {\r\n\t\t\t\t\t\t\tif(error.response.data['Error message'].indexOf(\"Could not get an ids\") !== -1)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\talert(\"Database error: word not found.\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse if(this.state.mapMode === \"cognate\")\r\n\t\t\t\t{\r\n\t\t\t\t\t// TODO: Find translations for the word in every country shown on the map. Colour code translations that share the same ancestry (are cognates)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tonRadioButtonClick(e, data)\r\n\t{\r\n\t\t// Update parent LeftBar component's state\r\n\t\tlet mode;\r\n\t\tif(data.id === 0) mode = (this.props.isShowcaseMode) ? \"all\" : \"journey\";\r\n\t\telse if(data.id === 1) mode = (this.props.isShowcaseMode ? \"journey\" : \"cognate\");\r\n\t\telse if(data.id === 2) mode = \"cognate\";\r\n\t\tthis.setState({mapMode: mode});\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\t// Set up view\r\n\t\tlet buttons = [\r\n\t\t\t{active: (this.state.mapMode === \"journey\"), label: \"Historical journey\"},\r\n\t\t\t{active: (this.state.mapMode === \"cognate\"), label: \"Cognates\"}\r\n\t\t];\r\n\t\tlet header = \"Etymology Search\";\r\n\t\tlet textboxHint = \"Enter a word...\";\r\n\t\t// TODO: This should autocomplete based on the ED's supported languages\r\n\t\tlet languageSelect =\r\n\t\t\t<select name=\"searchFilter\" value={this.state.searchFilter} onChange={this.onFieldChange}>\r\n\t\t\t\t<option>Ancient Greek</option>\r\n\t\t\t\t<option>English</option>\r\n\t\t\t\t<option>French</option>\r\n\t\t\t\t<option>German</option>\r\n\t\t\t\t<option>Latin</option>\r\n\t\t\t\t<option>Portuguese</option>\r\n\t\t\t\t<option>Spanish</option>\r\n\t\t\t</select>;\r\n\t\tlet affixSpan = <span title={\"Some words include affixes (e.g. -y) that have a considerable amount of etymological ancestors, potentially cluttering your map. \\n\\n\" +\r\n\t\t\t\"You may tick this checkbox to include them in the return data.\"}>?</span>;\r\n\t\tlet modeSpan = <span title={\"Historical journey mode: A new Journey collection will be created and auto-populated with nodes according to the chronological journey of that word through time (usually starting in PIE).\\n\\n\" +\r\n\t\t\t\"Cognate mode: A new Cognate collection will be created and automatically populated with translations of the searched words, with all translations that are cognates filled with the same colour.\"}>?</span>;\r\n\r\n\t\t// Adjust view for the Community Showcase\r\n\t\tif(this.props.isShowcaseMode)\r\n\t\t{\r\n\t\t\tbuttons = [\r\n\t\t\t\t{active: (this.state.mapMode === \"all\"), label: \"All\"},\r\n\t\t\t\t{active: (this.state.mapMode === \"journey\"), label: \"Historical journey\"},\r\n\t\t\t\t{active: (this.state.mapMode === \"cognate\"), label: \"Cognates\"}\r\n\t\t\t];\r\n\t\t\theader = \"Community Showcase\";\r\n\t\t\ttextboxHint = \"Enter a term...\";\r\n\t\t\tlanguageSelect =\r\n\t\t\t\t<select name=\"searchFilter\" value={this.state.searchFilter} onChange={this.onFieldChange}>\r\n\t\t\t\t\t<option>Title</option>\r\n\t\t\t\t\t<option>Description</option>\r\n\t\t\t\t</select>;\r\n\t\t\taffixSpan = null; modeSpan = null;\r\n\t\t}\r\n\r\n\t\treturn(\r\n\t\t\t<div className={\"search-container\"}>\r\n\t\t\t\t<h3>{header}</h3>\r\n\t\t\t\t<div className={\"search-fields\"}>\r\n\t\t\t\t\t<Textbox hint={textboxHint} name={\"searchBoxValue\"} value={this.state.searchBoxValue} onFieldChange={this.onFieldChange} /> {/* TODO: This should autocomplete based on the ED's words */}\r\n\t\t\t\t\t{languageSelect}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"affixes-selection\"}>\r\n\t\t\t\t\tInclude affixes:\r\n\t\t\t\t\t<input type={\"checkbox\"} name={\"includeAffixes\"} checked={this.state.includeAffixes} onChange={this.onFieldChange} />\r\n\t\t\t\t\t{affixSpan}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"mode-selection\"}>\r\n\t\t\t\t\t<RadioGroup buttons={buttons} name={\"map-mode\"} onRadioButtonClick={this.onRadioButtonClick} /> {modeSpan}\r\n\t\t\t\t\t<Button value={\"Search\"} id={\"search\"} onClick={this.onButtonClick} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}