{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\client\\\\src\\\\Lema.js\";\nimport \"./css/Lema.css\";\nimport { Component } from \"react\";\nimport axios from \"axios\";\nimport { useJwt } from \"react-jwt\";\nimport { Banner } from \"./components/Banner\";\nimport { LeftBar } from \"./components/LeftBar\";\nimport { Map } from \"./components/Map\";\nimport { ViewMapsModal } from \"./components/modals/ViewMapsModal\";\nimport { Toast } from \"./components/Toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst jwt = require(\"jsonwebtoken\");\n\nclass Lema extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeToast: null,\n      // Either null or a React component\n      activeModal: null,\n      // Either null or a React component\n      activeContextMenu: null,\n      // Either null or a React component\n      activeUser: null,\n      // Set upon user login\n      activeMap: null,\n      // Either null, set by load function, or set by save function once saved to profile\n      collections: [],\n      journeyCount: 0,\n      isShowcaseMode: false\n    };\n    this.toastTimeout = null;\n    this.defaultJourneyColours = [\"#ff0000\", \"#00ff00\", \"#0000ff\", \"#da35aa\", \"#ffcc00\"]; // TODO: Better colours\n\n    this.flattenTree = this.flattenTree.bind(this);\n    this.createToast = this.createToast.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.openContextMenu = this.openContextMenu.bind(this);\n    this.closeContextMenu = this.closeContextMenu.bind(this);\n    this.addCollection = this.addCollection.bind(this);\n    this.editCollection = this.editCollection.bind(this);\n    this.addJourneyFromDatabase = this.addJourneyFromDatabase.bind(this);\n    this.addNode = this.addNode.bind(this);\n    this.editNode = this.editNode.bind(this);\n    this.removeNode = this.removeNode.bind(this);\n    this.removeCollection = this.removeCollection.bind(this);\n    this.authenticateUser = this.authenticateUser.bind(this);\n    this.registerUser = this.registerUser.bind(this);\n    this.logoutUser = this.logoutUser.bind(this);\n    this.editProfile = this.editProfile.bind(this);\n    this.deleteProfile = this.deleteProfile.bind(this);\n    this.toggleShowcaseMode = this.toggleShowcaseMode.bind(this);\n    this.newMap = this.newMap.bind(this);\n    this.saveMap = this.saveMap.bind(this);\n    this.loadMap = this.loadMap.bind(this);\n    this.deleteMap = this.deleteMap.bind(this);\n  }\n  /**\n   * As part of React's lifecycle, this function is automatically called once the component is rendered (\"mounted\"),\n   * i.e. at page load/refresh (when the component is created).\n   */\n\n\n  componentDidMount() {\n    // Check if user is already logged in\n    const activeUser = JSON.parse(localStorage.getItem(\"LEMA_activeUser\"));\n    if (activeUser) this.setState({\n      activeUser: activeUser\n    }); // Check if user has been linked a map\n\n    const urlParts = window.location.href.split('/');\n\n    if (urlParts.includes(\"map\")) {\n      const userConfirmed = window.confirm(\"You are loading another person's map.\\nThis will overwrite your currently active map.\\n\\n\" + \"Do you wish to continue?\");\n\n      if (userConfirmed) {\n        const username = urlParts[4];\n        const mapID = urlParts[5];\n        axios.get(`/maps/${username}/${mapID}/0`).then(response => {\n          if (this.handleResponse(response, \"User's map retrieved.\", null)) {\n            this.loadMap(null, response.data.map, \"database\");\n          }\n        });\n      }\n    } else {\n      // Check for activeMap data (mapID, title, description, isShared)\n      const activeMap = JSON.parse(localStorage.getItem(\"LEMA_activeMap\"));\n      if (activeMap) this.setState({\n        activeMap: activeMap\n      }); // Check if there are active collections (DISTINCT FROM activeMap!)\n\n      const activeCollections = JSON.parse(localStorage.getItem(\"LEMA_activeCollections\"));\n      if (activeCollections) this.setState({\n        collections: activeCollections.collections,\n        journeyCount: activeCollections.journeyCount\n      }, function () {\n        /* Repair parent links: memory references are lost when serialising to and from JSON string */\n\n        /* Justification for O(n^4): this callback function only runs once when user refreshes/re-enters the page;\n        and the arrays involved will never be large enough for it to be an issue. Future solution: autosave to PouchDB. */\n        for (let i = 0; i < this.state.collections.length; ++i) // Loop through collections\n        {\n          const collection = this.state.collections[i];\n\n          for (let j = 0; j < collection.words.length; ++j) // Loop through words\n          {\n            const word = collection.words[j];\n\n            for (let n = 0; n < word.parents.length; ++n) // Loop through parents\n            {\n              const parent = word.parents[n];\n\n              for (let x = 0; x < collection.words.length; ++x) // Loop through words again\n              {\n                const parentWord = collection.words[x];\n                if (parent.id === parentWord.id) word.parents[n] = parentWord;\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sends log in data to server to authenticate user.\n   * @param e SyntheticEvent\n   * @param data Login data\n   */\n\n\n  authenticateUser(e, data) {\n    // Check the user\n    const username = data.loginUsername;\n    const password = data.loginPassword;\n    const rememberMe = data.rememberMe;\n    axios.get(`/users/${username}/${password}`).then(response => {\n      if (this.handleResponse(response, \"User found.\", \"Login successful!\")) {\n        const decodedToken = jwt.decode(response.data.jwt, {});\n        const activeUser = {\n          username: decodedToken.username,\n          displayName: decodedToken.displayName,\n          jwt: response.data.jwt\n        };\n        this.setState({\n          activeUser: activeUser\n        }, () => {\n          if (rememberMe) localStorage.setItem(\"LEMA_activeUser\", JSON.stringify(activeUser)); // TODO: Refresh token 1 minute before decodedToken.exp time\n        });\n      }\n    });\n  }\n  /**\n   * Sends register data to server to create a new user profile.\n   * @param e SyntheticEvent\n   * @param data Registration data\n   */\n\n\n  registerUser(e, data) {\n    // Register the user\n    const {\n      displayName,\n      username,\n      password,\n      email\n    } = data;\n    axios.put(`/users/${displayName}/${username}/${password}/${email}`).then(response => {\n      this.handleResponse(response, \"User created.\", \"Profile created! You may now log in.\");\n    });\n  }\n  /**\n   * Logs the user out of the app.\n   * @param e SyntheticEvent\n   * @param forceLogout Whether the logout should be forced (when called by internal functions)\n   */\n\n\n  logoutUser(e) {\n    let forceLogout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let userConfirmed = false;\n    if (!forceLogout) userConfirmed = window.confirm(\"Are you sure you wish to log out? This will clear your active map data.\");\n\n    if (userConfirmed || forceLogout) {\n      localStorage.removeItem(\"LEMA_activeUser\");\n      localStorage.removeItem(\"LEMA_activeMap\");\n      localStorage.removeItem(\"LEMA_activeCollections\");\n      this.setState({\n        activeUser: null,\n        activeMap: null,\n        collections: [],\n        journeyCount: 0\n      });\n    }\n  }\n  /**\n   * A recursive function that flattens the nested data structure returned from the etymological database into an\n   * array of word nodes.\n   * @param wordArray Flat array of words (initially empty)\n   * @param edWords Object of words returned by the etymological database\n   * @param edStructure Original data structure returned by the etymological database\n   * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n   * @param wordID The ID of the word currently being operated on in the recursive function\n   * @returns {array} The wordArray object, which has nodes pushed to it throughout the function\n   */\n\n\n  flattenTree(wordArray, edWords, edStructure, wordID) {\n    let edAffixes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let parents = [],\n        wordNode = {}; // Parents\n\n    if (Object.keys(edStructure).length > 0) {\n      // Loop through parents\n      for (const wordID in edStructure) {\n        if (edAffixes !== null && !edAffixes.includes(Number(wordID)) || edAffixes == null) {\n          parents.push(wordID);\n          wordArray = this.flattenTree(wordArray, edWords, edStructure[wordID], wordID, edAffixes);\n        }\n      }\n    } // Retrieve word from ED and convert to Lema-compatible object\n\n\n    if (wordID !== null) {\n      wordNode = edWords[wordID];\n      wordNode = {\n        id: Number(wordID),\n        arrayIndex: wordArray.length,\n        word: wordNode.word,\n        language: wordNode.language_name,\n        parents: [],\n        vertex: {\n          type: \"word\",\n          customText: \"\",\n          fontColour: \"#000000\",\n          strokeColour: \"#000000\",\n          fillColour: this.defaultJourneyColours[this.state.journeyCount],\n          radius: null,\n          fontSize: null,\n          x: null,\n          y: null,\n          edgeStart: \"centre\",\n          edgeEnd: \"centre\",\n          edgeStrokeColour: \"#000000\",\n          edgeStrokeWidth: \"2px\",\n          edgeArrowheadEnabled: true,\n          edgeArrowheadStrokeColour: \"#000000\",\n          edgeArrowheadFillColour: \"#000000\"\n        }\n      };\n\n      for (let i = 0; i < parents.length; ++i) {\n        const parentID = Number(parents[i]);\n        const parent = wordArray.find(_ref => {\n          let {\n            id\n          } = _ref;\n          return id === parentID;\n        });\n\n        if (edAffixes !== null && !edAffixes.includes(parentID) || edAffixes === null) {\n          wordNode.parents.push(parent);\n        }\n      }\n\n      wordArray.push(wordNode);\n    }\n\n    return wordArray;\n  }\n  /**\n   * Creates a journey collection from words returned by the etymological database and automatically adds them to the existing journey collections array\n   * @param edWords Object of words returned by the etymological database\n   * @param edStructure Original data structure returned by the etymological database\n   * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n   */\n\n\n  addJourneyFromDatabase(edWords, edStructure) {\n    let edAffixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const newCollections = this.state.collections,\n          newJourneyCount = this.state.journeyCount; // Flatten the data structure\n\n    let journeyWords = [];\n    journeyWords = this.flattenTree(journeyWords, edWords, edStructure, null, edAffixes); // Create the new journey and add it to collections\n\n    const newJourney = {\n      type: \"journey\",\n      header: {\n        word: journeyWords[journeyWords.length - 1].word,\n        language: journeyWords[journeyWords.length - 1].language\n      },\n      words: journeyWords\n    };\n    newCollections.push(newJourney);\n    this.setState({\n      collections: newCollections,\n      journeyCount: newJourneyCount + 1\n    }, function () {\n      localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n        collections: newCollections,\n        journeyCount: this.state.journeyCount\n      }));\n    });\n  }\n  /**\n   * Creates a\n   * @param e SyntheticEvent\n   * @param contents HTML contents to be displayed in the toast.\n   * @param time Time in ms to keep the toast open\n   * @param type What type of alert the toast is showing: neutral, error, or success\n   */\n\n\n  createToast(e, contents) {\n    let time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5000;\n    let type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"neutral\";\n\n    const toast = /*#__PURE__*/_jsxDEV(Toast, {\n      type: type,\n      children: contents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 4\n    }, this);\n\n    this.setState({\n      activeToast: toast\n    }, function () {\n      window.clearTimeout(this.toastTimeout);\n      this.toastTimeout = window.setTimeout(() => {\n        this.setState({\n          activeToast: null\n        });\n      }, time);\n    });\n  }\n  /**\n   * Opens a modal if one is not already open.\n   * @param e SyntheticEvent\n   * @param modalComponent React component of the modal that is to be opened.\n   * @param forceClose Whether to close active modals first.\n   */\n\n\n  openModal(e, modalComponent) {\n    let forceClose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!this.state.activeModal || forceClose) this.setState({\n      activeModal: modalComponent\n    });\n  }\n  /**\n   * Closes any currently-open modal.\n   */\n\n\n  closeModal() {\n    if (this.state.activeModal) this.setState({\n      activeModal: null\n    });\n  }\n  /**\n   * Opens a context menu if one is not already open.\n   * Note: currently, only one context menu can be active at a time. This means context menus' items must not attempt to open a context menu on themselves.\n   * @param e\n   * @param menuComponent A React component of the context menu that is to be opened.\n   */\n\n\n  openContextMenu(e, menuComponent) {\n    if (!this.state.activeContextMenu) this.setState({\n      activeContextMenu: menuComponent\n    });\n  }\n  /**\n   * Closes any currently-open context menu.\n   */\n\n\n  closeContextMenu() {\n    if (this.state.activeContextMenu) this.setState({\n      activeContextMenu: null\n    });\n  }\n  /**\n   * Toggles showcase mode.\n   * @param toggle Optional parameter to force showcase to switch to either true or false.\n   */\n\n\n  toggleShowcaseMode(e) {\n    let toggle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const isShowcaseMode = toggle !== null ? toggle : !this.state.isShowcaseMode;\n    this.setState({\n      isShowcaseMode: isShowcaseMode\n    });\n  }\n  /**\n   * Adds a node to the specified collection in the state's collection array.\n   * @param e SyntheticEvent\n   * @param collectionIndex The index of the collection to which the new node will belong.\n   * @param newNode The new node.\n   * @param newCollectionIndex Optional parameter to set the node to a new/different collection.\n   */\n\n\n  addNode(e, collectionIndex, newNode) {\n    let newCollectionIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    const collectionIndexActual = newCollectionIndex !== null ? newCollectionIndex : collectionIndex; // Validation (note: node data validation exists in the AddEditNodeModal)\n\n    let errorCollector = \"\";\n\n    if (this.state.collections[collectionIndexActual].type === \"cognate\") {\n      // Check for existing language\n      for (let i = 0; i < this.state.collections[collectionIndexActual].words.length; ++i) {\n        const childNode = this.state.collections[collectionIndexActual].words[i];\n\n        if (childNode.language === newNode.language) {\n          errorCollector += \"A language can only appear in a cognate collection once.\\n\" + \"Additional cognate collections may contain a language used in another cognate collection.\";\n          break;\n        }\n      }\n    }\n\n    if (errorCollector.length > 0) this.createToast(null, errorCollector, 7000, \"error\");else {\n      // Insert new node\n      const newCollections = this.state.collections;\n      newNode.arrayIndex = newCollections[collectionIndexActual].words.length;\n      newCollections[collectionIndexActual].words.push(newNode);\n      this.setState({\n        collections: newCollections\n      }, function () {\n        localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n          collections: newCollections,\n          journeyCount: this.state.journeyCount\n        }));\n        this.closeModal();\n      });\n    }\n  }\n  /**\n   * Updates a node in the specified collection in the state's collections array with updated data.\n   * @param e React SyntheticEvent\n   * @param collectionIndex Index of collection to which the node belongs.\n   * @param updatedNode The updated node to be set in the collections array.\n   * @param newCollectionIndex Optional parameter to set the node to a new collection.\n   */\n\n\n  editNode(e, collectionIndex, updatedNode) {\n    let newCollectionIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    const newCollections = this.state.collections; // Find node\n\n    const node = newCollections[collectionIndex].words[updatedNode.arrayIndex]; // Update node by reference\n\n    for (const index in updatedNode) if (node[index]) node[index] = updatedNode[index]; // Additional operations if node was moved from one collection to another\n\n\n    if (newCollectionIndex !== null) {\n      node.arrayIndex = newCollections[newCollectionIndex].words.length; // Update arrayIndex to reflect new collection\n\n      node.parents.splice(0, node.parents.length); // Clear parents\n\n      newCollections[newCollectionIndex].words.push(node); // Add node to new collection\n\n      this.removeNode(e, collectionIndex, updatedNode.arrayIndex); // Delete node from original collection\n    }\n\n    this.setState({\n      collections: newCollections\n    }, () => {\n      localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n        collections: newCollections,\n        journeyCount: this.state.journeyCount\n      }));\n      this.closeModal();\n    });\n  }\n  /**\n   * Removes a specified node from a specified collection in the state's collections array.\n   * The user will be warned before deletion occurs (and will be notified of any existing parents, lest they have to add them all again).\n   * @param e SyntheticEvent\n   * @param collectionIndex Index of the collection to which the node belongs.\n   * @param arrayIndex Index of the node inside the specified collection.\n   */\n\n\n  removeNode(e, collectionIndex, arrayIndex) {\n    const newCollections = this.state.collections; // Find node\n\n    const node = newCollections[collectionIndex].words[arrayIndex];\n    let confirmed = false;\n    if (node.parents.length > 0) confirmed = window.confirm(\"Warning: this node is connected to \" + node.parents.length + \" parent nodes. The nodes will be unaffected by the deletion/move. Do you still wish to delete/move?\");else confirmed = window.confirm(\"Are you sure you wish to delete/move this node?\");\n\n    if (confirmed) {\n      newCollections[collectionIndex].words.splice(arrayIndex, 1); // Delete node\n\n      for (let i = 0; i < newCollections[collectionIndex].words.length; ++i) {\n        const word = newCollections[collectionIndex].words[i];\n        if (word.arrayIndex > arrayIndex) word.arrayIndex = word.arrayIndex - 1; // Shift down after splice\n        // Delete node in parents array of others (as splice() does not delete by reference)\n\n        for (let j = 0; j < word.parents.length; ++j) {\n          if (word.parents[j].id === node.id) {\n            word.parents.splice(j, 1);\n          }\n        }\n      }\n    }\n\n    this.setState({\n      collections: newCollections\n    }, function () {\n      localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n        collections: newCollections,\n        journeyCount: this.state.journeyCount\n      }));\n      this.closeModal();\n    });\n  }\n  /**\n   * Adds a new collection to the state's collection array.\n   * @param e SyntheticEvent\n   * @param data An object containing the data required to build the new collection (collection object).\n   */\n\n\n  addCollection(e, data) {\n    const newCollections = this.state.collections;\n    let newJourneyCount = this.state.journeyCount; // Only one cognate allowed, for now // TODO\n\n    if (data.type === \"cognate\" && newCollections.find(e => e.type === \"cognate\") !== undefined) this.createToast(e, \"Support for multiple cognate collections coming soon!\");else {\n      if (data.type === \"journey\") newJourneyCount += 1;\n      newCollections.push({\n        type: data.type,\n        header: data.header,\n        words: []\n      });\n      this.setState({\n        collections: newCollections,\n        journeyCount: newJourneyCount\n      }, function () {\n        localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n          collections: newCollections,\n          journeyCount: this.state.journeyCount\n        }));\n        this.closeModal();\n      });\n    }\n  }\n  /**\n   * Updates an existing collection in the state's collection array with updated data.\n   * @param e SyntheticEvent\n   * @param data An object containing the data required to update the existing collection (collection object, collection index).\n   */\n\n\n  editCollection(e, data) {\n    const newCollections = this.state.collections;\n    newCollections[data.index].type = data.type;\n    newCollections[data.index].header = data.header;\n    this.setState({\n      collections: newCollections\n    }, function () {\n      localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n        collections: newCollections,\n        journeyCount: this.state.journeyCount\n      }));\n      this.closeModal();\n    });\n  }\n  /**\n   * Removes the specified collection from the state's collection array.\n   * @param e SyntheticEvent\n   * @param collectionIndex Index of the collection to be removed.\n   */\n\n\n  removeCollection(e, collectionIndex) {\n    const newCollections = this.state.collections;\n    let newJourneyCount = this.state.journeyCount;\n    if (newCollections[collectionIndex].type === \"journey\") newJourneyCount = this.state.journeyCount - 1;\n    newCollections.splice(collectionIndex, 1); // Remove the collection\n\n    this.setState({\n      collections: newCollections,\n      journeyCount: newJourneyCount\n    }, function () {\n      localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n        collections: newCollections,\n        journeyCount: this.state.journeyCount\n      }));\n    });\n  }\n  /**\n   * Wipes activeMap and collections data, allowing the user to start from scratch.\n   * @param e SyntheticEvent\n   */\n\n\n  newMap(e) {\n    localStorage.removeItem(\"LEMA_activeMap\");\n    localStorage.removeItem(\"LEMA_activeCollections\");\n    window.location.href = \"/\";\n  }\n  /**\n   * Serialises the map to JSON then saves it in the manner specified.\n   * @param data User-specified data about the map (such as the title).\n   */\n\n\n  saveMap(e, data) {\n    const username = this.state.activeUser.username;\n    const activeMapID = this.state.activeMap ? this.state.activeMap.mapID : null;\n    const isNewMap = data.isNewMap; // Attach map data\n\n    data.mapData = {\n      collections: this.state.collections,\n      journeyCount: this.state.journeyCount\n    };\n\n    if (data.saveMode === \"Save to profile\") {\n      // Send to server\n      if (activeMapID === null || isNewMap) {\n        // Insert new map\n        axios.put(`/maps/${username}`, {\n          data: data,\n          jwt: this.state.activeUser.jwt\n        }).then(response => {\n          if (this.handleResponse(response, \"Map inserted.\", \"Map saved!\")) {\n            this.setState({\n              activeMap: response.data.activeMap\n            }, function () {\n              localStorage.setItem(\"LEMA_activeMap\", JSON.stringify(this.state.activeMap));\n            }); // Set new map data returned by server\n          }\n        });\n      } else {\n        // Update map\n        axios.put(`/maps/${username}/${activeMapID}`, {\n          data: data,\n          jwt: this.state.activeUser.jwt\n        }).then(response => {\n          if (this.handleResponse(response, \"Map data updated.\", \"Map saved!\")) {\n            this.setState({\n              activeMap: response.data.activeMap\n            }, function () {\n              localStorage.setItem(\"LEMA_activeMap\", JSON.stringify(this.state.activeMap));\n            }); // Set new map data returned by server\n          }\n        });\n      }\n    } else if (data.saveMode === \"Export to JSON file\") {\n      // Strip extraneous data\n      delete data.saveMode;\n      delete data.isNewMap;\n      data.mapID = null; // Set up download\n\n      const a = document.createElement(\"a\");\n      const blob = new Blob([JSON.stringify(data, null, 4)], {\n        type: 'application/json'\n      });\n      a.href = URL.createObjectURL(blob);\n      a.download = `map_${this.state.activeUser.username}_${data.title.replace(/\\s+/g, '')}`; // File name (stripped of spaces)\n\n      a.click(); // Download\n    }\n  }\n  /**\n   * Loads the map using data returned by the server.\n   * @param e SyntheticEvent\n   * @param map The map object to be loaded.\n   * @param loadMode Whether the map has been loaded from the database or via user file upload.\n   */\n\n\n  loadMap(e, map, loadMode) {\n    // Build activeMap object if loaded from local file\n    const activeMap = loadMode === \"database\" ? map.activeMap : {\n      mapID: null,\n      title: map.title,\n      description: map.description,\n      isShared: map.isShared\n    };\n    this.setState({\n      collections: []\n    }, function () {\n      // Note: This is somewhat horrific, but the collections don't re-render otherwise\n      this.setState({\n        activeMap: activeMap,\n        collections: map.mapData.collections,\n        journeyCount: map.mapData.journeyCount\n      }, function () {\n        localStorage.setItem(\"LEMA_activeMap\", JSON.stringify(this.state.activeMap));\n        localStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({\n          collections: this.state.collections,\n          journeyCount: this.state.journeyCount\n        }));\n        this.closeModal();\n      });\n    });\n  }\n\n  deleteMap(e, mapID) {\n    const username = this.state.activeUser.username;\n    let activeMap = this.state.activeMap; // If they're deleting the currently active map\n\n    if (Number(mapID) === Number(this.state.activeMap.mapID)) {\n      // Unset the activeMap\n      activeMap = null;\n      this.setState({\n        activeMap: activeMap\n      }, function () {\n        localStorage.removeItem(\"LEMA_activeMap\");\n      });\n    } // Delete the map\n\n\n    axios.delete(`/maps/${username}/${mapID}`).then(response => {\n      this.handleResponse(response, \"Map deleted.\", null, false);\n      this.closeModal();\n      this.openModal(e, /*#__PURE__*/_jsxDEV(ViewMapsModal, {\n        loadMap: this.loadMap,\n        deleteMap: this.deleteMap,\n        activeUser: this.state.activeUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 22\n      }, this));\n    });\n  }\n\n  editProfile(e, data) {\n    let activeUser = this.state.activeUser;\n    const username = activeUser.username;\n    axios.put(`/users/${username}`, {\n      data: data\n    }).then(response => {\n      if (this.handleResponse(response, \"User profile updated.\", \"Profile updated!\")) {\n        activeUser = { ...activeUser,\n          displayName: data.displayName\n        };\n        this.setState({\n          activeUser: activeUser\n        });\n      }\n    });\n  }\n\n  deleteProfile(e) {\n    const username = this.state.activeUser.username;\n    axios.delete(`/users/${username}`).then(response => {\n      if (this.handleResponse(response, \"User profile and maps deleted.\", \"User profile and maps deleted!\")) {\n        this.logoutUser(e, true);\n      }\n    });\n  }\n  /**\n   * Handles responses from axios calls\n   * @param response Response returned by axios call.\n   * @param successMessage Success message expected from server.\n   * @param successAlert Success message to display to user.\n   * @param closeModal Whether to close the active modal after the operation is complete.\n   * @returns {boolean} If the response was a success.\n   */\n\n\n  handleResponse(response, successMessage, successAlert) {\n    let closeModal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    console.log(response);\n\n    if (response.data.type === \"error\") {\n      console.error(response.data.message);\n      this.createToast(null, response.data.message, 5000, \"error\");\n    } else if (response.data.type === \"success\") {\n      console.log(response.data);\n\n      if (response.data.message === successMessage) {\n        if (successAlert) this.createToast(null, successAlert, 5000, \"success\");\n        if (closeModal) this.closeModal();\n        return true;\n      }\n    }\n  }\n\n  render() {\n    // Render any active modals and context menus\n    let toastContainer = null,\n        modalContainer = null,\n        contextMenuContainer = null;\n\n    if (this.state.activeToast !== null) {\n      const activeToast = this.state.activeToast;\n      toastContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toast-container\",\n        children: activeToast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 5\n      }, this);\n    }\n\n    if (this.state.activeModal !== null) {\n      const activeModal = this.state.activeModal;\n      modalContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-container\",\n        onClick: e => {\n          if (e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n        },\n        children: activeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 5\n      }, this);\n    }\n\n    if (this.state.activeContextMenu !== null) {\n      const activeContextMenu = this.state.activeContextMenu;\n      contextMenuContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"context-menu-container\",\n        onClick: this.closeContextMenu,\n        children: activeContextMenu\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 5\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Lema\",\n      children: [/*#__PURE__*/_jsxDEV(Banner, {\n        activeUser: this.state.activeUser,\n        openModal: this.openModal,\n        activeMap: this.state.activeMap,\n        isShowcaseMode: this.state.isShowcaseMode,\n        createToast: this.createToast,\n        authenticateUser: this.authenticateUser,\n        registerUser: this.registerUser,\n        logoutUser: this.logoutUser,\n        editProfile: this.editProfile,\n        deleteProfile: this.deleteProfile,\n        toggleShowcaseMode: this.toggleShowcaseMode,\n        newMap: this.newMap,\n        saveMap: this.saveMap,\n        loadMap: this.loadMap,\n        deleteMap: this.deleteMap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-view-container\",\n        children: [/*#__PURE__*/_jsxDEV(LeftBar, {\n          activeMap: this.state.activeMap,\n          collections: this.state.collections,\n          isShowcaseMode: this.state.isShowcaseMode,\n          createToast: this.createToast,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          addNode: this.addNode,\n          editNode: this.editNode,\n          removeNode: this.removeNode,\n          addCollection: this.addCollection,\n          editCollection: this.editCollection,\n          removeCollection: this.removeCollection,\n          addJourneyFromDatabase: this.addJourneyFromDatabase\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Map, {\n          collections: this.state.collections,\n          isShowcaseMode: this.state.isShowcaseMode,\n          createToast: this.createToast,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          addNode: this.addNode,\n          editNode: this.editNode,\n          removeNode: this.removeNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 737,\n        columnNumber: 5\n      }, this), toastContainer, modalContainer, contextMenuContainer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Lema;","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/client/src/Lema.js"],"names":["Component","axios","useJwt","Banner","LeftBar","Map","ViewMapsModal","Toast","jwt","require","Lema","constructor","props","state","activeToast","activeModal","activeContextMenu","activeUser","activeMap","collections","journeyCount","isShowcaseMode","toastTimeout","defaultJourneyColours","flattenTree","bind","createToast","openModal","closeModal","openContextMenu","closeContextMenu","addCollection","editCollection","addJourneyFromDatabase","addNode","editNode","removeNode","removeCollection","authenticateUser","registerUser","logoutUser","editProfile","deleteProfile","toggleShowcaseMode","newMap","saveMap","loadMap","deleteMap","componentDidMount","JSON","parse","localStorage","getItem","setState","urlParts","window","location","href","split","includes","userConfirmed","confirm","username","mapID","get","then","response","handleResponse","data","map","activeCollections","i","length","collection","j","words","word","n","parents","parent","x","parentWord","id","e","loginUsername","password","loginPassword","rememberMe","decodedToken","decode","displayName","setItem","stringify","email","put","forceLogout","removeItem","wordArray","edWords","edStructure","wordID","edAffixes","wordNode","Object","keys","Number","push","arrayIndex","language","language_name","vertex","type","customText","fontColour","strokeColour","fillColour","radius","fontSize","y","edgeStart","edgeEnd","edgeStrokeColour","edgeStrokeWidth","edgeArrowheadEnabled","edgeArrowheadStrokeColour","edgeArrowheadFillColour","parentID","find","newCollections","newJourneyCount","journeyWords","newJourney","header","contents","time","toast","clearTimeout","setTimeout","modalComponent","forceClose","menuComponent","toggle","collectionIndex","newNode","newCollectionIndex","collectionIndexActual","errorCollector","childNode","updatedNode","node","index","splice","confirmed","undefined","activeMapID","isNewMap","mapData","saveMode","a","document","createElement","blob","Blob","URL","createObjectURL","download","title","replace","click","loadMode","description","isShared","delete","successMessage","successAlert","console","log","error","message","render","toastContainer","modalContainer","contextMenuContainer","nativeEvent","target","className"],"mappings":"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","sourcesContent":["import \"./css/Lema.css\";\nimport {Component} from \"react\";\nimport axios from \"axios\";\nimport {useJwt} from \"react-jwt\";\nimport {Banner} from \"./components/Banner\";\nimport {LeftBar} from \"./components/LeftBar\";\nimport {Map} from \"./components/Map\";\nimport {ViewMapsModal} from \"./components/modals/ViewMapsModal\";\nimport {Toast} from \"./components/Toast\";\nconst jwt = require(\"jsonwebtoken\");\n\n\nclass Lema extends Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tactiveToast: null,       // Either null or a React component\n\t\t\tactiveModal: null,       // Either null or a React component\n\t\t\tactiveContextMenu: null, // Either null or a React component\n\t\t\tactiveUser: null,        // Set upon user login\n\t\t\tactiveMap: null,         // Either null, set by load function, or set by save function once saved to profile\n\t\t\tcollections: [],\n\t\t\tjourneyCount: 0,\n\t\t\tisShowcaseMode: false\n\t\t};\n\n\t\tthis.toastTimeout = null;\n\t\tthis.defaultJourneyColours = [\"#ff0000\", \"#00ff00\", \"#0000ff\", \"#da35aa\", \"#ffcc00\"] // TODO: Better colours\n\n\t\tthis.flattenTree = this.flattenTree.bind(this);\n\t\tthis.createToast = this.createToast.bind(this);\n\t\tthis.openModal = this.openModal.bind(this);\n\t\tthis.closeModal = this.closeModal.bind(this);\n\t\tthis.openContextMenu = this.openContextMenu.bind(this);\n\t\tthis.closeContextMenu = this.closeContextMenu.bind(this);\n\t\tthis.addCollection = this.addCollection.bind(this);\n\t\tthis.editCollection = this.editCollection.bind(this);\n\t\tthis.addJourneyFromDatabase = this.addJourneyFromDatabase.bind(this);\n\t\tthis.addNode = this.addNode.bind(this);\n\t\tthis.editNode = this.editNode.bind(this);\n\t\tthis.removeNode = this.removeNode.bind(this);\n\t\tthis.removeCollection = this.removeCollection.bind(this);\n\t\tthis.authenticateUser = this.authenticateUser.bind(this);\n\t\tthis.registerUser = this.registerUser.bind(this);\n\t\tthis.logoutUser = this.logoutUser.bind(this);\n\t\tthis.editProfile = this.editProfile.bind(this);\n\t\tthis.deleteProfile = this.deleteProfile.bind(this);\n\t\tthis.toggleShowcaseMode = this.toggleShowcaseMode.bind(this);\n\t\tthis.newMap = this.newMap.bind(this);\n\t\tthis.saveMap = this.saveMap.bind(this);\n\t\tthis.loadMap = this.loadMap.bind(this);\n\t\tthis.deleteMap = this.deleteMap.bind(this);\n\t}\n\n\t/**\n\t * As part of React's lifecycle, this function is automatically called once the component is rendered (\"mounted\"),\n\t * i.e. at page load/refresh (when the component is created).\n\t */\n\tcomponentDidMount()\n\t{\n\t\t// Check if user is already logged in\n\t\tconst activeUser = JSON.parse(localStorage.getItem(\"LEMA_activeUser\"));\n\t\tif(activeUser)\n\t\t\tthis.setState({activeUser: activeUser});\n\n\t\t// Check if user has been linked a map\n\t\tconst urlParts = window.location.href.split('/');\n\t\tif(urlParts.includes(\"map\"))\n\t\t{\n\t\t\tconst userConfirmed = window.confirm(\"You are loading another person's map.\\nThis will overwrite your currently active map.\\n\\n\" +\n\t\t\t\t\"Do you wish to continue?\");\n\t\t\tif(userConfirmed)\n\t\t\t{\n\t\t\t\tconst username = urlParts[4];\n\t\t\t\tconst mapID = urlParts[5];\n\t\t\t\taxios.get(`/maps/${username}/${mapID}/0`).then((response) => {\n\t\t\t\t\tif(this.handleResponse(response, \"User's map retrieved.\", null))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.loadMap(null, response.data.map, \"database\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Check for activeMap data (mapID, title, description, isShared)\n\t\t\tconst activeMap = JSON.parse(localStorage.getItem(\"LEMA_activeMap\"));\n\t\t\tif(activeMap)\n\t\t\t\tthis.setState({activeMap: activeMap});\n\n\t\t\t// Check if there are active collections (DISTINCT FROM activeMap!)\n\t\t\tconst activeCollections = JSON.parse(localStorage.getItem(\"LEMA_activeCollections\"));\n\t\t\tif(activeCollections)\n\t\t\t\tthis.setState({collections: activeCollections.collections, journeyCount: activeCollections.journeyCount}, function() {\n\t\t\t\t\t/* Repair parent links: memory references are lost when serialising to and from JSON string */\n\t\t\t\t\t/* Justification for O(n^4): this callback function only runs once when user refreshes/re-enters the page;\n\t\t\t\t\tand the arrays involved will never be large enough for it to be an issue. Future solution: autosave to PouchDB. */\n\t\t\t\t\tfor(let i = 0; i < this.state.collections.length; ++i) // Loop through collections\n\t\t\t\t\t{\n\t\t\t\t\t\tconst collection = this.state.collections[i];\n\t\t\t\t\t\tfor(let j = 0; j < collection.words.length; ++j) // Loop through words\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst word = collection.words[j];\n\t\t\t\t\t\t\tfor(let n = 0; n < word.parents.length; ++n) // Loop through parents\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconst parent = word.parents[n];\n\t\t\t\t\t\t\t\tfor(let x = 0; x < collection.words.length; ++x) // Loop through words again\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconst parentWord = collection.words[x];\n\t\t\t\t\t\t\t\t\tif(parent.id === parentWord.id)\n\t\t\t\t\t\t\t\t\t\tword.parents[n] = parentWord;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\n\n\t}\n\n\t/**\n\t * Sends log in data to server to authenticate user.\n\t * @param e SyntheticEvent\n\t * @param data Login data\n\t */\n\tauthenticateUser(e, data)\n\t{\n\t\t// Check the user\n\t\tconst username = data.loginUsername;\n\t\tconst password = data.loginPassword;\n\t\tconst rememberMe = data.rememberMe;\n\n\t\taxios.get(`/users/${username}/${password}`).then((response) => {\n\t\t\tif(this.handleResponse(response, \"User found.\", \"Login successful!\"))\n\t\t\t{\n\t\t\t\tconst decodedToken = jwt.decode(response.data.jwt, {});\n\t\t\t\tconst activeUser = {\n\t\t\t\t\tusername: decodedToken.username,\n\t\t\t\t\tdisplayName: decodedToken.displayName,\n\t\t\t\t\tjwt: response.data.jwt\n\t\t\t\t};\n\n\t\t\t\tthis.setState({activeUser: activeUser}, () => {\n\t\t\t\t\tif(rememberMe) localStorage.setItem(\"LEMA_activeUser\", JSON.stringify(activeUser));\n\t\t\t\t\t// TODO: Refresh token 1 minute before decodedToken.exp time\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t}\n\t/**\n\t * Sends register data to server to create a new user profile.\n\t * @param e SyntheticEvent\n\t * @param data Registration data\n\t */\n\tregisterUser(e, data)\n\t{\n\t\t// Register the user\n\t\tconst {displayName, username, password, email} = data;\n\n\t\taxios.put(`/users/${displayName}/${username}/${password}/${email}`).then((response) => {\n\t\t\tthis.handleResponse(response, \"User created.\", \"Profile created! You may now log in.\");\n\t\t});\n\t}\n\n\t/**\n\t * Logs the user out of the app.\n\t * @param e SyntheticEvent\n\t * @param forceLogout Whether the logout should be forced (when called by internal functions)\n\t */\n\tlogoutUser(e, forceLogout = false)\n\t{\n\t\tlet userConfirmed = false;\n\t\tif(!forceLogout) userConfirmed = window.confirm(\"Are you sure you wish to log out? This will clear your active map data.\");\n\n\t\tif(userConfirmed || forceLogout)\n\t\t{\n\t\t\tlocalStorage.removeItem(\"LEMA_activeUser\");\n\t\t\tlocalStorage.removeItem(\"LEMA_activeMap\");\n\t\t\tlocalStorage.removeItem(\"LEMA_activeCollections\");\n\t\t\tthis.setState({activeUser: null, activeMap: null, collections: [], journeyCount: 0});\n\t\t}\n\t}\n\n\t/**\n\t * A recursive function that flattens the nested data structure returned from the etymological database into an\n\t * array of word nodes.\n\t * @param wordArray Flat array of words (initially empty)\n\t * @param edWords Object of words returned by the etymological database\n\t * @param edStructure Original data structure returned by the etymological database\n\t * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n\t * @param wordID The ID of the word currently being operated on in the recursive function\n\t * @returns {array} The wordArray object, which has nodes pushed to it throughout the function\n\t */\n\tflattenTree(wordArray, edWords, edStructure, wordID, edAffixes = null)\n\t{\n\t\tlet parents = [], wordNode = {};\n\t\t// Parents\n\t\tif(Object.keys(edStructure).length > 0)\n\t\t{\n\t\t\t// Loop through parents\n\t\t\tfor(const wordID in edStructure)\n\t\t\t{\n\t\t\t\tif((edAffixes !== null && !edAffixes.includes(Number(wordID)))\n\t\t\t\t\t|| edAffixes == null)\n\t\t\t\t{\n\t\t\t\t\tparents.push(wordID);\n\t\t\t\t\twordArray = this.flattenTree(wordArray, edWords, edStructure[wordID], wordID, edAffixes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Retrieve word from ED and convert to Lema-compatible object\n\t\tif(wordID !== null)\n\t\t{\n\t\t\twordNode = edWords[wordID];\n\t\t\twordNode = {\n\t\t\t\tid: Number(wordID),\n\t\t\t\tarrayIndex: wordArray.length,\n\t\t\t\tword: wordNode.word,\n\t\t\t\tlanguage: wordNode.language_name,\n\t\t\t\tparents: [],\n\t\t\t\tvertex: {type: \"word\", customText: \"\", fontColour: \"#000000\", strokeColour: \"#000000\", fillColour: this.defaultJourneyColours[this.state.journeyCount], radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\", edgeStrokeColour: \"#000000\", edgeStrokeWidth: \"2px\", edgeArrowheadEnabled: true, edgeArrowheadStrokeColour: \"#000000\", edgeArrowheadFillColour: \"#000000\"}\n\t\t\t}\n\t\t\tfor(let i = 0; i < parents.length; ++i)\n\t\t\t{\n\t\t\t\tconst parentID = Number(parents[i]);\n\t\t\t\tconst parent = wordArray.find(({id}) => id === parentID);\n\t\t\t\tif((edAffixes !== null && !edAffixes.includes(parentID))\n\t\t\t\t\t|| edAffixes === null)\n\t\t\t\t{\n\t\t\t\t\twordNode.parents.push(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\twordArray.push(wordNode);\n\t\t}\n\t\treturn wordArray;\n\t}\n\n\t/**\n\t * Creates a journey collection from words returned by the etymological database and automatically adds them to the existing journey collections array\n\t * @param edWords Object of words returned by the etymological database\n\t * @param edStructure Original data structure returned by the etymological database\n\t * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n\t */\n\taddJourneyFromDatabase(edWords, edStructure, edAffixes = null)\n\t{\n\t\tconst newCollections = this.state.collections, newJourneyCount = this.state.journeyCount;\n\n\t\t// Flatten the data structure\n\t\tlet journeyWords = [];\n\t\tjourneyWords = this.flattenTree(journeyWords, edWords, edStructure, null, edAffixes);\n\n\t\t// Create the new journey and add it to collections\n\t\tconst newJourney = {type: \"journey\", header: {word: journeyWords[journeyWords.length-1].word, language: journeyWords[journeyWords.length-1].language}, words: journeyWords};\n\t\tnewCollections.push(newJourney);\n\n\t\tthis.setState({collections: newCollections, journeyCount: newJourneyCount+1}, function(){\n\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: newCollections, journeyCount: this.state.journeyCount}));\n\t\t});\n\t}\n\n\t/**\n\t * Creates a\n\t * @param e SyntheticEvent\n\t * @param contents HTML contents to be displayed in the toast.\n\t * @param time Time in ms to keep the toast open\n\t * @param type What type of alert the toast is showing: neutral, error, or success\n\t */\n\tcreateToast(e, contents, time = 5000, type = \"neutral\")\n\t{\n\t\tconst toast =\n\t\t\t<Toast type={type}>\n\t\t\t\t{contents}\n\t\t\t</Toast>\n\t\tthis.setState({activeToast: toast}, function(){\n\t\t\twindow.clearTimeout(this.toastTimeout);\n\t\t\tthis.toastTimeout = window.setTimeout(() => {\n\t\t\t\tthis.setState({activeToast: null});\n\t\t\t}, time);\n\t\t})\n\t}\n\n\t/**\n\t * Opens a modal if one is not already open.\n\t * @param e SyntheticEvent\n\t * @param modalComponent React component of the modal that is to be opened.\n\t * @param forceClose Whether to close active modals first.\n\t */\n\topenModal(e, modalComponent, forceClose = false)\n\t{\n\t\tif(!this.state.activeModal || forceClose)\n\t\t\tthis.setState({activeModal: modalComponent});\n\t}\n\n\t/**\n\t * Closes any currently-open modal.\n\t */\n\tcloseModal()\n\t{\n\t\tif(this.state.activeModal)\n\t\t\tthis.setState({activeModal: null});\n\t}\n\n\t/**\n\t * Opens a context menu if one is not already open.\n\t * Note: currently, only one context menu can be active at a time. This means context menus' items must not attempt to open a context menu on themselves.\n\t * @param e\n\t * @param menuComponent A React component of the context menu that is to be opened.\n\t */\n\topenContextMenu(e, menuComponent)\n\t{\n\t\tif(!this.state.activeContextMenu)\n\t\t\tthis.setState({activeContextMenu: menuComponent});\n\t}\n\n\t/**\n\t * Closes any currently-open context menu.\n\t */\n\tcloseContextMenu()\n\t{\n\t\tif(this.state.activeContextMenu)\n\t\t\tthis.setState({activeContextMenu: null});\n\t}\n\n\t/**\n\t * Toggles showcase mode.\n\t * @param toggle Optional parameter to force showcase to switch to either true or false.\n\t */\n\ttoggleShowcaseMode(e, toggle = null)\n\t{\n\t\tconst isShowcaseMode = (toggle !== null) ? toggle : !this.state.isShowcaseMode;\n\t\tthis.setState({isShowcaseMode: isShowcaseMode});\n\t}\n\n\t/**\n\t * Adds a node to the specified collection in the state's collection array.\n\t * @param e SyntheticEvent\n\t * @param collectionIndex The index of the collection to which the new node will belong.\n\t * @param newNode The new node.\n\t * @param newCollectionIndex Optional parameter to set the node to a new/different collection.\n\t */\n\taddNode(e, collectionIndex, newNode, newCollectionIndex = null)\n\t{\n\t\tconst collectionIndexActual = (newCollectionIndex !== null) ? newCollectionIndex : collectionIndex;\n\n\t\t// Validation (note: node data validation exists in the AddEditNodeModal)\n\t\tlet errorCollector = \"\";\n\t\tif(this.state.collections[collectionIndexActual].type === \"cognate\")\n\t\t{\n\t\t\t// Check for existing language\n\t\t\tfor(let i = 0; i < this.state.collections[collectionIndexActual].words.length; ++i)\n\t\t\t{\n\t\t\t\tconst childNode = this.state.collections[collectionIndexActual].words[i];\n\t\t\t\tif(childNode.language === newNode.language)\n\t\t\t\t{\n\t\t\t\t\terrorCollector += \"A language can only appear in a cognate collection once.\\n\" +\n\t\t\t\t\t\t\t\t\t  \"Additional cognate collections may contain a language used in another cognate collection.\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(errorCollector.length > 0)\n\t\t\tthis.createToast(null, errorCollector, 7000, \"error\");\n\t\telse\n\t\t{\n\t\t\t// Insert new node\n\t\t\tconst newCollections = this.state.collections;\n\t\t\tnewNode.arrayIndex = newCollections[collectionIndexActual].words.length;\n\t\t\tnewCollections[collectionIndexActual].words.push(newNode);\n\n\t\t\tthis.setState({collections: newCollections}, function(){\n\t\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: newCollections, journeyCount: this.state.journeyCount}));\n\t\t\t\tthis.closeModal();\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Updates a node in the specified collection in the state's collections array with updated data.\n\t * @param e React SyntheticEvent\n\t * @param collectionIndex Index of collection to which the node belongs.\n\t * @param updatedNode The updated node to be set in the collections array.\n\t * @param newCollectionIndex Optional parameter to set the node to a new collection.\n\t */\n\teditNode(e, collectionIndex, updatedNode, newCollectionIndex = null)\n\t{\n\t\tconst newCollections = this.state.collections;\n\n\t\t// Find node\n\t\tconst node = newCollections[collectionIndex].words[updatedNode.arrayIndex];\n\n\t\t// Update node by reference\n\t\tfor(const index in updatedNode)\n\t\t\tif(node[index]) node[index] = updatedNode[index];\n\n\t\t// Additional operations if node was moved from one collection to another\n\t\tif(newCollectionIndex !== null)\n\t\t{\n\t\t\tnode.arrayIndex = newCollections[newCollectionIndex].words.length; // Update arrayIndex to reflect new collection\n\t\t\tnode.parents.splice(0, node.parents.length);                  // Clear parents\n\t\t\tnewCollections[newCollectionIndex].words.push(node);               // Add node to new collection\n\t\t\tthis.removeNode(e, collectionIndex, updatedNode.arrayIndex);       // Delete node from original collection\n\t\t}\n\n\t\tthis.setState({collections: newCollections}, () => {\n\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: newCollections, journeyCount: this.state.journeyCount}));\n\t\t\tthis.closeModal();\n\t\t});\n\t}\n\n\t/**\n\t * Removes a specified node from a specified collection in the state's collections array.\n\t * The user will be warned before deletion occurs (and will be notified of any existing parents, lest they have to add them all again).\n\t * @param e SyntheticEvent\n\t * @param collectionIndex Index of the collection to which the node belongs.\n\t * @param arrayIndex Index of the node inside the specified collection.\n\t */\n\tremoveNode(e, collectionIndex, arrayIndex)\n\t{\n\t\tconst newCollections = this.state.collections;\n\n\t\t// Find node\n\t\tconst node = newCollections[collectionIndex].words[arrayIndex];\n\t\tlet confirmed = false;\n\t\tif(node.parents.length > 0)\n\t\t\tconfirmed = window.confirm(\"Warning: this node is connected to \"+node.parents.length+\" parent nodes. The nodes will be unaffected by the deletion/move. Do you still wish to delete/move?\");\n\t\telse\n\t\t\tconfirmed = window.confirm(\"Are you sure you wish to delete/move this node?\");\n\n\t\tif(confirmed)\n\t\t{\n\t\t\tnewCollections[collectionIndex].words.splice(arrayIndex, 1); // Delete node\n\n\t\t\tfor(let i = 0; i < newCollections[collectionIndex].words.length; ++i)\n\t\t\t{\n\t\t\t\tconst word = newCollections[collectionIndex].words[i];\n\t\t\t\tif(word.arrayIndex > arrayIndex) word.arrayIndex = word.arrayIndex-1; // Shift down after splice\n\n\t\t\t\t// Delete node in parents array of others (as splice() does not delete by reference)\n\t\t\t\tfor(let j = 0; j < word.parents.length; ++j)\n\t\t\t\t{\n\t\t\t\t\tif(word.parents[j].id === node.id)\n\t\t\t\t\t{\n\t\t\t\t\t\tword.parents.splice(j, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({collections: newCollections}, function(){\n\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: newCollections, journeyCount: this.state.journeyCount}));\n\t\t\tthis.closeModal();\n\t\t});\n\t}\n\n\t/**\n\t * Adds a new collection to the state's collection array.\n\t * @param e SyntheticEvent\n\t * @param data An object containing the data required to build the new collection (collection object).\n\t */\n\taddCollection(e, data)\n\t{\n\t\tconst newCollections = this.state.collections;\n\t\tlet newJourneyCount = this.state.journeyCount;\n\n\t\t// Only one cognate allowed, for now // TODO\n\t\tif(data.type === \"cognate\" && newCollections.find(e => e.type === \"cognate\") !== undefined)\n\t\t\tthis.createToast(e, \"Support for multiple cognate collections coming soon!\");\n\t\telse\n\t\t{\n\t\t\tif(data.type === \"journey\")\n\t\t\t\tnewJourneyCount += 1;\n\t\t\tnewCollections.push({type: data.type, header: data.header, words: []});\n\t\t\tthis.setState( {collections: newCollections, journeyCount: newJourneyCount}, function(){\n\t\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: newCollections, journeyCount: this.state.journeyCount}));\n\t\t\t\tthis.closeModal();\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Updates an existing collection in the state's collection array with updated data.\n\t * @param e SyntheticEvent\n\t * @param data An object containing the data required to update the existing collection (collection object, collection index).\n\t */\n\teditCollection(e, data)\n\t{\n\t\tconst newCollections = this.state.collections;\n\t\tnewCollections[data.index].type = data.type;\n\t\tnewCollections[data.index].header = data.header;\n\n\t\tthis.setState({collections: newCollections}, function(){\n\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: newCollections, journeyCount: this.state.journeyCount}));\n\t\t\tthis.closeModal();\n\t\t});\n\t}\n\n\t/**\n\t * Removes the specified collection from the state's collection array.\n\t * @param e SyntheticEvent\n\t * @param collectionIndex Index of the collection to be removed.\n\t */\n\tremoveCollection(e, collectionIndex)\n\t{\n\t\tconst newCollections = this.state.collections;\n\t\tlet newJourneyCount = this.state.journeyCount;\n\t\tif(newCollections[collectionIndex].type === \"journey\")\n\t\t\tnewJourneyCount = this.state.journeyCount-1;\n\n\t\tnewCollections.splice(collectionIndex, 1); // Remove the collection\n\n\t\tthis.setState({collections: newCollections, journeyCount: newJourneyCount}, function(){\n\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: newCollections, journeyCount: this.state.journeyCount}));\n\t\t});\n\t}\n\n\t/**\n\t * Wipes activeMap and collections data, allowing the user to start from scratch.\n\t * @param e SyntheticEvent\n\t */\n\tnewMap(e)\n\t{\n\t\tlocalStorage.removeItem(\"LEMA_activeMap\");\n\t\tlocalStorage.removeItem(\"LEMA_activeCollections\");\n\t\twindow.location.href = \"/\";\n\t}\n\n\t/**\n\t * Serialises the map to JSON then saves it in the manner specified.\n\t * @param data User-specified data about the map (such as the title).\n\t */\n\tsaveMap(e, data)\n\t{\n\t\tconst username = this.state.activeUser.username;\n\t\tconst activeMapID = (this.state.activeMap) ? this.state.activeMap.mapID : null;\n\t\tconst isNewMap = data.isNewMap;\n\n\t\t// Attach map data\n\t\tdata.mapData = {collections: this.state.collections, journeyCount: this.state.journeyCount};\n\n\t\tif(data.saveMode === \"Save to profile\")\n\t\t{\n\t\t\t// Send to server\n\t\t\tif(activeMapID === null || isNewMap)\n\t\t\t{\n\t\t\t\t// Insert new map\n\t\t\t\taxios.put(`/maps/${username}`, {data: data, jwt: this.state.activeUser.jwt}).then((response) =>\n\t\t\t\t{\n\t\t\t\t\tif(this.handleResponse(response, \"Map inserted.\", \"Map saved!\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setState({activeMap: response.data.activeMap}, function(){\n\t\t\t\t\t\t\tlocalStorage.setItem(\"LEMA_activeMap\", JSON.stringify(this.state.activeMap));\n\t\t\t\t\t\t}); // Set new map data returned by server\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Update map\n\t\t\t\taxios.put(`/maps/${username}/${activeMapID}`, {data: data, jwt: this.state.activeUser.jwt}).then((response) => {\n\t\t\t\t\tif(this.handleResponse(response, \"Map data updated.\", \"Map saved!\"))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setState({activeMap: response.data.activeMap}, function(){\n\t\t\t\t\t\t\tlocalStorage.setItem(\"LEMA_activeMap\", JSON.stringify(this.state.activeMap));\n\t\t\t\t\t\t}); // Set new map data returned by server\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t}\n\n\t\t}\n\t\telse if(data.saveMode === \"Export to JSON file\")\n\t\t{\n\t\t\t// Strip extraneous data\n\t\t\tdelete data.saveMode; delete data.isNewMap; data.mapID = null;\n\n\t\t\t// Set up download\n\t\t\tconst a = document.createElement(\"a\");\n\t\t\tconst blob = new Blob([JSON.stringify(data, null, 4)], {type: 'application/json'});\n\t\t\ta.href = URL.createObjectURL(blob);\n\t\t\ta.download = `map_${this.state.activeUser.username}_${data.title.replace(/\\s+/g, '')}`; // File name (stripped of spaces)\n\t\t\ta.click(); // Download\n\t\t}\n\t}\n\n\t/**\n\t * Loads the map using data returned by the server.\n\t * @param e SyntheticEvent\n\t * @param map The map object to be loaded.\n\t * @param loadMode Whether the map has been loaded from the database or via user file upload.\n\t */\n\tloadMap(e, map, loadMode)\n\t{\n\t\t// Build activeMap object if loaded from local file\n\t\tconst activeMap = (loadMode === \"database\") ? map.activeMap : {\n\t\t\tmapID: null,\n\t\t\ttitle: map.title,\n\t\t\tdescription: map.description,\n\t\t\tisShared: map.isShared\n\t\t};\n\t\tthis.setState({collections: []}, function(){ // Note: This is somewhat horrific, but the collections don't re-render otherwise\n\t\t\tthis.setState({\n\t\t\t\tactiveMap: activeMap,\n\t\t\t\tcollections: map.mapData.collections,\n\t\t\t\tjourneyCount: map.mapData.journeyCount\n\t\t\t}, function(){\n\t\t\t\tlocalStorage.setItem(\"LEMA_activeMap\", JSON.stringify(this.state.activeMap));\n\t\t\t\tlocalStorage.setItem(\"LEMA_activeCollections\", JSON.stringify({collections: this.state.collections, journeyCount: this.state.journeyCount}));\n\t\t\t\tthis.closeModal();\n\t\t\t});\n\t\t});\n\n\t}\n\n\tdeleteMap(e, mapID)\n\t{\n\t\tconst username = this.state.activeUser.username;\n\t\tlet activeMap = this.state.activeMap;\n\n\t\t// If they're deleting the currently active map\n\t\tif(Number(mapID) === Number(this.state.activeMap.mapID))\n\t\t{\n\t\t\t// Unset the activeMap\n\t\t\tactiveMap = null;\n\t\t\tthis.setState({activeMap: activeMap}, function(){\n\t\t\t\tlocalStorage.removeItem(\"LEMA_activeMap\");\n\t\t\t});\n\t\t}\n\n\t\t// Delete the map\n\t\taxios.delete(`/maps/${username}/${mapID}`, ).then((response) => {\n\t\t\tthis.handleResponse(response, \"Map deleted.\", null, false);\n\t\t\tthis.closeModal();\n\t\t\tthis.openModal(e, <ViewMapsModal loadMap={this.loadMap} deleteMap={this.deleteMap} activeUser={this.state.activeUser} />);\n\t\t});\n\t}\n\n\teditProfile(e, data)\n\t{\n\t\tlet activeUser = this.state.activeUser;\n\t\tconst username = activeUser.username;\n\t\taxios.put(`/users/${username}`, {data: data}).then((response) => {\n\t\t\tif(this.handleResponse(response, \"User profile updated.\", \"Profile updated!\"))\n\t\t\t{\n\t\t\t\tactiveUser = {\n\t\t\t\t\t...activeUser,\n\t\t\t\t\tdisplayName: data.displayName\n\t\t\t\t};\n\t\t\t\tthis.setState({activeUser: activeUser});\n\t\t\t}\n\t\t});\n\t}\n\n\tdeleteProfile(e)\n\t{\n\t\tconst username = this.state.activeUser.username;\n\t\taxios.delete(`/users/${username}`).then((response) => {\n\t\t\tif(this.handleResponse(response, \"User profile and maps deleted.\", \"User profile and maps deleted!\"))\n\t\t\t{\n\t\t\t\tthis.logoutUser(e, true);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Handles responses from axios calls\n\t * @param response Response returned by axios call.\n\t * @param successMessage Success message expected from server.\n\t * @param successAlert Success message to display to user.\n\t * @param closeModal Whether to close the active modal after the operation is complete.\n\t * @returns {boolean} If the response was a success.\n\t */\n\thandleResponse(response, successMessage, successAlert, closeModal = true)\n\t{\n\t\t\tconsole.log(response);\n\t\tif(response.data.type === \"error\")\n\t\t{\n\t\t\tconsole.error(response.data.message);\n\t\t\tthis.createToast(null, response.data.message, 5000, \"error\");\n\t\t}\n\t\telse if(response.data.type === \"success\")\n\t\t{\n\t\t\tconsole.log(response.data);\n\t\t\tif(response.data.message === successMessage)\n\t\t\t{\n\t\t\t\tif(successAlert) this.createToast(null, successAlert, 5000, \"success\");\n\t\t\t\tif(closeModal) this.closeModal();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\trender()\n\t{\n\t\t// Render any active modals and context menus\n\t\tlet toastContainer = null, modalContainer = null, contextMenuContainer = null;\n\t\tif(this.state.activeToast !== null)\n\t\t{\n\t\t\tconst activeToast = this.state.activeToast;\n\t\t\ttoastContainer =\n\t\t\t\t<div className={\"toast-container\"}>\n\t\t\t\t\t{activeToast}\n\t\t\t\t</div>\n\t\t}\n\n\t\tif(this.state.activeModal !== null)\n\t\t{\n\t\t\tconst activeModal = this.state.activeModal;\n\t\t\tmodalContainer =\n\t\t\t\t<div className={\"modal-container\"} onClick={(e) => {\n\t\t\t\t\tif(e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n\t\t\t\t}}>\n\t\t\t\t\t{activeModal}\n\t\t\t\t</div>;\n\t\t}\n\t\tif(this.state.activeContextMenu !== null)\n\t\t{\n\t\t\tconst activeContextMenu = this.state.activeContextMenu;\n\t\t\tcontextMenuContainer =\n\t\t\t\t<div className={\"context-menu-container\"} onClick={this.closeContextMenu}>{activeContextMenu}</div>;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"Lema\">\n\t\t\t\t<Banner activeUser={this.state.activeUser} openModal={this.openModal} activeMap={this.state.activeMap}\n\t\t\t\t        isShowcaseMode={this.state.isShowcaseMode} createToast={this.createToast}\n\t\t\t\t        authenticateUser={this.authenticateUser} registerUser={this.registerUser} logoutUser={this.logoutUser}\n\t\t\t\t        editProfile={this.editProfile} deleteProfile={this.deleteProfile} toggleShowcaseMode={this.toggleShowcaseMode}\n\t\t\t\t        newMap={this.newMap} saveMap={this.saveMap} loadMap={this.loadMap} deleteMap={this.deleteMap} />\n\t\t\t\t<div className={\"main-view-container\"}>\n\t\t\t\t\t<LeftBar activeMap={this.state.activeMap} collections={this.state.collections}\n\t\t\t\t\t         isShowcaseMode={this.state.isShowcaseMode} createToast={this.createToast}\n\t\t\t\t\t         openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t         openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t         addNode={this.addNode} editNode={this.editNode} removeNode={this.removeNode}\n\t\t\t\t\t         addCollection={this.addCollection} editCollection={this.editCollection} removeCollection={this.removeCollection}\n\t\t\t\t\t         addJourneyFromDatabase={this.addJourneyFromDatabase}\n\t\t\t\t\t/>\n\t\t\t\t\t<Map collections={this.state.collections}\n\t\t\t\t\t     isShowcaseMode={this.state.isShowcaseMode} createToast={this.createToast}\n\t\t\t\t\t     openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t     openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t\t addNode={this.addNode} editNode={this.editNode} removeNode={this.removeNode}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{toastContainer}\n\t\t\t\t{modalContainer}\n\t\t\t\t{contextMenuContainer}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Lema;\n"]},"metadata":{},"sourceType":"module"}