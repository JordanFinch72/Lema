{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\RadioGroup.jsx\";\nimport { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RadioButton extends Component {\n  constructor(props) {\n    super(props);\n    this.onButtonClick = this.props.onButtonClick.bind(this);\n  }\n\n  render() {\n    // TODO: There's a better way to do this by having the radio button reflect the value of the state. Do it later; not a priority\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radio-button\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        id: this.props.id,\n        name: this.props.name,\n        value: this.props.label,\n        checked: this.props.active,\n        onChange: this.props.onButtonClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: this.props.id,\n        children: this.props.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport class RadioGroup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttons: this.props.buttons,\n      name: this.props.name\n    };\n    this.onButtonClick = this.props.onButtonClick.bind(this);\n  }\n\n  updateGroup(id) {\n    // Update the state of the buttons\n    let oldButtons = this.state.buttons;\n\n    for (let i = 0; i < oldButtons.length; ++i) {\n      oldButtons[i].active = i === id;\n    }\n\n    this.setState({\n      buttons: oldButtons\n    });\n  }\n\n  render() {\n    let buttonElements = this.props.buttons.map((button, index) => {\n      return /*#__PURE__*/_jsxDEV(RadioButton, {\n        active: button.active,\n        label: button.label,\n        name: this.props.name,\n        id: index,\n        onButtonClick: e => {\n          this.updateGroup(index); // Internal RadioGroup state update\n\n          this.onButtonClick(e, {\n            state: this.state,\n            id: index\n          }); // External handler call\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"radio-group\",\n      children: buttonElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/RadioGroup.jsx"],"names":["Component","RadioButton","constructor","props","onButtonClick","bind","render","id","name","label","active","RadioGroup","state","buttons","updateGroup","oldButtons","i","length","setState","buttonElements","map","button","index","e"],"mappings":";AAAA,SAAQA,SAAR,QAAwB,OAAxB;;;AAEA,MAAMC,WAAN,SAA0BD,SAA1B,CACA;AACCE,EAAAA,WAAW,CAACC,KAAD,EACX;AACC,UAAMA,KAAN;AACA,SAAKC,aAAL,GAAqB,KAAKD,KAAL,CAAWC,aAAX,CAAyBC,IAAzB,CAA8B,IAA9B,CAArB;AACA;;AAEDC,EAAAA,MAAM,GACN;AACC;AACA,wBACC;AAAK,MAAA,SAAS,EAAE,cAAhB;AAAA,8BACC;AAAO,QAAA,IAAI,EAAE,OAAb;AAAsB,QAAA,EAAE,EAAE,KAAKH,KAAL,CAAWI,EAArC;AAAyC,QAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWK,IAA1D;AAAgE,QAAA,KAAK,EAAE,KAAKL,KAAL,CAAWM,KAAlF;AACO,QAAA,OAAO,EAAE,KAAKN,KAAL,CAAWO,MAD3B;AACmC,QAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWC;AADxD;AAAA;AAAA;AAAA;AAAA,cADD,eAGC;AAAO,QAAA,OAAO,EAAE,KAAKD,KAAL,CAAWI,EAA3B;AAAA,kBAAgC,KAAKJ,KAAL,CAAWM;AAA3C;AAAA;AAAA;AAAA;AAAA,cAHD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAOA;;AAjBF;;AAoBA,OAAO,MAAME,UAAN,SAAyBX,SAAzB,CACP;AACCE,EAAAA,WAAW,CAACC,KAAD,EACX;AACC,UAAMA,KAAN;AACA,SAAKS,KAAL,GAAa;AACZC,MAAAA,OAAO,EAAE,KAAKV,KAAL,CAAWU,OADR;AAEZL,MAAAA,IAAI,EAAE,KAAKL,KAAL,CAAWK;AAFL,KAAb;AAKA,SAAKJ,aAAL,GAAqB,KAAKD,KAAL,CAAWC,aAAX,CAAyBC,IAAzB,CAA8B,IAA9B,CAArB;AACA;;AAEDS,EAAAA,WAAW,CAACP,EAAD,EACX;AACC;AACA,QAAIQ,UAAU,GAAG,KAAKH,KAAL,CAAWC,OAA5B;;AACA,SAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,UAAU,CAACE,MAA9B,EAAsC,EAAED,CAAxC,EACA;AACCD,MAAAA,UAAU,CAACC,CAAD,CAAV,CAAcN,MAAd,GAAwBM,CAAC,KAAKT,EAA9B;AACA;;AACD,SAAKW,QAAL,CAAc;AAACL,MAAAA,OAAO,EAAEE;AAAV,KAAd;AACA;;AAEDT,EAAAA,MAAM,GACN;AACC,QAAIa,cAAc,GAAG,KAAKhB,KAAL,CAAWU,OAAX,CAAmBO,GAAnB,CAAuB,CAACC,MAAD,EAASC,KAAT,KAC5C;AACC,0BAAO,QAAC,WAAD;AAAa,QAAA,MAAM,EAAED,MAAM,CAACX,MAA5B;AAAoC,QAAA,KAAK,EAAEW,MAAM,CAACZ,KAAlD;AAAyD,QAAA,IAAI,EAAE,KAAKN,KAAL,CAAWK,IAA1E;AAAgF,QAAA,EAAE,EAAEc,KAApF;AACa,QAAA,aAAa,EAAGC,CAAD,IAAO;AACpC,eAAKT,WAAL,CAAiBQ,KAAjB,EADoC,CACA;;AACpC,eAAKlB,aAAL,CAAmBmB,CAAnB,EAAsB;AAACX,YAAAA,KAAK,EAAE,KAAKA,KAAb;AAAoBL,YAAAA,EAAE,EAAEe;AAAxB,WAAtB,EAFoC,CAEmB;AACvD;AAJC,SAIMA,KAJN;AAAA;AAAA;AAAA;AAAA,cAAP;AAKA,KAPoB,CAArB;AASA,wBACC;AAAK,MAAA,SAAS,EAAE,aAAhB;AAAA,gBACEH;AADF;AAAA;AAAA;AAAA;AAAA,YADD;AAKA;;AAvCF","sourcesContent":["import {Component} from \"react\";\r\n\r\nclass RadioButton extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.onButtonClick = this.props.onButtonClick.bind(this);\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\t// TODO: There's a better way to do this by having the radio button reflect the value of the state. Do it later; not a priority\r\n\t\treturn (\r\n\t\t\t<div className={\"radio-button\"}>\r\n\t\t\t\t<input type={\"radio\"} id={this.props.id} name={this.props.name} value={this.props.label}\r\n\t\t\t\t       checked={this.props.active} onChange={this.props.onButtonClick}/>\r\n\t\t\t\t<label htmlFor={this.props.id}>{this.props.label}</label>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport class RadioGroup extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tbuttons: this.props.buttons,\r\n\t\t\tname: this.props.name\r\n\t\t};\r\n\r\n\t\tthis.onButtonClick = this.props.onButtonClick.bind(this);\r\n\t}\r\n\r\n\tupdateGroup(id)\r\n\t{\r\n\t\t// Update the state of the buttons\r\n\t\tlet oldButtons = this.state.buttons;\r\n\t\tfor(let i = 0; i < oldButtons.length; ++i)\r\n\t\t{\r\n\t\t\toldButtons[i].active = (i === id);\r\n\t\t}\r\n\t\tthis.setState({buttons: oldButtons});\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tlet buttonElements = this.props.buttons.map((button, index) =>\r\n\t\t{\r\n\t\t\treturn <RadioButton active={button.active} label={button.label} name={this.props.name} id={index}\r\n\t\t\t                    onButtonClick={(e) => {\r\n\t\t\t\t\t\t\t\t\tthis.updateGroup(index);            // Internal RadioGroup state update\r\n\t\t\t\t\t\t\t\t\tthis.onButtonClick(e, {state: this.state, id: index}); // External handler call\r\n\t\t\t\t\t\t\t\t}} key={index}/>;\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<div className={\"radio-group\"}>\r\n\t\t\t\t{buttonElements}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}