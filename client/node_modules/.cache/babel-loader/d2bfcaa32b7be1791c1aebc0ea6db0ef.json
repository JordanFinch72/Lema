{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { useD3 } from \"../hooks/useD3\";\nimport languageCountries from \"../supportedLanguages.json\";\nimport countries_data from \"../data/countries/countries.json\";\nimport { AddEditNodeModal } from \"./modals/AddEditNodeModal\";\nimport { ContextMenu } from \"./controls/ContextMenu\";\nimport { AddEditCollectionModal } from \"./modals/AddEditCollectionModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Map(props) {\n  _s();\n\n  console.log(\"[== MAP RENDER ==]\"); // Prop functions\n\n  const openContextMenu = props.openContextMenu.bind(this);\n  const addNode = props.addNode.bind(this);\n  const editNode = props.editNode.bind(this);\n  const removeNode = props.removeNode.bind(this);\n  const openModal = props.openModal.bind(this); // Props\n\n  const collections = props.collections;\n\n  let countries_data = require(\"../data/countries/countries.json\"); // Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\n\n\n  useEffect(() => {\n    let svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\n    let countries = countries_data.features; // Create path (passed as svg attribute later to draw the countries)\n    // TODO: Have it auto-scale as window is dragged\n\n    const width = svg._groups[0][0].clientWidth;\n    const height = svg._groups[0][0].clientHeight;\n    const projection = d3.geoConicConformal().center([8, 52.823]) // Middle of Europe(ish)\n    .scale(1650).translate([width / 2, height / 2]);\n    const path = d3.geoPath().projection(projection); // Draw countries, bind data and handlers\n\n    let countryPaths = svg.append(\"g\").selectAll(\"path\") // svg->g->path\n    .data(countries) // svg->g->path\n    .enter() // svg->g->path (create new nodes per data)\n    .append(\"path\") // svg->g->path (create new nodes per data)\n    .attr(\"fill\", d => determineFillColour(d)).attr(\"stroke\", d => determineStrokeColour(d)).attr(\"stroke-linejoin\", \"round\").attr(\"d\", path).on(\"click\", function (e, d) {// TODO: Possibly same functions as context menu (see about calling this.onContextMenu() to keep things nice and DRY)\n    }).on(\"contextmenu\", function (e, d) {\n      e.preventDefault(); // Prevent browser context menu from opening\n\n      const nodeObject = findNodes(d, \"cognate\");\n      let contextMenuItems = [];\n      console.log(\"Yo\");\n      console.log(nodeObject);\n\n      if (nodeObject) {\n        contextMenuItems = [{\n          text: \"Add sibling node (cognate)\",\n          handler: e => {\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: addNode,\n              collectionIndex: nodeObject.collectionIndex,\n              node: nodeObject.node,\n              language: d.properties.languages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Edit node (cognate)\",\n          handler: e => {\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: editNode,\n              collectionIndex: nodeObject.collectionIndex,\n              wordIndex: nodeObject.wordIndex,\n              node: nodeObject.node,\n              language: nodeObject.node.language\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Remove node (cognate)\",\n          handler: e => {\n            removeNode(e, nodeObject.collectionIndex, nodeObject.wordIndex);\n          }\n        }];\n      } else {\n        // TODO: Context menu for adding to new collection, adding to existing collection\n        contextMenuItems = [{\n          text: \"Add country to collection (cognate)\",\n          handler: e => {\n            let collectionList = collections.filter((collection, i) => {\n              if (collection.type === \"cognate\") {\n                collection.collectionIndex = i;\n                return true;\n              }\n            });\n\n            if (collectionList.length <= 0) {\n              alert(\"You must first create a cognate collection for the node to be added to.\");\n            } else {\n              let node = {\n                word: \"\",\n                language: \"\",\n                parents: []\n              };\n              node.fillColour = \"#FF0000\";\n              node.strokeColour = \"#000000\";\n              node.label = {\n                type: \"word\",\n                customText: \"\",\n                fontColour: \"#000000\",\n                fontSize: null,\n                x: null,\n                y: null\n              };\n              openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n                isNewWord: true,\n                onNodeSubmit: addNode,\n                node: node,\n                type: \"cognate\",\n                collectionList: collectionList,\n                collectionIndex: 0,\n                language: d.properties.languages\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 23\n              }, this));\n            }\n          }\n        }];\n      }\n\n      openContextMenu(e, /*#__PURE__*/_jsxDEV(ContextMenu, {\n        x: e.clientX,\n        y: e.clientY,\n        items: contextMenuItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 24\n      }, this));\n    }).on(\"mouseover\", function (e, d) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"white\") // White can't become transparent\n        element.attr(\"fill\", \"rgb(230,230,230)\");else element.attr(\"fill-opacity\", \"0.65\");\n    }).on(\"mouseout\", function (e, d) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\n        element.attr(\"fill\", \"white\");else element.attr(\"fill-opacity\", \"1\");\n    }); // Cognate labels, journey vertices\n\n    const vertexEdgesG = svg.append(\"g\").classed(\"vertex-edges\", true); // SVG group for edges\n\n    const verticesLabelsG = svg.append(\"g\").classed(\"vertices-labels\", true); // SVG group for vertices AND cognate labels\n\n    countryPaths.each(function (f, i) {\n      let cognateNodeObject = findNodes(f, \"cognate\"); // The first node in any cognate collection that belongs to this country/region\n\n      let journeyNodeObjects = findNodes(f, \"journey\"); // All nodes across all journey collections belonging to this country/region\n\n      if (cognateNodeObject) {\n        /* Cognate visualisations */\n        let node = cognateNodeObject.node;\n        let boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\n\n        let fontSize = node.label.fontSize; // Font size of the label\n\n        let labelText = node.word; // Word by default\n\n        if (node.label.type === \"Country/region\") labelText = f.properties.name_long;else if (node.label.type === \"Custom text\") labelText = node.label.customText;else if (node.label.type === \"Language\") labelText = node.language; // TODO: Initial scale factor depending on size of country (to stop oversized text from escaping country)\n\n        if (labelText.length !== 0 && !node.label.fontSize) // Only scale if font size hasn't been set by user\n          {\n            if (boundingBox.width < labelText.length * 16) fontSize = boundingBox.width / 8 + \"px\";\n          } // Append labels to paths, with co-ordinates according to feature's position on map\n\n\n        let x = node.label.x === null ? boundingBox.x + boundingBox.width / 4 : node.label.x;\n        let y = node.label.y === null ? boundingBox.y + boundingBox.height / 2 : node.label.y;\n        let label = verticesLabelsG.append(\"text\").attr(\"x\", x).attr(\"y\", y).attr(\"fill\", node.label.fontColour).style(\"font-size\", fontSize).text(labelText); // Dragging/resizing handlers\n\n        let startXOffset,\n            startYOffset,\n            resizing = false,\n            startX,\n            startY,\n            startSize,\n            newSize;\n        label.on(\"mousemove\", e => {\n          let labelX = parseFloat(label.attr(\"x\")),\n              labelY = parseFloat(label.attr(\"y\"));\n          let mouseX = e.layerX,\n              mouseY = e.layerY; // Determine corner of text's box\n\n          const southEastCorner = {\n            xStart: labelX + label.node().getBBox().width - 5,\n            xEnd: labelX + label.node().getBBox().width + 15,\n            yStart: labelY,\n            yEnd: labelY + 10\n          }; // Check corner\n\n          if (mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd && mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd) {\n            label.style(\"cursor\", \"se-resize\");\n          } else label.style(\"cursor\", \"grab\");\n        }).call(d3.drag().on(\"start\", e => {\n          let labelX = parseFloat(label.attr(\"x\")),\n              labelY = parseFloat(label.attr(\"y\"));\n          let mouseX = e.x,\n              mouseY = e.y;\n          startXOffset = mouseX - labelX;\n          startYOffset = mouseY - labelY; // Determine corner of text's box\n\n          const southEastCorner = {\n            xStart: labelX + label.node().getBBox().width - 5,\n            xEnd: labelX + label.node().getBBox().width + 15,\n            yStart: labelY,\n            yEnd: labelY + 10\n          }; // Check corner\n\n          if (mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd && mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd) {\n            resizing = true;\n            startX = mouseX;\n            startY = mouseY;\n            startSize = parseFloat(label.style(\"font-size\"));\n          }\n        }).on(\"drag\", e => {\n          let mouseX = e.x,\n              mouseY = e.y;\n\n          if (resizing) {\n            // Resize the label\n            if (mouseX >= startX && mouseY >= startY || mouseX <= startX && mouseY <= startY) {\n              let deltaX = mouseX - startX;\n              newSize = startSize + deltaX / 10;\n              if (newSize < 5) newSize = 5; // Floor of 5px to prevent it shrinking into nothingness\n\n              label.style(\"font-size\", newSize + \"px\"); // Only visually, not updating state itself\n            }\n          } else {\n            // Move the label\n            x = mouseX - startXOffset;\n            y = mouseY - startYOffset;\n            newSize = node.label.fontSize;\n            label.attr(\"x\", x).attr(\"y\", y); // Only visually\n          }\n        }).on(\"end\", () => {\n          resizing = false;\n          node.label.x = x;\n          node.label.y = y;\n          node.label.fontSize = newSize;\n          editNode(null, cognateNodeObject.collectionIndex, node);\n        }));\n      }\n\n      if (journeyNodeObjects) {\n        /* Journey visualisations */\n        // Loop through all journey nodes inside this country/region\n        let xOffset = 0,\n            yOffset = 0,\n            prevDiameter = 0;\n        let startEdgeXOffset = 0,\n            startEdgeYOffset = 0,\n            endEdgeXOffset = 0,\n            endEdgeYOffset = 0; // Centre by default\n\n        for (let i = 0; i < journeyNodeObjects.length; ++i) {\n          let journeyNodeObject = journeyNodeObjects[i];\n          let node = journeyNodeObject.node;\n          let boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\n\n          let radius = node.vertex.radius || 50; // Inherit radius (determined later if null)\n\n          let fontSize = node.vertex.fontSize;\n          let vertexText = node.word; // Word by default\n\n          if (node.vertex.type === \"Country region\") vertexText = f.properties.name_long;else if (node.vertex.type === \"Custom text\") vertexText = node.vertex.customText;else if (node.vertex.type === \"Language\") vertexText = node.language; // Initial co-ordinates\n          // TODO: Vertex xOffset, yOffset attributes in country/region data\n\n          let vertexX = node.vertex.x === null ? boundingBox.x + boundingBox.width / 2 : node.vertex.x;\n          let vertexY = node.vertex.y === null ? boundingBox.y + boundingBox.height / 2 : node.vertex.y; // If vertex's default position would exit country/regions' bounds, push it down\n\n          if (!node.vertex.x && !node.vertex.y) {\n            if (vertexX + xOffset * 2 > boundingBox.x + boundingBox.width) {\n              yOffset += prevDiameter;\n              xOffset = 0;\n            } else // Otherwise, increase the offset by the previous vertex's diameter\n              {\n                xOffset += prevDiameter;\n              }\n\n            vertexY += yOffset;\n            vertexX += xOffset;\n          } // Set initial vertex position // TODO: Do it for label, too\n\n\n          if (!node.vertex.x || !node.vertex.y) {\n            node.vertex.x = vertexX;\n            node.vertex.y = vertexY;\n            return editNode(null, journeyNodeObject.collectionIndex, node);\n          } // Prepare text element. This is required to calculate circle radius based on text element's width\n\n\n          let vertexG = verticesLabelsG.append(\"g\"); // Group required to have circle and text together\n\n          let preparedText = vertexG.append(\"text\").attr(\"x\", vertexX).attr(\"y\", vertexY).attr(\"fill\", node.vertex.fontColour).attr(\"text-anchor\", \"middle\") // Centre of circle\n          .attr(\"alignment-baseline\", \"middle\") // Centre of circle\n          .style(\"font-size\", \"16px\").text(vertexText); // Determine initial radius of circle\n          // TODO: Initial scale factor depending on size of country (to stop oversized text from escaping country)\n\n          let innerTextWidth = preparedText.node().getBBox().width;\n\n          if (vertexText.length !== 0 && !node.vertex.radius) // Only scale if font size hasn't been set by user\n            {\n              radius = boundingBox.width / 8;\n              if (radius < innerTextWidth) radius = innerTextWidth / 2 + 5; // Convert text \"diameter\" to radius, add padding\n            }\n\n          preparedText.remove(); // Remove prepared text element. It will not show if appended before the circle\n          // Place edge between this node and its parents\n\n          let markerSelectString = \"\"; // String to select markers so they can move whilst being resized\n\n          if (node.parents) {\n            // Create edge for each parent, originating from this node\n            for (let i = 0; i < node.parents.length; ++i) {\n              let parentNode = node.parents[i]; // Fingerprint references for marker IDs and data-start/data-end attributes\n\n              const parentRef = journeyNodeObject.collectionIndex + \"|\" + parentNode.arrayIndex;\n              const nodeRef = journeyNodeObject.collectionIndex + \"|\" + node.arrayIndex; // Compute arrowheads\n\n              if (node.vertex.edgeArrowheadEnabled) {\n                vertexEdgesG.append(\"defs\").append(\"marker\").attr(\"id\", \"arrow\" + parentRef + nodeRef).attr(\"markerWidth\", 5).attr(\"markerHeight\", 4).attr(\"refX\", radius / 2 + 5).attr(\"refY\", 2).attr(\"orient\", \"auto\").append(\"polygon\").attr(\"points\", \"0 0, 5 2, 0 4\").attr(\"fill\", node.vertex.edgeArrowheadFillColour).attr(\"stroke\", node.vertex.edgeArrowheadStrokeColour).attr(\"id\", nodeRef);\n                markerSelectString += \"marker[id=\\\"arrow\" + parentRef + nodeRef + \"\\\"], \";\n              } // Determine edge start position\n\n\n              if (node.vertex.edgeStart === \"top\") startEdgeYOffset = -radius;else if (node.vertex.edgeStart === \"right\") startEdgeXOffset = radius;else if (node.vertex.edgeStart === \"bottom\") startEdgeYOffset = radius;else if (node.vertex.edgeStart === \"left\") startEdgeXOffset = -radius;else if (node.vertex.edgeStart === \"centre\") {\n                startEdgeXOffset = 0;\n                startEdgeYOffset = 0;\n              } // Determine edge end position\n\n              if (node.vertex.edgeEnd === \"top\") endEdgeYOffset = -radius;else if (node.vertex.edgeEnd === \"right\") endEdgeXOffset = radius;else if (node.vertex.edgeEnd === \"bottom\") endEdgeYOffset = radius;else if (node.vertex.edgeEnd === \"left\") endEdgeXOffset = -radius;else if (node.vertex.edgeStart === \"centre\") {\n                endEdgeXOffset = 0;\n                endEdgeYOffset = 0;\n              } // Place edge\n\n              const edge = vertexEdgesG.append(\"line\").attr(\"x1\", parentNode.vertex.x + startEdgeXOffset).attr(\"y1\", parentNode.vertex.y + startEdgeYOffset).attr(\"x2\", node.vertex.x + endEdgeXOffset).attr(\"y2\", node.vertex.y + endEdgeYOffset).attr(\"stroke\", node.vertex.edgeStrokeColour).attr(\"stroke-width\", node.vertex.edgeStrokeWidth).attr(\"data-start\", parentRef) // For finding attached edges later\n              .attr(\"data-end\", nodeRef);\n              if (node.vertex.edgeArrowheadEnabled) edge.attr(\"marker-end\", \"url(#arrow\" + parentRef + nodeRef + \")\");\n            }\n          }\n\n          let vertex = vertexG.append(\"circle\").attr(\"cx\", vertexX).attr(\"cy\", vertexY).attr(\"r\", radius + \"px\").attr(\"stroke\", node.vertex.strokeColour).attr(\"fill\", node.vertex.fillColour);\n          let text = vertexG.append(\"text\").attr(\"x\", vertexX).attr(\"y\", vertexY).attr(\"fill\", node.vertex.fontColour).attr(\"text-anchor\", \"middle\") // Centre of circle\n          .attr(\"alignment-baseline\", \"middle\") // Centre of circle\n          .style(\"font-size\", fontSize).text(vertexText);\n          prevDiameter = radius * 2; // Dragging/resizing handlers\n\n          let startXOffset,\n              startYOffset,\n              resizing = false,\n              startX,\n              startY,\n              startRadius,\n              newVertexRadius,\n              newLabelSize;\n          vertex.on(\"mousemove\", e => {\n            let vertexX = parseFloat(vertex.attr(\"cx\")),\n                vertexY = parseFloat(vertex.attr(\"cy\"));\n            let mouseX = e.layerX,\n                mouseY = e.layerY; // Dimensions of bottom-right corner\n\n            let squareArea = vertex.node().getBBox().width * vertex.node().getBBox().height;\n            let circleArea = Math.PI * Math.pow(parseFloat(vertex.attr(\"r\")), 2);\n            let cornerWidth = (squareArea - circleArea) / 4 / 2; // Extract corners, divide by four, width and height are equal length (/2)\n            // Determine corner of circle's box\n\n            const southEastCorner = {\n              xStart: vertexX,\n              xEnd: vertexX + cornerWidth,\n              yStart: vertexY,\n              yEnd: vertexY + cornerWidth\n            }; // Check corner\n\n            if (mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd && mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd) {\n              vertex.style(\"cursor\", \"se-resize\");\n            } else vertex.style(\"cursor\", \"grab\");\n          }).call(d3.drag().on(\"start\", e => {\n            let vertexX = parseFloat(vertex.attr(\"cx\")),\n                vertexY = parseFloat(vertex.attr(\"cy\"));\n            let mouseX = e.x,\n                mouseY = e.y;\n            startX = vertexX;\n            startY = vertexY;\n            startXOffset = mouseX - vertexX;\n            startYOffset = mouseY - vertexY; // Dimensions of bottom-right corner\n\n            let squareArea = vertex.node().getBBox().width * vertex.node().getBBox().height;\n            let circleArea = Math.PI * Math.pow(parseFloat(vertex.attr(\"r\")), 2);\n            let cornerWidth = (squareArea - circleArea) / 4 / 2; // Extract corners, divide by four, width and height are equal length (/2)\n            // Determine corner of circle's box\n\n            const southEastCorner = {\n              xStart: vertexX,\n              xEnd: vertexX + cornerWidth,\n              yStart: vertexY,\n              yEnd: vertexY + cornerWidth\n            }; // Check corner\n\n            if (mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd && mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd) {\n              resizing = true;\n              startX = mouseX;\n              startY = mouseY;\n              startRadius = parseFloat(vertex.attr(\"r\"));\n            }\n          }).on(\"drag\", e => {\n            let mouseX = e.x,\n                mouseY = e.y;\n\n            if (resizing) {\n              if (mouseX >= startX && mouseY >= startY || mouseX <= startX && mouseY <= startY) {\n                // Resize the vertex\n                let deltaX = mouseX - startX;\n                newVertexRadius = startRadius + deltaX / 10;\n                if (newVertexRadius < 10) newVertexRadius = 10; // Floor of 10px to prevent it shrinking into nothingness\n\n                vertex.attr(\"r\", newVertexRadius + \"px\"); // Only visually, not updating state itself\n                // Resize the vertex's text\n\n                const paddingOffset = 10;\n                newLabelSize = (newVertexRadius * 2 - paddingOffset) / innerTextWidth * 100 + \"%\";\n                text.style(\"font-size\", newLabelSize); // Move arrowheads as it is resized\n\n                if (markerSelectString) {\n                  let selectString = markerSelectString.slice(0, markerSelectString.length - 2); // Trim \", \" at the end of string\n\n                  d3.selectAll(selectString).attr(\"refX\", newVertexRadius / 2 + 5);\n                }\n              }\n            } else {\n              // Move the vertex\n              vertexX = mouseX - startXOffset;\n              vertexY = mouseY - startYOffset;\n              vertex.attr(\"cx\", vertexX).attr(\"cy\", vertexY); // Only visually\n\n              text.attr(\"x\", vertexX).attr(\"y\", vertexY); // Only visually\n              // Move the edges\n\n              let dataEnd = journeyNodeObject.collectionIndex + \"|\" + journeyNodeObject.node.arrayIndex;\n              let attachedEdges = d3.selectAll(\"line[data-start=\\\"\" + dataEnd + \"\\\"]\"); // Find all edges that start on this node\n\n              let attachedEdges2 = d3.selectAll(\"line[data-end=\\\"\" + dataEnd + \"\\\"]\"); // Find all edges that end on this node\n\n              if (attachedEdges) {\n                attachedEdges.attr(\"x1\", vertexX + startEdgeXOffset).attr(\"y1\", vertexY + startEdgeYOffset);\n              }\n\n              if (attachedEdges2) {\n                attachedEdges2.attr(\"x2\", vertexX + startEdgeXOffset).attr(\"y2\", vertexY + startEdgeYOffset);\n              }\n            }\n          }).on(\"end\", () => {\n            resizing = false;\n            node.vertex.x = vertexX;\n            node.vertex.y = vertexY;\n            node.vertex.radius = newVertexRadius || node.vertex.radius;\n            node.vertex.fontSize = newLabelSize || node.vertex.fontSize;\n            editNode(null, journeyNodeObject.collectionIndex, node);\n          }));\n        }\n      }\n    }); // Graticules (lines on the map)\n\n    const g = svg.append(\"g\");\n    const graticules = g.classed(\"graticules\", true).append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(0,0,0,.2)\").attr(\"d\", path(d3.geoGraticule()()));\n    /*\r\n    svg.call(d3.zoom().on(\"zoom\", function () {\r\n    \tz = d3.event.transform.k;\r\n    \tdraw(); // TODO: Contain above render code into draw() function\r\n    }));\r\n     */\n    // Clean-up function (kills all SVG elements upon unmounting)\n\n    return function cleanup() {\n      svg.selectAll(\"g\").remove();\n    };\n  });\n  /**\r\n   * Finds all nodes in all collections of specified type where the node's language is within the feature's language array\r\n   * @param {*} d The dataset feature (country/region) currently being rendered\r\n   * @param {string} type The type of collection to search for (\"journey\" or \"cognate\")\r\n   */\n\n  function findNodes(d, type) {\n    // Search collections\n    if (type === \"cognate\") {\n      for (let c = 0; c < collections.length; ++c) {\n        let collection = collections[c];\n\n        if (collection.type === \"cognate\") {\n          for (let n = 0; n < collection.words.length; ++n) {\n            let childNode = collection.words[n];\n\n            if (d.properties.languages.includes(childNode.language)) {\n              return {\n                node: childNode,\n                collectionIndex: c,\n                wordIndex: n\n              }; // TODO: Currently only returns first cognate\n            }\n          }\n        }\n      }\n    } else if (type === \"journey\") {\n      let countryNodes = [];\n\n      for (let c = 0; c < collections.length; ++c) // Search for all nodes in all collections for this country/region\n      {\n        let collection = collections[c];\n\n        if (collection.type === \"journey\") {\n          for (let n = 0; n < collection.words.length; ++n) {\n            let childNode = collection.words[n];\n            if (d.properties.languages.includes(childNode.language)) countryNodes.push({\n              node: childNode,\n              collectionIndex: c\n            });\n          }\n        }\n      }\n\n      return countryNodes;\n    }\n  }\n  /**\r\n   * Determines country SVG fill colour according to countries' language(s) and the specified colour of that language's cognate node(s).\r\n   * @param d Data attached to DOM element via D3 (i.e. the country).\r\n   * @returns {string} The fill colour, as specified by user in Collection.jsx.\r\n   */\n\n\n  function determineFillColour(d) {\n    const nodeObject = findNodes(d, \"cognate\"); // Find node in collections\n\n    if (nodeObject) return nodeObject.node.fillColour; // Country has associated collection node? Return the colour\n    else return \"white\"; // Otherwise, return white by default for all countries with no associated data\n  }\n  /**\r\n   * Determines country SVG stroke colour according to countries' language(s) and the specified colour of that language's cognate node(s).\r\n   * @param d Data attached to DOM element via D3 (i.e. the country).\r\n   * @returns {string} The fill colour, as specified by user in Collection.jsx.\r\n   */\n\n\n  function determineStrokeColour(d) {\n    const nodeObject = findNodes(d, \"cognate\"); // Find node in collections\n\n    if (nodeObject) return nodeObject.node.strokeColour; // Country has associated collection node? Return the colour\n    else return \"black\"; // Otherwise, return black by default for all countries with no associated data\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      /*ref={ref}*/\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        margin: 0,\n        backgroundColor: \"#3d73ab\"\n        /* The sea */\n\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 602,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Map, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Map.jsx"],"names":["React","useEffect","useState","d3","useD3","languageCountries","countries_data","AddEditNodeModal","ContextMenu","AddEditCollectionModal","Map","props","console","log","openContextMenu","bind","addNode","editNode","removeNode","openModal","collections","require","svg","selectAll","countries","features","width","_groups","clientWidth","height","clientHeight","projection","geoConicConformal","center","scale","translate","path","geoPath","countryPaths","append","data","enter","attr","d","determineFillColour","determineStrokeColour","on","e","preventDefault","nodeObject","findNodes","contextMenuItems","text","handler","collectionIndex","node","properties","languages","wordIndex","language","collectionList","filter","collection","i","type","length","alert","word","parents","fillColour","strokeColour","label","customText","fontColour","fontSize","x","y","clientX","clientY","element","select","vertexEdgesG","classed","verticesLabelsG","each","f","cognateNodeObject","journeyNodeObjects","boundingBox","getBBox","labelText","name_long","style","startXOffset","startYOffset","resizing","startX","startY","startSize","newSize","labelX","parseFloat","labelY","mouseX","layerX","mouseY","layerY","southEastCorner","xStart","xEnd","yStart","yEnd","call","drag","deltaX","xOffset","yOffset","prevDiameter","startEdgeXOffset","startEdgeYOffset","endEdgeXOffset","endEdgeYOffset","journeyNodeObject","radius","vertex","vertexText","vertexX","vertexY","vertexG","preparedText","innerTextWidth","remove","markerSelectString","parentNode","parentRef","arrayIndex","nodeRef","edgeArrowheadEnabled","edgeArrowheadFillColour","edgeArrowheadStrokeColour","edgeStart","edgeEnd","edge","edgeStrokeColour","edgeStrokeWidth","startRadius","newVertexRadius","newLabelSize","squareArea","circleArea","Math","PI","pow","cornerWidth","paddingOffset","selectString","slice","dataEnd","attachedEdges","attachedEdges2","g","graticules","geoGraticule","cleanup","c","n","words","childNode","includes","countryNodes","push","margin","backgroundColor"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {useD3} from \"../hooks/useD3\";\r\nimport languageCountries from \"../supportedLanguages.json\";\r\nimport countries_data from \"../data/countries/countries.json\";\r\nimport {AddEditNodeModal} from \"./modals/AddEditNodeModal\";\r\nimport {ContextMenu} from \"./controls/ContextMenu\";\r\nimport {AddEditCollectionModal} from \"./modals/AddEditCollectionModal\";\r\n\r\nexport function Map(props)\r\n{\r\n\tconsole.log(\"[== MAP RENDER ==]\");\r\n\r\n\t// Prop functions\r\n\tconst openContextMenu = props.openContextMenu.bind(this);\r\n\tconst addNode = props.addNode.bind(this);\r\n\tconst editNode = props.editNode.bind(this);\r\n\tconst removeNode = props.removeNode.bind(this);\r\n\tconst openModal = props.openModal.bind(this);\r\n\r\n\t// Props\r\n\tconst collections = props.collections;\r\n\r\n\tlet countries_data = require(\"../data/countries/countries.json\");\r\n\r\n\t// Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\r\n\tuseEffect(() => {\r\n\t\tlet svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\r\n\t\tlet countries = countries_data.features;\r\n\r\n\t\t// Create path (passed as svg attribute later to draw the countries)\r\n\t\t// TODO: Have it auto-scale as window is dragged\r\n\t\tconst width = svg._groups[0][0].clientWidth;\r\n\t\tconst height = svg._groups[0][0].clientHeight;\r\n\t\tconst projection = d3.geoConicConformal()\r\n\t\t\t.center([8, 52.823]) // Middle of Europe(ish)\r\n\t\t\t.scale(1650)\r\n\t\t\t.translate([width/2, height/2]);\r\n\t\tconst path = d3.geoPath().projection(projection);\r\n\r\n\t\t// Draw countries, bind data and handlers\r\n\t\tlet countryPaths = svg.append(\"g\")\r\n\t\t\t.selectAll(\"path\") // svg->g->path\r\n\t\t\t.data(countries)         // svg->g->path\r\n\t\t\t.enter()                 // svg->g->path (create new nodes per data)\r\n\t\t\t.append(\"path\")          // svg->g->path (create new nodes per data)\r\n\t\t\t.attr(\"fill\", (d) => determineFillColour(d))\r\n\t\t\t.attr(\"stroke\", (d) => determineStrokeColour(d))\r\n\t\t\t.attr(\"stroke-linejoin\", \"round\")\r\n\t\t\t.attr(\"d\", path)\r\n\t\t\t.on(\"click\", function(e, d){\r\n\t\t\t\t// TODO: Possibly same functions as context menu (see about calling this.onContextMenu() to keep things nice and DRY)\r\n\t\t\t})\r\n\t\t\t.on(\"contextmenu\", function(e, d){\r\n\t\t\t\te.preventDefault(); // Prevent browser context menu from opening\r\n\t\t\t\tconst nodeObject = findNodes(d, \"cognate\");\r\n\t\t\t\tlet contextMenuItems = [];\r\n\r\n\t\t\t\tconsole.log(\"Yo\");\r\n\t\t\t\tconsole.log(nodeObject);\r\n\r\n\t\t\t\tif(nodeObject)\r\n\t\t\t\t{\r\n\t\t\t\t\tcontextMenuItems = [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add sibling node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={addNode} collectionIndex={nodeObject.collectionIndex} node={nodeObject.node} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Edit node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={editNode} collectionIndex={nodeObject.collectionIndex} wordIndex={nodeObject.wordIndex}\r\n\t\t\t\t\t\t\t\t                               node={nodeObject.node} language={nodeObject.node.language} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Remove node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tremoveNode(e, nodeObject.collectionIndex, nodeObject.wordIndex);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t];\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// TODO: Context menu for adding to new collection, adding to existing collection\r\n\t\t\t\t\tcontextMenuItems = [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add country to collection (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tlet collectionList = collections.filter((collection, i) => {\r\n\t\t\t\t\t\t\t\t\tif(collection.type === \"cognate\")\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcollection.collectionIndex = i;\r\n\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t\tif(collectionList.length <= 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\talert(\"You must first create a cognate collection for the node to be added to.\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tlet node = {word: \"\", language: \"\", parents: []};\r\n\t\t\t\t\t\t\t\t\tnode.fillColour = \"#FF0000\"; node.strokeColour = \"#000000\";\r\n\t\t\t\t\t\t\t\t\tnode.label = {type: \"word\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null};\r\n\t\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal isNewWord={true} onNodeSubmit={addNode} node={node} type={\"cognate\"} collectionList={collectionList} collectionIndex={0} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t\topenContextMenu(e, <ContextMenu x={e.clientX} y={e.clientY} items={contextMenuItems} />);\r\n\r\n\t\t\t})\r\n\t\t\t.on(\"mouseover\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"white\") // White can't become transparent\r\n\t\t\t\t\telement.attr(\"fill\", \"rgb(230,230,230)\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"0.65\");\r\n\t\t\t})\r\n\t\t\t.on(\"mouseout\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\r\n\t\t\t\t\telement.attr(\"fill\", \"white\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"1\");\r\n\t\t\t});\r\n\r\n\t\t// Cognate labels, journey vertices\r\n\t\tconst vertexEdgesG = svg.append(\"g\").classed(\"vertex-edges\", true); // SVG group for edges\r\n\t\tconst verticesLabelsG = svg.append(\"g\").classed(\"vertices-labels\", true); // SVG group for vertices AND cognate labels\r\n\t\tcountryPaths.each(function(f, i) {\r\n\t\t\tlet cognateNodeObject = findNodes(f, \"cognate\");  // The first node in any cognate collection that belongs to this country/region\r\n\t\t\tlet journeyNodeObjects = findNodes(f, \"journey\"); // All nodes across all journey collections belonging to this country/region\r\n\t\t\tif(cognateNodeObject)\r\n\t\t\t{\r\n\t\t\t\t/* Cognate visualisations */\r\n\t\t\t\tlet node = cognateNodeObject.node;\r\n\t\t\t\tlet boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\r\n\t\t\t\tlet fontSize = node.label.fontSize;                 // Font size of the label\r\n\t\t\t\tlet labelText = node.word;                          // Word by default\r\n\t\t\t\tif(node.label.type === \"Country/region\") labelText = f.properties.name_long;\r\n\t\t\t\telse if(node.label.type === \"Custom text\") labelText = node.label.customText;\r\n\t\t\t\telse if(node.label.type === \"Language\") labelText = node.language;\r\n\r\n\t\t\t\t// TODO: Initial scale factor depending on size of country (to stop oversized text from escaping country)\r\n\t\t\t\tif(labelText.length !== 0 && !node.label.fontSize) // Only scale if font size hasn't been set by user\r\n\t\t\t\t{\r\n\t\t\t\t\tif(boundingBox.width < (labelText.length * 16))\r\n\t\t\t\t\t\tfontSize = boundingBox.width/8 + \"px\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Append labels to paths, with co-ordinates according to feature's position on map\r\n\t\t\t\tlet x = (node.label.x === null) ? (boundingBox.x + boundingBox.width/4) : node.label.x;\r\n\t\t\t\tlet y = (node.label.y === null) ? (boundingBox.y + boundingBox.height/2) : node.label.y;\r\n\t\t\t\tlet label = verticesLabelsG.append(\"text\")\r\n\t\t\t\t\t.attr(\"x\", x).attr(\"y\", y)\r\n\t\t\t\t\t.attr(\"fill\", node.label.fontColour)\r\n\t\t\t\t\t.style(\"font-size\", fontSize)\r\n\t\t\t\t\t.text(labelText);\r\n\r\n\t\t\t\t// Dragging/resizing handlers\r\n\t\t\t\tlet startXOffset, startYOffset, resizing = false, startX, startY, startSize, newSize;\r\n\t\t\t\tlabel\r\n\t\t\t\t\t.on(\"mousemove\", (e) => {\r\n\t\t\t\t\t\tlet labelX = parseFloat(label.attr(\"x\")), labelY = parseFloat(label.attr(\"y\"));\r\n\t\t\t\t\t\tlet mouseX = e.layerX, mouseY = e.layerY;\r\n\r\n\t\t\t\t\t\t// Determine corner of text's box\r\n\t\t\t\t\t\tconst southEastCorner = {\r\n\t\t\t\t\t\t\txStart: labelX + label.node().getBBox().width - 5,\r\n\t\t\t\t\t\t\txEnd: labelX + label.node().getBBox().width + 15,\r\n\t\t\t\t\t\t\tyStart: labelY,\r\n\t\t\t\t\t\t\tyEnd: labelY + 10\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Check corner\r\n\t\t\t\t\t\tif(mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd\r\n\t\t\t\t\t\t\t&& mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlabel.style(\"cursor\", \"se-resize\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tlabel.style(\"cursor\", \"grab\");\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.call(d3.drag()\r\n\t\t\t\t\t\t.on(\"start\", (e) => {\r\n\t\t\t\t\t\t\tlet labelX = parseFloat(label.attr(\"x\")), labelY = parseFloat(label.attr(\"y\"));\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tstartXOffset = mouseX - labelX;\r\n\t\t\t\t\t\t\tstartYOffset = mouseY - labelY;\r\n\r\n\t\t\t\t\t\t\t// Determine corner of text's box\r\n\t\t\t\t\t\t\tconst southEastCorner = {\r\n\t\t\t\t\t\t\t\txStart: labelX + label.node().getBBox().width - 5,\r\n\t\t\t\t\t\t\t\txEnd: labelX + label.node().getBBox().width + 15,\r\n\t\t\t\t\t\t\t\tyStart: labelY,\r\n\t\t\t\t\t\t\t\tyEnd: labelY + 10\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Check corner\r\n\t\t\t\t\t\t\tif(mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd\r\n\t\t\t\t\t\t\t\t&& mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tresizing = true;\r\n\t\t\t\t\t\t\t\tstartX = mouseX;\r\n\t\t\t\t\t\t\t\tstartY = mouseY;\r\n\t\t\t\t\t\t\t\tstartSize = parseFloat(label.style(\"font-size\"));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"drag\", (e) => {\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tif(resizing)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Resize the label\r\n\t\t\t\t\t\t\t\tif(mouseX >= startX && mouseY >= startY || mouseX <= startX && mouseY <= startY)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tlet deltaX = mouseX - startX;\r\n\t\t\t\t\t\t\t\t\tnewSize = startSize + (deltaX / 10);\r\n\t\t\t\t\t\t\t\t\tif(newSize < 5) newSize = 5; // Floor of 5px to prevent it shrinking into nothingness\r\n\t\t\t\t\t\t\t\t\tlabel.style(\"font-size\", newSize + \"px\"); // Only visually, not updating state itself\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Move the label\r\n\t\t\t\t\t\t\t\tx = mouseX - startXOffset;\r\n\t\t\t\t\t\t\t\ty = mouseY - startYOffset;\r\n\t\t\t\t\t\t\t\tnewSize = node.label.fontSize;\r\n\t\t\t\t\t\t\t\tlabel.attr(\"x\", x).attr(\"y\", y); // Only visually\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"end\", () => {\r\n\t\t\t\t\t\t\tresizing = false;\r\n\t\t\t\t\t\t\tnode.label.x = x; node.label.y = y; node.label.fontSize = newSize;\r\n\t\t\t\t\t\t\teditNode(null, cognateNodeObject.collectionIndex, node);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tif(journeyNodeObjects)\r\n\t\t\t{\r\n\t\t\t\t/* Journey visualisations */\r\n\r\n\t\t\t\t// Loop through all journey nodes inside this country/region\r\n\t\t\t\tlet xOffset = 0, yOffset = 0, prevDiameter = 0;\r\n\t\t\t\tlet startEdgeXOffset = 0, startEdgeYOffset = 0, endEdgeXOffset = 0, endEdgeYOffset = 0; // Centre by default\r\n\t\t\t\tfor(let i = 0; i < journeyNodeObjects.length; ++i)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet journeyNodeObject = journeyNodeObjects[i];\r\n\t\t\t\t\tlet node = journeyNodeObject.node;\r\n\t\t\t\t\tlet boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\r\n\t\t\t\t\tlet radius = node.vertex.radius || 50;              // Inherit radius (determined later if null)\r\n\t\t\t\t\tlet fontSize = node.vertex.fontSize;\r\n\t\t\t\t\tlet vertexText = node.word;                         // Word by default\r\n\t\t\t\t\tif(node.vertex.type === \"Country region\") vertexText = f.properties.name_long;\r\n\t\t\t\t\telse if(node.vertex.type === \"Custom text\") vertexText = node.vertex.customText;\r\n\t\t\t\t\telse if(node.vertex.type === \"Language\") vertexText = node.language;\r\n\r\n\t\t\t\t\t// Initial co-ordinates\r\n\t\t\t\t\t// TODO: Vertex xOffset, yOffset attributes in country/region data\r\n\t\t\t\t\tlet vertexX = (node.vertex.x === null) ? (boundingBox.x + boundingBox.width/2) : node.vertex.x;\r\n\t\t\t\t\tlet vertexY = (node.vertex.y === null) ? (boundingBox.y + boundingBox.height/2) : node.vertex.y;\r\n\r\n\t\t\t\t\t// If vertex's default position would exit country/regions' bounds, push it down\r\n\t\t\t\t\tif(!node.vertex.x && !node.vertex.y)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((vertexX + xOffset*2) > (boundingBox.x + boundingBox.width))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tyOffset += prevDiameter;\r\n\t\t\t\t\t\t\txOffset = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse // Otherwise, increase the offset by the previous vertex's diameter\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\txOffset += prevDiameter;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvertexY += yOffset;\r\n\t\t\t\t\t\tvertexX += xOffset;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Set initial vertex position // TODO: Do it for label, too\r\n\t\t\t\t\tif(!node.vertex.x || !node.vertex.y)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnode.vertex.x = vertexX; node.vertex.y = vertexY;\r\n\t\t\t\t\t\treturn editNode(null, journeyNodeObject.collectionIndex, node);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Prepare text element. This is required to calculate circle radius based on text element's width\r\n\t\t\t\t\tlet vertexG = verticesLabelsG.append(\"g\"); // Group required to have circle and text together\r\n\t\t\t\t\tlet preparedText = vertexG.append(\"text\")\r\n\t\t\t\t\t\t.attr(\"x\", vertexX).attr(\"y\", vertexY)\r\n\t\t\t\t\t\t.attr(\"fill\", node.vertex.fontColour)\r\n\t\t\t\t\t\t.attr(\"text-anchor\", \"middle\")        // Centre of circle\r\n\t\t\t\t\t\t.attr(\"alignment-baseline\", \"middle\") // Centre of circle\r\n\t\t\t\t\t\t.style(\"font-size\", \"16px\")\r\n\t\t\t\t\t\t.text(vertexText);\r\n\r\n\t\t\t\t\t// Determine initial radius of circle\r\n\t\t\t\t\t// TODO: Initial scale factor depending on size of country (to stop oversized text from escaping country)\r\n\t\t\t\t\tlet innerTextWidth = preparedText.node().getBBox().width;\r\n\t\t\t\t\tif(vertexText.length !== 0 && !node.vertex.radius) // Only scale if font size hasn't been set by user\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tradius = boundingBox.width/8;\r\n\t\t\t\t\t\tif(radius < innerTextWidth) radius = innerTextWidth/2 + 5; // Convert text \"diameter\" to radius, add padding\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpreparedText.remove(); // Remove prepared text element. It will not show if appended before the circle\r\n\r\n\t\t\t\t\t// Place edge between this node and its parents\r\n\t\t\t\t\tlet markerSelectString = \"\"; // String to select markers so they can move whilst being resized\r\n\t\t\t\t\tif(node.parents)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Create edge for each parent, originating from this node\r\n\t\t\t\t\t\tfor(let i = 0; i < node.parents.length; ++i)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet parentNode = node.parents[i];\r\n\r\n\t\t\t\t\t\t\t// Fingerprint references for marker IDs and data-start/data-end attributes\r\n\t\t\t\t\t\t\tconst parentRef = journeyNodeObject.collectionIndex + \"|\" + parentNode.arrayIndex;\r\n\t\t\t\t\t\t\tconst nodeRef = journeyNodeObject.collectionIndex + \"|\" + node.arrayIndex;\r\n\r\n\t\t\t\t\t\t\t// Compute arrowheads\r\n\t\t\t\t\t\t\tif(node.vertex.edgeArrowheadEnabled)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvertexEdgesG.append(\"defs\")\r\n\t\t\t\t\t\t\t\t\t.append(\"marker\")\r\n\t\t\t\t\t\t\t\t\t.attr(\"id\", \"arrow\" + parentRef + nodeRef)\r\n\t\t\t\t\t\t\t\t\t.attr(\"markerWidth\", 5).attr(\"markerHeight\", 4)\r\n\t\t\t\t\t\t\t\t\t.attr(\"refX\", radius/2 + 5).attr(\"refY\", 2)\r\n\t\t\t\t\t\t\t\t\t.attr(\"orient\", \"auto\")\r\n\t\t\t\t\t\t\t\t\t.append(\"polygon\")\r\n\t\t\t\t\t\t\t\t\t.attr(\"points\", \"0 0, 5 2, 0 4\")\r\n\t\t\t\t\t\t\t\t\t.attr(\"fill\", node.vertex.edgeArrowheadFillColour)\r\n\t\t\t\t\t\t\t\t\t.attr(\"stroke\", node.vertex.edgeArrowheadStrokeColour)\r\n\t\t\t\t\t\t\t\t\t.attr(\"id\", nodeRef);\r\n\t\t\t\t\t\t\t\tmarkerSelectString += \"marker[id=\\\"arrow\"+parentRef+nodeRef+\"\\\"], \";\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Determine edge start position\r\n\t\t\t\t\t\t\tif(node.vertex.edgeStart === \"top\") startEdgeYOffset = -(radius);\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeStart === \"right\") startEdgeXOffset = radius;\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeStart === \"bottom\") startEdgeYOffset = radius;\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeStart === \"left\") startEdgeXOffset = -(radius);\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeStart === \"centre\") {\r\n\t\t\t\t\t\t\t\tstartEdgeXOffset = 0; startEdgeYOffset = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Determine edge end position\r\n\t\t\t\t\t\t\tif(node.vertex.edgeEnd === \"top\") endEdgeYOffset = -(radius);\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeEnd === \"right\") endEdgeXOffset = radius;\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeEnd === \"bottom\") endEdgeYOffset = radius;\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeEnd === \"left\") endEdgeXOffset = -(radius);\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeStart === \"centre\") {\r\n\t\t\t\t\t\t\t\tendEdgeXOffset = 0; endEdgeYOffset = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Place edge\r\n\t\t\t\t\t\t\tconst edge = vertexEdgesG.append(\"line\")\r\n\t\t\t\t\t\t\t\t.attr(\"x1\", parentNode.vertex.x + startEdgeXOffset)\r\n\t\t\t\t\t\t\t\t.attr(\"y1\", parentNode.vertex.y + startEdgeYOffset)\r\n\t\t\t\t\t\t\t\t.attr(\"x2\", node.vertex.x + endEdgeXOffset)\r\n\t\t\t\t\t\t\t\t.attr(\"y2\", node.vertex.y + endEdgeYOffset)\r\n\t\t\t\t\t\t\t\t.attr(\"stroke\", node.vertex.edgeStrokeColour)\r\n\t\t\t\t\t\t\t\t.attr(\"stroke-width\", node.vertex.edgeStrokeWidth)\r\n\t\t\t\t\t\t\t\t.attr(\"data-start\", parentRef) // For finding attached edges later\r\n\t\t\t\t\t\t\t\t.attr(\"data-end\", nodeRef);\r\n\r\n\t\t\t\t\t\t\tif(node.vertex.edgeArrowheadEnabled)\r\n\t\t\t\t\t\t\t\tedge.attr(\"marker-end\", \"url(#arrow\"+parentRef+nodeRef+\")\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet vertex = vertexG.append(\"circle\")\r\n\t\t\t\t\t\t.attr(\"cx\", vertexX).attr(\"cy\", vertexY)\r\n\t\t\t\t\t\t.attr(\"r\", radius + \"px\")\r\n\t\t\t\t\t\t.attr(\"stroke\", node.vertex.strokeColour)\r\n\t\t\t\t\t\t.attr(\"fill\", node.vertex.fillColour);\r\n\t\t\t\t\tlet text = vertexG.append(\"text\")\r\n\t\t\t\t\t\t.attr(\"x\", vertexX).attr(\"y\", vertexY)\r\n\t\t\t\t\t\t.attr(\"fill\", node.vertex.fontColour)\r\n\t\t\t\t\t\t.attr(\"text-anchor\", \"middle\")        // Centre of circle\r\n\t\t\t\t\t\t.attr(\"alignment-baseline\", \"middle\") // Centre of circle\r\n\t\t\t\t\t\t.style(\"font-size\", fontSize)\r\n\t\t\t\t\t\t.text(vertexText);\r\n\t\t\t\t\tprevDiameter = radius*2;\r\n\r\n\t\t\t\t\t// Dragging/resizing handlers\r\n\t\t\t\t\tlet startXOffset, startYOffset, resizing = false, startX, startY, startRadius, newVertexRadius, newLabelSize;\r\n\t\t\t\t\tvertex.on(\"mousemove\", (e) => {\r\n\t\t\t\t\t\tlet vertexX = parseFloat(vertex.attr(\"cx\")), vertexY = parseFloat(vertex.attr(\"cy\"));\r\n\t\t\t\t\t\tlet mouseX = e.layerX, mouseY = e.layerY;\r\n\r\n\t\t\t\t\t\t// Dimensions of bottom-right corner\r\n\t\t\t\t\t\tlet squareArea = vertex.node().getBBox().width * vertex.node().getBBox().height;\r\n\t\t\t\t\t\tlet circleArea = Math.PI * Math.pow(parseFloat(vertex.attr(\"r\")),2);\r\n\t\t\t\t\t\tlet cornerWidth = ((squareArea - circleArea) / 4) / 2; // Extract corners, divide by four, width and height are equal length (/2)\r\n\r\n\t\t\t\t\t\t// Determine corner of circle's box\r\n\t\t\t\t\t\tconst southEastCorner = {\r\n\t\t\t\t\t\t\txStart: vertexX,\r\n\t\t\t\t\t\t\txEnd: vertexX + cornerWidth,\r\n\t\t\t\t\t\t\tyStart: vertexY,\r\n\t\t\t\t\t\t\tyEnd: vertexY + cornerWidth\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t// Check corner\r\n\t\t\t\t\t\tif(mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd\r\n\t\t\t\t\t\t\t&& mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvertex.style(\"cursor\", \"se-resize\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvertex.style(\"cursor\", \"grab\");\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.call(d3.drag()\r\n\t\t\t\t\t\t.on(\"start\", (e) => {\r\n\t\t\t\t\t\t\tlet vertexX = parseFloat(vertex.attr(\"cx\")), vertexY = parseFloat(vertex.attr(\"cy\"));\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tstartX = vertexX;\r\n\t\t\t\t\t\t\tstartY = vertexY;\r\n\t\t\t\t\t\t\tstartXOffset = mouseX - vertexX;\r\n\t\t\t\t\t\t\tstartYOffset = mouseY - vertexY;\r\n\r\n\t\t\t\t\t\t\t// Dimensions of bottom-right corner\r\n\t\t\t\t\t\t\tlet squareArea = vertex.node().getBBox().width * vertex.node().getBBox().height;\r\n\t\t\t\t\t\t\tlet circleArea = Math.PI * Math.pow(parseFloat(vertex.attr(\"r\")),2);\r\n\t\t\t\t\t\t\tlet cornerWidth = ((squareArea - circleArea) / 4) / 2; // Extract corners, divide by four, width and height are equal length (/2)\r\n\r\n\t\t\t\t\t\t\t// Determine corner of circle's box\r\n\t\t\t\t\t\t\tconst southEastCorner = {\r\n\t\t\t\t\t\t\t\txStart: vertexX,\r\n\t\t\t\t\t\t\t\txEnd: vertexX + cornerWidth,\r\n\t\t\t\t\t\t\t\tyStart: vertexY,\r\n\t\t\t\t\t\t\t\tyEnd: vertexY + cornerWidth\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Check corner\r\n\t\t\t\t\t\t\tif(mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd\r\n\t\t\t\t\t\t\t\t&& mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tresizing = true;\r\n\t\t\t\t\t\t\t\tstartX = mouseX;\r\n\t\t\t\t\t\t\t\tstartY = mouseY;\r\n\t\t\t\t\t\t\t\tstartRadius = parseFloat(vertex.attr(\"r\"));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"drag\", (e) => {\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tif(resizing)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(mouseX >= startX && mouseY >= startY || mouseX <= startX && mouseY <= startY)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Resize the vertex\r\n\t\t\t\t\t\t\t\t\tlet deltaX = mouseX - startX;\r\n\t\t\t\t\t\t\t\t\tnewVertexRadius = startRadius + (deltaX / 10);\r\n\t\t\t\t\t\t\t\t\tif(newVertexRadius < 10) newVertexRadius = 10; // Floor of 10px to prevent it shrinking into nothingness\r\n\t\t\t\t\t\t\t\t\tvertex.attr(\"r\", newVertexRadius + \"px\"); // Only visually, not updating state itself\r\n\r\n\t\t\t\t\t\t\t\t\t// Resize the vertex's text\r\n\t\t\t\t\t\t\t\t\tconst paddingOffset = 10;\r\n\t\t\t\t\t\t\t\t\tnewLabelSize = ((((newVertexRadius*2) - paddingOffset) / innerTextWidth) * 100) + \"%\";\r\n\t\t\t\t\t\t\t\t\ttext.style(\"font-size\", newLabelSize);\r\n\r\n\t\t\t\t\t\t\t\t\t// Move arrowheads as it is resized\r\n\t\t\t\t\t\t\t\t\tif(markerSelectString)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tlet selectString = markerSelectString.slice(0, markerSelectString.length-2); // Trim \", \" at the end of string\r\n\t\t\t\t\t\t\t\t\t\td3.selectAll(selectString).attr(\"refX\", newVertexRadius/2+5);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Move the vertex\r\n\t\t\t\t\t\t\t\tvertexX = mouseX - startXOffset;\r\n\t\t\t\t\t\t\t\tvertexY = mouseY - startYOffset;\r\n\t\t\t\t\t\t\t\tvertex.attr(\"cx\", vertexX).attr(\"cy\", vertexY); // Only visually\r\n\t\t\t\t\t\t\t\ttext.attr(\"x\", vertexX).attr(\"y\", vertexY); // Only visually\r\n\r\n\t\t\t\t\t\t\t\t// Move the edges\r\n\t\t\t\t\t\t\t\tlet dataEnd = journeyNodeObject.collectionIndex + \"|\" + journeyNodeObject.node.arrayIndex;\r\n\t\t\t\t\t\t\t\tlet attachedEdges = d3.selectAll(\"line[data-start=\\\"\"+dataEnd+\"\\\"]\"); // Find all edges that start on this node\r\n\t\t\t\t\t\t\t\tlet attachedEdges2 = d3.selectAll(\"line[data-end=\\\"\"+dataEnd+\"\\\"]\");  // Find all edges that end on this node\r\n\t\t\t\t\t\t\t\tif(attachedEdges)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tattachedEdges.attr(\"x1\", vertexX + startEdgeXOffset)\r\n\t\t\t\t\t\t\t\t\t\t\t\t .attr(\"y1\", vertexY + startEdgeYOffset);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(attachedEdges2)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tattachedEdges2.attr(\"x2\", vertexX + startEdgeXOffset)\r\n\t\t\t\t\t\t\t\t\t\t\t\t  .attr(\"y2\", vertexY + startEdgeYOffset);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"end\", () => {\r\n\t\t\t\t\t\t\tresizing = false;\r\n\t\t\t\t\t\t\tnode.vertex.x = vertexX; node.vertex.y = vertexY; node.vertex.radius = newVertexRadius || node.vertex.radius; node.vertex.fontSize = newLabelSize || node.vertex.fontSize;\r\n\t\t\t\t\t\t\teditNode(null, journeyNodeObject.collectionIndex, node);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Graticules (lines on the map)\r\n\t\tconst g = svg.append(\"g\");\r\n\t\tconst graticules = g.classed(\"graticules\", true)\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\")\r\n\t\t\t.attr(\"d\", path(d3.geoGraticule()()));\r\n\r\n\t\t/*\r\n\t\tsvg.call(d3.zoom().on(\"zoom\", function () {\r\n\t\t\tz = d3.event.transform.k;\r\n\t\t\tdraw(); // TODO: Contain above render code into draw() function\r\n\t\t}));\r\n\t\t */\r\n\r\n\t\t// Clean-up function (kills all SVG elements upon unmounting)\r\n\t\treturn function cleanup()\r\n\t\t{\r\n\t\t\tsvg.selectAll(\"g\").remove();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\t/**\r\n\t * Finds all nodes in all collections of specified type where the node's language is within the feature's language array\r\n\t * @param {*} d The dataset feature (country/region) currently being rendered\r\n\t * @param {string} type The type of collection to search for (\"journey\" or \"cognate\")\r\n\t */\r\n\tfunction findNodes(d, type)\r\n\t{\r\n\t\t// Search collections\r\n\t\tif(type === \"cognate\")\r\n\t\t{\r\n\t\t\tfor(let c = 0; c < collections.length; ++c)\r\n\t\t\t{\r\n\t\t\t\tlet collection = collections[c];\r\n\t\t\t\tif(collection.type === \"cognate\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let n = 0; n < collection.words.length; ++n)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet childNode = collection.words[n];\r\n\r\n\t\t\t\t\t\tif(d.properties.languages.includes(childNode.language))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {node: childNode, collectionIndex: c, wordIndex: n}; // TODO: Currently only returns first cognate\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(type === \"journey\")\r\n\t\t{\r\n\t\t\tlet countryNodes = [];\r\n\t\t\tfor(let c = 0; c < collections.length; ++c) // Search for all nodes in all collections for this country/region\r\n\t\t\t{\r\n\t\t\t\tlet collection = collections[c];\r\n\t\t\t\tif(collection.type === \"journey\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let n = 0; n < collection.words.length; ++n)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet childNode = collection.words[n];\r\n\r\n\t\t\t\t\t\tif(d.properties.languages.includes(childNode.language))\r\n\t\t\t\t\t\t\tcountryNodes.push({node: childNode, collectionIndex: c});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn countryNodes;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Determines country SVG fill colour according to countries' language(s) and the specified colour of that language's cognate node(s).\r\n\t * @param d Data attached to DOM element via D3 (i.e. the country).\r\n\t * @returns {string} The fill colour, as specified by user in Collection.jsx.\r\n\t */\r\n\tfunction determineFillColour(d)\r\n\t{\r\n\t\tconst nodeObject = findNodes(d, \"cognate\"); // Find node in collections\r\n\t\tif(nodeObject) return nodeObject.node.fillColour;    // Country has associated collection node? Return the colour\r\n\t\telse return \"white\";                             // Otherwise, return white by default for all countries with no associated data\r\n\t}\r\n\t/**\r\n\t * Determines country SVG stroke colour according to countries' language(s) and the specified colour of that language's cognate node(s).\r\n\t * @param d Data attached to DOM element via D3 (i.e. the country).\r\n\t * @returns {string} The fill colour, as specified by user in Collection.jsx.\r\n\t */\r\n\tfunction determineStrokeColour(d)\r\n\t{\r\n\t\tconst nodeObject = findNodes(d, \"cognate\");       // Find node in collections\r\n\t\tif(nodeObject) return nodeObject.node.strokeColour;    // Country has associated collection node? Return the colour\r\n\t\telse return \"black\";                                   // Otherwise, return black by default for all countries with no associated data\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div className={\"map-container\"}>\r\n\t\t\t<svg\r\n\t\t\t\t/*ref={ref}*/\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\tbackgroundColor: \"#3d73ab\" /* The sea */\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}