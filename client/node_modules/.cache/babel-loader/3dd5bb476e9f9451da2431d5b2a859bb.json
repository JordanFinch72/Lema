{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\Lema.js\";\nimport \"./css/Lema.css\";\nimport { Component } from \"react\";\nimport { Banner } from \"./components/Banner\";\nimport { LeftBar } from \"./components/LeftBar\";\nimport { Map } from \"./components/Map\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Lema extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeModal: null,\n      // Either null or a React component\n      activeContextMenu: null,\n      // Either null or a React component\n      mapRef: null,\n      collections: [\n        /*{\n        \ttype: \"journey\",\n        \theader: {word: \"horse\", language: \"English (GB)\"},\n        \twords: [\n        \t\t{word: \"kers\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n        \t\t{word: \"krsos\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n        \t\t{word: \"hrussa\", language: \"Proto-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n        \t\t{word: \"hross\", language: \"Proto-West-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n        \t\t{word: \"horse\", language: \"English (GB)\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n        \t]\n        },*/\n\n        /*{   /!* One word, all cognates (same ancestor). TODO: Legend should detail the ancestors *!/\n        \ttype: \"cognate\",\n        \theader: {word: \"palfrey\", language: \"English (GB)\"},\n        \twords: [\n        \t\t{word: \"palfrey\", language: \"English (GB)\", colour: \"#f5b60d\"},\n        \t\t{word: \"paard\", language: \"Dutch\", colour: \"#f5b60d\"},\n        \t\t{word: \"Pferd\", language: \"German\", colour: \"#f5b60d\"},\n        \t\t{word: \"Päerd\", language: \"Luxembourgish\", colour: \"#f5b60d\"},\n        \t\t{word: \"פערד\", language: \"Yiddish\", colour: \"#f5b60d\"}\n        \t]\n        },*/\n        // TODO: Multiple cognate collections at once (separate layers/patterned colours)\n\n        /*{   /!* Multiple words, no shared countries. Demonstrates cognates of same English word across different families/languages. *!/\n        \ttype: \"cognate\",\n        \theader: {word: \"smith\", language: \"English (GB)\"},\n        \twords: [\n        \t\t{word: \"smith\", language: \"English (GB)\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smid\", language: \"Dutch\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"Schmidt\", language: \"German\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smed\", language: \"Danish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smed\", language: \"Norwegian\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smed\", language: \"Swedish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smiður\", language: \"Icelandic\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"forgeron\", language: \"French\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"fabbro\", language: \"Italian\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"Kovář\", language: \"Czech\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"kováč\", language: \"Slovak\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"kowal\", language: \"Polish\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}}\n        \t]\n        }*/\n      ],\n      journeyCount: 0\n    };\n    this.defaultJourneyColours = [\"#ff0000\", \"#00ff00\", \"#0000ff\", \"#da35aa\", \"#ffcc00\"];\n    this.flattenTree = this.flattenTree.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.openContextMenu = this.openContextMenu.bind(this);\n    this.closeContextMenu = this.closeContextMenu.bind(this);\n    this.addCollection = this.addCollection.bind(this);\n    this.editCollection = this.editCollection.bind(this);\n    this.addJourney = this.addJourney.bind(this);\n    this.addNode = this.addNode.bind(this);\n    this.editNode = this.editNode.bind(this);\n    this.removeNode = this.removeNode.bind(this);\n    this.removeCollection = this.removeCollection.bind(this);\n  }\n\n  flattenTree(wordArray, edWords, structure, wordID) {\n    let parents = [],\n        wordObject = {}; // Parents\n\n    if (Object.keys(structure).length > 0) {\n      // Loop through parents\n      for (let wordID in structure) {\n        parents.push(wordID);\n        wordArray = this.flattenTree(wordArray, edWords, structure[wordID], wordID);\n      }\n    } // Retrieve word from ED and convert to Lema-compatible object\n\n\n    if (wordID !== null) {\n      wordObject = edWords[wordID];\n      wordObject = {\n        id: Number(wordID),\n        arrayIndex: wordArray.length,\n        word: wordObject.word,\n        language: wordObject.language_name,\n        parents: [],\n        colour: this.defaultJourneyColours[this.state.journeyCount],\n        vertex: {\n          type: \"word\",\n          strokeColour: \"#000000\",\n          fillColour: \"#FFFFFF\",\n          radius: null,\n          fontSize: null,\n          x: null,\n          y: null,\n          edgeStart: \"centre\",\n          edgeEnd: \"centre\"\n        }\n      };\n\n      for (let i = 0; i < parents.length; ++i) {\n        let parentID = Number(parents[i]);\n        let parent = wordArray.find(_ref => {\n          let {\n            id\n          } = _ref;\n          return id === parentID;\n        });\n        wordObject.parents.push(parent);\n      }\n\n      wordArray.push(wordObject);\n    }\n\n    return wordArray;\n  }\n\n  addJourney(edWords, edStructure) {\n    let newCollections = this.state.collections,\n        newJourneyCount = this.state.journeyCount; // Flatten the structure\n\n    let journeyWords = [];\n    journeyWords = this.flattenTree(journeyWords, edWords, edStructure, null); // Create the new journey and add it to collections\n\n    let newJourney = {\n      type: \"journey\",\n      header: {\n        word: journeyWords[journeyWords.length - 1].word,\n        language: journeyWords[journeyWords.length - 1].language\n      },\n      words: journeyWords\n    };\n    newCollections.push(newJourney);\n    this.setState({\n      collections: newCollections,\n      journeyCount: newJourneyCount + 1\n    }, e => {\n      console.log(this.state.collections);\n    });\n  }\n\n  openModal(e, modalComponent) {\n    this.setState({\n      activeModal: modalComponent\n    });\n  }\n\n  closeModal() {\n    if (this.state.activeModal) {\n      this.setState({\n        activeModal: null\n      });\n    }\n  }\n\n  openContextMenu(e, menuComponent) {\n    this.setState({\n      activeContextMenu: menuComponent\n    });\n  }\n\n  closeContextMenu() {\n    this.setState({\n      activeContextMenu: null\n    });\n  }\n\n  addNode(e, collectionIndex, newNode) {\n    // Data validation\n    let errorCollector = \"\";\n\n    if (this.state.collections[collectionIndex].type === \"cognate\") {\n      // Check for existing language\n      for (let i = 0; i < this.state.collections[collectionIndex].words.length; ++i) {\n        let childNode = this.state.collections[collectionIndex].words[i];\n\n        if (childNode.language === newNode.language) {\n          errorCollector += \"A language may only have one word per cognate collection.\\n\" + \"Additional cognate collections may re-use languages in other cognate collections.\";\n          break;\n        }\n      }\n    }\n\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error message with toast\n    else {\n      // Insert new node\n      let newCollections = this.state.collections;\n      newNode.arrayIndex = newCollections[collectionIndex].words.length;\n      newCollections[collectionIndex].words.push(newNode);\n      this.setState({\n        collections: newCollections\n      });\n    }\n  }\n  /**\n   * Updates the state's collections array with updated node\n   * @param e React SyntheticEvent\n   * @param collectionIndex Index of collection to which the node belongs\n   * @param updatedNode The updated node to be set in the collections array\n   */\n\n\n  editNode(e, collectionIndex, updatedNode) {\n    let newCollections = this.state.collections;\n    console.log(e);\n    console.log(collectionIndex);\n    console.log(updatedNode); // Find node\n\n    let node = newCollections[collectionIndex].words[updatedNode.arrayIndex]; // Update node by reference\n\n    for (let index in updatedNode) if (node[index]) node[index] = updatedNode[index];\n\n    this.setState({\n      collections: newCollections\n    }, () => {\n      console.log(\"Post-edit collections: \");\n      console.log(this.state.collections);\n      this.closeModal();\n    });\n  }\n\n  removeNode(e, collectionIndex, arrayIndex) {\n    let newCollections = this.state.collections; // Find node\n\n    let node = newCollections[collectionIndex].words[arrayIndex]; // Beginning of chain is always 0\n\n    let confirmed = false;\n    if (node.parents.length > 0) confirmed = window.confirm(\"Warning: this node is connected to \" + node.parents.length + \" parent nodes. The nodes will be unaffected by the deletion. Do you still wish to delete?\");else confirmed = window.confirm(\"Are you sure you wish to delete this node?\");\n    if (confirmed) newCollections[collectionIndex].words.splice(arrayIndex, 1); // Delete node\n\n    this.setState({\n      collections: newCollections\n    }, this.closeModal);\n  }\n\n  addCollection(e, data) {\n    if (data.type === \"Cognates\") data.type = \"cognate\";else if (data.type === \"Historical journey\") data.type = \"journey\"; // Data validation\n    // TODO: For cognates, only one cognate per language should be allowed\n    //  - Future feature: for additional cognate collections, change solid colours to patterns of the specified colours instead (e.g. stripes; checks)\n\n    let errorCollector = \"\";\n    if (data.header.word === null || data.header.word.length <= 0) errorCollector += \"You must enter a word.\\n\";\n    if (data.header.language === null || data.header.language.length <= 0) errorCollector += \"You must enter a language.\\n\";\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error handling with toast\n    else {\n      let newCollections = this.state.collections;\n      newCollections.push({\n        type: data.type,\n        header: data.header,\n        words: []\n      });\n      this.setState({\n        collections: newCollections\n      }, this.closeModal);\n    }\n  }\n\n  editCollection(e, data) {\n    if (data.type === \"Cognates\") data.type = \"cognate\";else if (data.type === \"Historical journey\") data.type = \"journey\"; // Data validation\n\n    let errorCollector = \"\";\n    if (data.header.word === null || data.header.word.length <= 0) errorCollector += \"You must enter a word.\\n\";\n    if (data.header.language === null || data.header.language.length <= 0) errorCollector += \"You must enter a language.\\n\";\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error handling with toast\n    else {\n      let newCollections = this.state.collections;\n      newCollections[data.index].type = data.type;\n      newCollections[data.index].header = data.header;\n      this.setState({\n        collections: newCollections,\n        mapRenderCounter: this.state.mapRenderCounter + 1\n      }, this.closeModal);\n    }\n  }\n\n  removeCollection(e, collectionIndex) {\n    let newCollections = this.state.collections;\n    newCollections.splice(collectionIndex, 1);\n    this.setState({\n      collections: newCollections\n    }, function () {\n      console.log(this.state);\n    });\n  }\n\n  render() {\n    let modalContainer = null,\n        contextMenuContainer = null;\n\n    if (this.state.activeModal !== null) {\n      let activeModal = this.state.activeModal;\n      modalContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-container\",\n        onClick: e => {\n          if (e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n        },\n        children: activeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 21\n      }, this);\n    }\n\n    if (this.state.activeContextMenu !== null) {\n      let activeContextMenu = this.state.activeContextMenu;\n      contextMenuContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"context-menu-container\",\n        onClick: this.closeContextMenu,\n        children: activeContextMenu\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 5\n      }, this);\n    } //console.log(this.state.collections);\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Lema\",\n      children: [/*#__PURE__*/_jsxDEV(Banner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-view-container\",\n        children: [/*#__PURE__*/_jsxDEV(LeftBar, {\n          collections: this.state.collections,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          addJourney: this.addJourney,\n          addNode: this.addNode,\n          editNode: this.editNode,\n          editNodeColour: this.editNodeColour,\n          removeNode: this.removeNode,\n          addCollection: this.addCollection,\n          editCollection: this.editCollection,\n          removeCollection: this.removeCollection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Map, {\n          collections: this.state.collections,\n          mapRenderCounter: this.state.mapRenderCounter,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          addNode: this.addNode,\n          editNode: this.editNode,\n          editNodeColour: this.editNodeColour,\n          removeNode: this.removeNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 5\n      }, this), modalContainer, contextMenuContainer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Lema;","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/Lema.js"],"names":["Component","Banner","LeftBar","Map","Lema","constructor","props","state","activeModal","activeContextMenu","mapRef","collections","journeyCount","defaultJourneyColours","flattenTree","bind","openModal","closeModal","openContextMenu","closeContextMenu","addCollection","editCollection","addJourney","addNode","editNode","removeNode","removeCollection","wordArray","edWords","structure","wordID","parents","wordObject","Object","keys","length","push","id","Number","arrayIndex","word","language","language_name","colour","vertex","type","strokeColour","fillColour","radius","fontSize","x","y","edgeStart","edgeEnd","i","parentID","parent","find","edStructure","newCollections","newJourneyCount","journeyWords","newJourney","header","words","setState","e","console","log","modalComponent","menuComponent","collectionIndex","newNode","errorCollector","childNode","alert","updatedNode","node","index","confirmed","window","confirm","splice","data","mapRenderCounter","render","modalContainer","contextMenuContainer","nativeEvent","target","className","editNodeColour"],"mappings":"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","sourcesContent":["import \"./css/Lema.css\";\nimport {Component} from \"react\";\nimport {Banner} from \"./components/Banner\";\nimport {LeftBar} from \"./components/LeftBar\";\nimport {Map} from \"./components/Map\";\n\nclass Lema extends Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tactiveModal: null, // Either null or a React component\n\t\t\tactiveContextMenu: null, // Either null or a React component\n\t\t\tmapRef: null,\n\t\t\tcollections: [\n\n\t\t\t\t/*{\n\t\t\t\t\ttype: \"journey\",\n\t\t\t\t\theader: {word: \"horse\", language: \"English (GB)\"},\n\t\t\t\t\twords: [\n\t\t\t\t\t\t{word: \"kers\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"krsos\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"hrussa\", language: \"Proto-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"hross\", language: \"Proto-West-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"horse\", language: \"English (GB)\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n\t\t\t\t\t]\n\t\t\t\t},*/\n\t\t\t\t/*{   /!* One word, all cognates (same ancestor). TODO: Legend should detail the ancestors *!/\n\t\t\t\t\ttype: \"cognate\",\n\t\t\t\t\theader: {word: \"palfrey\", language: \"English (GB)\"},\n\t\t\t\t\twords: [\n\t\t\t\t\t\t{word: \"palfrey\", language: \"English (GB)\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"paard\", language: \"Dutch\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"Pferd\", language: \"German\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"Päerd\", language: \"Luxembourgish\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"פערד\", language: \"Yiddish\", colour: \"#f5b60d\"}\n\t\t\t\t\t]\n\t\t\t\t},*/\n\t\t\t\t\t// TODO: Multiple cognate collections at once (separate layers/patterned colours)\n\t\t\t\t/*{   /!* Multiple words, no shared countries. Demonstrates cognates of same English word across different families/languages. *!/\n\t\t\t\t\ttype: \"cognate\",\n\t\t\t\t\theader: {word: \"smith\", language: \"English (GB)\"},\n\t\t\t\t\twords: [\n\t\t\t\t\t\t{word: \"smith\", language: \"English (GB)\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smid\", language: \"Dutch\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"Schmidt\", language: \"German\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smed\", language: \"Danish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smed\", language: \"Norwegian\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smed\", language: \"Swedish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smiður\", language: \"Icelandic\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"forgeron\", language: \"French\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"fabbro\", language: \"Italian\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"Kovář\", language: \"Czech\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"kováč\", language: \"Slovak\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"kowal\", language: \"Polish\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}}\n\t\t\t\t\t]\n\t\t\t\t}*/\n\t\t\t],\n\t\t\tjourneyCount: 0\n\t\t};\n\n\t\tthis.defaultJourneyColours = [\"#ff0000\", \"#00ff00\", \"#0000ff\", \"#da35aa\", \"#ffcc00\"]\n\n\t\tthis.flattenTree = this.flattenTree.bind(this);\n\t\tthis.openModal = this.openModal.bind(this);\n\t\tthis.closeModal = this.closeModal.bind(this);\n\t\tthis.openContextMenu = this.openContextMenu.bind(this);\n\t\tthis.closeContextMenu = this.closeContextMenu.bind(this);\n\t\tthis.addCollection = this.addCollection.bind(this);\n\t\tthis.editCollection = this.editCollection.bind(this);\n\t\tthis.addJourney = this.addJourney.bind(this);\n\t\tthis.addNode = this.addNode.bind(this);\n\t\tthis.editNode = this.editNode.bind(this);\n\t\tthis.removeNode = this.removeNode.bind(this);\n\t\tthis.removeCollection = this.removeCollection.bind(this);\n\t}\n\n\tflattenTree(wordArray, edWords, structure, wordID)\n\t{\n\t\tlet parents = [], wordObject = {};\n\t\t// Parents\n\t\tif(Object.keys(structure).length > 0)\n\t\t{\n\t\t\t// Loop through parents\n\t\t\tfor(let wordID in structure)\n\t\t\t{\n\t\t\t\tparents.push(wordID);\n\t\t\t\twordArray = this.flattenTree(wordArray, edWords, structure[wordID], wordID);\n\t\t\t}\n\t\t}\n\n\t\t// Retrieve word from ED and convert to Lema-compatible object\n\t\tif(wordID !== null)\n\t\t{\n\t\t\twordObject = edWords[wordID];\n\t\t\twordObject = {\n\t\t\t\tid: Number(wordID),\n\t\t\t\tarrayIndex: wordArray.length,\n\t\t\t\tword: wordObject.word,\n\t\t\t\tlanguage: wordObject.language_name,\n\t\t\t\tparents: [],\n\t\t\t\tcolour: this.defaultJourneyColours[this.state.journeyCount],\n\t\t\t\tvertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}\n\t\t\t}\n\t\t\tfor(let i = 0; i < parents.length; ++i)\n\t\t\t{\n\t\t\t\tlet parentID = Number(parents[i]);\n\t\t\t\tlet parent = wordArray.find(({id}) => id === parentID);\n\t\t\t\twordObject.parents.push(parent);\n\t\t\t}\n\t\t\twordArray.push(wordObject);\n\t\t}\n\n\t\treturn wordArray;\n\t}\n\n\taddJourney(edWords, edStructure)\n\t{\n\t\tlet newCollections = this.state.collections, newJourneyCount = this.state.journeyCount;\n\n\t\t// Flatten the structure\n\t\tlet journeyWords = [];\n\t\tjourneyWords = this.flattenTree(journeyWords, edWords, edStructure, null);\n\n\t\t// Create the new journey and add it to collections\n\t\tlet newJourney = {type: \"journey\", header: {word: journeyWords[journeyWords.length-1].word, language: journeyWords[journeyWords.length-1].language}, words: journeyWords};\n\t\tnewCollections.push(newJourney);\n\n\t\tthis.setState({collections: newCollections, journeyCount: newJourneyCount+1}, (e) => {console.log(this.state.collections);});\n\t}\n\n\topenModal(e, modalComponent)\n\t{\n\t\tthis.setState({\n\t\t\tactiveModal: modalComponent\n\t\t});\n\t}\n\tcloseModal()\n\t{\n\t\tif(this.state.activeModal)\n\t\t{\n\t\t\tthis.setState({\n\t\t\t\tactiveModal: null\n\t\t\t});\n\t\t}\n\t}\n\topenContextMenu(e, menuComponent)\n\t{\n\t\tthis.setState({\n\t\t\tactiveContextMenu: menuComponent\n\t\t});\n\t}\n\tcloseContextMenu()\n\t{\n\t\tthis.setState({\n\t\t\tactiveContextMenu: null\n\t\t});\n\t}\n\n\taddNode(e, collectionIndex, newNode)\n\t{\n\t\t// Data validation\n\t\tlet errorCollector = \"\";\n\t\tif(this.state.collections[collectionIndex].type === \"cognate\")\n\t\t{\n\t\t\t// Check for existing language\n\t\t\tfor(let i = 0; i < this.state.collections[collectionIndex].words.length; ++i)\n\t\t\t{\n\t\t\t\tlet childNode = this.state.collections[collectionIndex].words[i];\n\t\t\t\tif(childNode.language === newNode.language)\n\t\t\t\t{\n\t\t\t\t\terrorCollector += \"A language may only have one word per cognate collection.\\n\" +\n\t\t\t\t\t\t\t\t\t  \"Additional cognate collections may re-use languages in other cognate collections.\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error message with toast\n\t\telse\n\t\t{\n\t\t\t// Insert new node\n\t\t\tlet newCollections = this.state.collections;\n\t\t\tnewNode.arrayIndex = newCollections[collectionIndex].words.length;\n\t\t\tnewCollections[collectionIndex].words.push(newNode);\n\n\t\t\tthis.setState({collections: newCollections});\n\t\t}\n\t}\n\n\t/**\n\t * Updates the state's collections array with updated node\n\t * @param e React SyntheticEvent\n\t * @param collectionIndex Index of collection to which the node belongs\n\t * @param updatedNode The updated node to be set in the collections array\n\t */\n\teditNode(e, collectionIndex, updatedNode)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tconsole.log(e);\n\t\tconsole.log(collectionIndex);\n\t\tconsole.log(updatedNode);\n\n\t\t// Find node\n\t\tlet node = newCollections[collectionIndex].words[updatedNode.arrayIndex];\n\n\t\t// Update node by reference\n\t\tfor(let index in updatedNode)\n\t\t\tif(node[index]) node[index] = updatedNode[index];\n\n\t\tthis.setState({collections: newCollections}, () => {\n\t\t\tconsole.log(\"Post-edit collections: \");\n\t\t\tconsole.log(this.state.collections);\n\t\t\tthis.closeModal();\n\t\t});\n\t}\n\tremoveNode(e, collectionIndex, arrayIndex)\n\t{\n\t\tlet newCollections = this.state.collections;\n\n\t\t// Find node\n\t\tlet node = newCollections[collectionIndex].words[arrayIndex]; // Beginning of chain is always 0\n\t\tlet confirmed = false;\n\t\tif(node.parents.length > 0)\n\t\t\tconfirmed = window.confirm(\"Warning: this node is connected to \"+node.parents.length+\" parent nodes. The nodes will be unaffected by the deletion. Do you still wish to delete?\");\n\t\telse\n\t\t\tconfirmed = window.confirm(\"Are you sure you wish to delete this node?\");\n\n\t\tif(confirmed)\n\t\t\tnewCollections[collectionIndex].words.splice(arrayIndex, 1); // Delete node\n\n\t\tthis.setState({collections: newCollections}, this.closeModal);\n\t}\n\n\taddCollection(e, data)\n\t{\n\t\tif(data.type === \"Cognates\") data.type = \"cognate\";\n\t\telse if(data.type === \"Historical journey\") data.type = \"journey\";\n\n\t\t// Data validation\n\t\t// TODO: For cognates, only one cognate per language should be allowed\n\t\t//  - Future feature: for additional cognate collections, change solid colours to patterns of the specified colours instead (e.g. stripes; checks)\n\t\tlet errorCollector = \"\";\n\t\tif(data.header.word === null || data.header.word.length <= 0)\n\t\t\terrorCollector += \"You must enter a word.\\n\";\n\t\tif(data.header.language === null || data.header.language.length <= 0)\n\t\t\terrorCollector += \"You must enter a language.\\n\";\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error handling with toast\n\t\telse\n\t\t{\n\t\t\tlet newCollections = this.state.collections;\n\t\t\tnewCollections.push({type: data.type, header: data.header, words: []});\n\t\t\tthis.setState( {collections: newCollections}, this.closeModal);\n\t\t}\n\t}\n\teditCollection(e, data)\n\t{\n\t\tif(data.type === \"Cognates\") data.type = \"cognate\";\n\t\telse if(data.type === \"Historical journey\") data.type = \"journey\";\n\n\t\t// Data validation\n\t\tlet errorCollector = \"\";\n\t\tif(data.header.word === null || data.header.word.length <= 0)\n\t\t\terrorCollector += \"You must enter a word.\\n\";\n\t\tif(data.header.language === null || data.header.language.length <= 0)\n\t\t\terrorCollector += \"You must enter a language.\\n\";\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error handling with toast\n\t\telse\n\t\t{\n\t\t\tlet newCollections = this.state.collections;\n\t\t\tnewCollections[data.index].type = data.type;\n\t\t\tnewCollections[data.index].header = data.header;\n\t\t\tthis.setState({collections: newCollections, mapRenderCounter: this.state.mapRenderCounter+1}, this.closeModal);\n\t\t}\n\t}\n\tremoveCollection(e, collectionIndex)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tnewCollections.splice(collectionIndex, 1);\n\t\tthis.setState({collections: newCollections}, function()\n\t\t{\n\t\t\tconsole.log(this.state);\n\t\t});\n\t}\n\n\n\trender()\n\t{\n\t\tlet modalContainer = null, contextMenuContainer = null;\n\t\tif(this.state.activeModal !== null)\n\t\t{\n\t\t\tlet activeModal = this.state.activeModal;\n\t\t\tmodalContainer = <div className={\"modal-container\"} onClick={(e) =>\n\t\t\t{\n\t\t\t\tif(e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n\t\t\t}}>{activeModal}</div>;\n\t\t}\n\t\tif(this.state.activeContextMenu !== null)\n\t\t{\n\t\t\tlet activeContextMenu = this.state.activeContextMenu;\n\t\t\tcontextMenuContainer =\n\t\t\t\t<div className={\"context-menu-container\"} onClick={this.closeContextMenu}>{activeContextMenu}</div>;\n\t\t}\n\n\t\t//console.log(this.state.collections);\n\n\t\treturn (\n\t\t\t<div className=\"Lema\">\n\t\t\t\t<Banner/>\n\t\t\t\t<div className={\"main-view-container\"}>\n\t\t\t\t\t<LeftBar collections={this.state.collections}\n\t\t\t\t\t         openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t         openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t         addJourney={this.addJourney}\n\t\t\t\t\t         addNode={this.addNode} editNode={this.editNode} editNodeColour={this.editNodeColour} removeNode={this.removeNode}\n\t\t\t\t\t         addCollection={this.addCollection} editCollection={this.editCollection} removeCollection={this.removeCollection}\n\t\t\t\t\t/>\n\t\t\t\t\t<Map collections={this.state.collections} mapRenderCounter={this.state.mapRenderCounter}\n\t\t\t\t\t     openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t     openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t\t addNode={this.addNode} editNode={this.editNode} editNodeColour={this.editNodeColour} removeNode={this.removeNode}  />\n\t\t\t\t</div>\n\t\t\t\t{modalContainer}\n\t\t\t\t{contextMenuContainer}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Lema;\n"]},"metadata":{},"sourceType":"module"}