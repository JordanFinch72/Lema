{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\AddEditNodeModal.jsx\";\nimport { Component } from \"react\";\nimport { Textbox } from \"./Textbox\";\nimport { Button } from \"./Button\";\nimport { RadioGroup } from \"./RadioGroup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class AddEditNodeModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Node properties\n      word: this.props.node.word || null,\n      colour: this.props.node.colour || null,\n      labelType: this.props.node.label !== undefined ? this.props.node.label.type || null : null,\n      vertexTextType: this.props.node.label !== undefined ? this.props.node.vertex.type || null : null,\n      customText: this.props.node.label !== undefined ? this.props.node.label.customText || null : null,\n      // Note: Text can be \"\"\n      fontColour: this.props.node.label !== undefined ? this.props.node.label.fontColour || null : null,\n      parents: this.props.node.parents,\n      selectedParentIndex: 0,\n      // Optional or can be overridden\n      language: typeof this.props.language === \"object\" ? this.props.language[0] : this.props.language,\n      collection: this.props.collectionList !== undefined ? `${this.props.collectionList[0].type[0].toUpperCase() + this.props.collectionList[0].type.substring(1)}: ${this.props.collectionList[0].header.word}` : null\n    };\n    this.onNodeSubmit = this.props.onNodeSubmit.bind(this);\n    this.onFieldChange = this.onFieldChange.bind(this);\n    this.onLabelRadioClick = this.onLabelRadioClick.bind(this);\n  }\n\n  onFieldChange(event) {\n    const target = event.target;\n    const name = target.name;\n    let value = target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  onLabelRadioClick(e, data) {\n    // Update parent LeftBar component's state\n    let labelType;\n    if (data.id === 0) labelType = \"language\";else if (data.id === 1) labelType = \"country\";else if (data.id === 2) labelType = \"word\";else if (data.id === 3) labelType = \"customText\";\n    this.setState({\n      labelType: labelType\n    });\n  }\n\n  onVertexRadioClick(e, data) {\n    // Update parent LeftBar component's state\n    let vertexTextType;\n    if (data.id === 0) vertexTextType = \"language\";else if (data.id === 1) vertexTextType = \"country\";else if (data.id === 2) vertexTextType = \"word\";else if (data.id === 3) vertexTextType = \"customText\";\n    this.setState({\n      vertexTextType: vertexTextType\n    });\n  }\n\n  validation() {\n    // TODO: Validate form data\n    return true;\n  }\n\n  render() {\n    // Languages is a textbox if none or one language is supplied, or a drop-down menu if some are supplied\n    let languageInput;\n\n    if (typeof this.props.language === \"object\") {\n      let options = [];\n\n      for (let i = 0; i < this.props.language.length; ++i) {\n        options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n          children: this.props.language[i]\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 18\n        }, this));\n      }\n\n      languageInput = /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"language\",\n        value: this.state.language,\n        onChange: this.onFieldChange,\n        children: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 20\n      }, this);\n    } else {\n      languageInput = /*#__PURE__*/_jsxDEV(Textbox, {\n        hint: \"e.g. \\\"English (GB)\\\"\",\n        name: \"language\",\n        value: this.state.language,\n        onFieldChange: this.onFieldChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 20\n      }, this);\n    } // If no collectionIndex is supplied, allow them to select one from the list\n\n\n    let selectCollection;\n\n    if (!this.props.collectionIndex === undefined) {\n      let options = [];\n      let i = 0;\n\n      for (i; i < this.props.collectionList.length; ++i) {\n        let collection = this.props.collectionList[i];\n        let string = `${collection.type[0].toUpperCase() + collection.type.substring(1)}: ${this.props.collectionList[i].header.word}`;\n        options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n          children: string\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 18\n        }, this));\n      }\n\n      selectCollection = [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Collection\"\n      }, 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"collection\",\n        value: this.state.collection,\n        onChange: this.onFieldChange,\n        children: options\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }, this)];\n    } // Label components (if appropriate)\n\n\n    let labelControls = [],\n        nodeColourControls = [];\n\n    if (this.props.node.label) {\n      nodeColourControls.push( /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Node Country/Region Colour\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-colour-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"textbox\",\n          name: \"colour\",\n          value: this.state.colour,\n          onChange: this.onFieldChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          defaultValue: this.state.colour,\n          value: this.state.colour,\n          onChange: e => {\n            this.setState({\n              colour: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this)); // RadioGroup buttons\n\n      const buttons = [{\n        active: false,\n        label: \"Node language\"\n      }, {\n        active: false,\n        label: \"Node country/region\"\n      }, {\n        active: false,\n        label: \"Word\"\n      }, {\n        active: false,\n        label: \"Custom label:\"\n      }];\n      let labelTypeIndex;\n      if (this.state.labelType === \"language\") labelTypeIndex = 0;else if (this.state.labelType === \"country\") labelTypeIndex = 1;else if (this.state.labelType === \"word\") labelTypeIndex = 2;else if (this.state.labelType === \"customText\") labelTypeIndex = 3;\n      buttons[labelTypeIndex].active = true;\n      labelControls = [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Label\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label-controls-container\",\n        children: [\",\", /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n          buttons: buttons,\n          name: \"custom-label\",\n          onRadioButtonClick: this.onLabelRadioClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Textbox, {\n          hint: \"Custom label text...\",\n          name: \"customText\",\n          value: this.state.customText,\n          onFieldChange: this.onFieldChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"label-colour-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Font colour: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"textbox\",\n            name: \"fontColour\",\n            value: this.state.fontColour,\n            onChange: this.onFieldChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"color\",\n            defaultValue: this.state.fontColour,\n            value: this.state.fontColour,\n            onChange: e => {\n              this.setState({\n                fontColour: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 5\n      }, this)];\n    } // Vertex properties (if appropriate)\n\n\n    let vertexControls = [];\n\n    if (this.props.node.vertex) {\n      // RadioGroup buttons\n      const buttons = [{\n        active: false,\n        label: \"Node language\"\n      }, {\n        active: false,\n        label: \"Node country/region\"\n      }, {\n        active: false,\n        label: \"Word\"\n      }, {\n        active: false,\n        label: \"Custom label:\"\n      }];\n      let vertexTextType;\n      if (this.state.vertexTextType === \"language\") vertexTextType = 0;else if (this.state.vertexTextType === \"country\") vertexTextType = 1;else if (this.state.vertexTextType === \"word\") vertexTextType = 2;else if (this.state.vertexTextType === \"customText\") vertexTextType = 3;\n      buttons[vertexTextType].active = true;\n      labelControls = [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Vertex\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label-controls-container\",\n        children: [\",\", /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n          buttons: buttons,\n          name: \"custom-label\",\n          onRadioButtonClick: this.onLabelRadioClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Textbox, {\n          hint: \"Custom label text...\",\n          name: \"customText\",\n          value: this.state.customText,\n          onFieldChange: this.onFieldChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"label-colour-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Font colour: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"textbox\",\n            name: \"fontColour\",\n            value: this.state.fontColour,\n            onChange: this.onFieldChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"color\",\n            defaultValue: this.state.fontColour,\n            value: this.state.fontColour,\n            onChange: e => {\n              this.setState({\n                fontColour: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 5\n      }, this)];\n    } // TODO: Decide between:\n    //   - (1) changing HCI so that users create a child node from a parent, and can only make a (single) parent node per collection from the collection context menu\n    //   - (2) passing down the collection's words into the modal as a prop. Not sure what kind of performance/memory hit this would induce\n    // Parents\n\n\n    let parentList = [],\n        potentialParentList = [],\n        parentControls = [];\n\n    if (this.props.node.parents) {\n      // Gather current parents\n      for (let i = 0; i < this.props.node.parents.length; ++i) {\n        let parent = this.props.node.parents[i];\n        parentList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"parent-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: parent.word + \" (\" + parent.language + \")\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              value: \"X\",\n              onClick: e => {\n                this.props.node.parents.splice(i, 1);\n                this.setState({\n                  parents: this.props.node.parents\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this));\n      }\n    }\n\n    if (this.props.words) {\n      for (let i = 0; i < this.props.words.length; ++i) {\n        // List all potential new parents\n        let word = this.props.words[i];\n\n        if (this.props.node !== word && !this.props.node.parents.includes(word)) {\n          potentialParentList.push( /*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-index\": i,\n            children: word.word + \" (\" + word.language + \")\"\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 31\n          }, this));\n        }\n      }\n    }\n\n    console.log(potentialParentList);\n\n    let potentialParents = /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"selectedParent\",\n      onChange: event => {\n        const selectedIndex = event.target.selectedIndex;\n        this.setState({\n          selectedParentIndex: selectedIndex\n        });\n      },\n      children: potentialParentList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 26\n    }, this);\n\n    if (potentialParents) {\n      parentControls = /*#__PURE__*/_jsxDEV(Button, {\n        id: \"add-node-modal-add-parent\",\n        value: \"Add parent\",\n        onClick: e => {\n          let selectedParent = potentialParentList[this.state.selectedParentIndex];\n          let parentIndex = selectedParent.props[\"data-index\"];\n          this.props.node.parents.push(this.props.words[parentIndex]);\n          this.setState({\n            parents: this.props.node.parents\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Textbox, {\n        hint: \"e.g. \\\"Horse\\\"...\",\n        name: \"word\",\n        value: this.state.word,\n        onFieldChange: this.onFieldChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Language\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 5\n      }, this), languageInput, /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Current Parents\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 5\n      }, this), parentList, /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Potential Parents\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 5\n      }, this), potentialParents, parentControls, labelControls, selectCollection, /*#__PURE__*/_jsxDEV(Button, {\n        value: \"Submit\",\n        id: \"add-node-modal-submit\",\n        onClick: e => {\n          if (this.validation()) {\n            // Build node structure to match collection type\n            let updatedNode;\n\n            if (this.props.type === \"journey\") {\n              updatedNode = { ...this.props.node,\n                word: this.state.word,\n                language: this.state.language,\n                colour: this.state.colour,\n                vertex: { ...this.props.node.vertex,\n                  fontColour: this.state.fontColour\n                }\n              };\n            } else if (this.props.type === \"cognate\") {\n              updatedNode = { ...this.props.node,\n                word: this.state.word,\n                language: this.state.language,\n                colour: this.state.colour,\n                label: { ...this.props.node.label,\n                  type: this.state.labelType,\n                  customText: this.state.customText,\n                  fontColour: this.state.fontColour,\n                  fontSize: this.state.fontSize\n                }\n              };\n            }\n\n            this.props.onNodeSubmit(e, this.props.collectionIndex, updatedNode);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/AddEditNodeModal.jsx"],"names":["Component","Textbox","Button","RadioGroup","AddEditNodeModal","constructor","props","state","word","node","colour","labelType","label","undefined","type","vertexTextType","vertex","customText","fontColour","parents","selectedParentIndex","language","collection","collectionList","toUpperCase","substring","header","onNodeSubmit","bind","onFieldChange","onLabelRadioClick","event","target","name","value","setState","e","data","id","onVertexRadioClick","validation","render","languageInput","options","i","length","push","selectCollection","collectionIndex","string","labelControls","nodeColourControls","buttons","active","labelTypeIndex","vertexControls","parentList","potentialParentList","parentControls","parent","splice","words","includes","console","log","potentialParents","selectedIndex","selectedParent","parentIndex","updatedNode","fontSize"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\r\nimport {Textbox} from \"./Textbox\";\r\nimport {Button} from \"./Button\";\r\nimport {RadioGroup} from \"./RadioGroup\";\r\n\r\nexport class AddEditNodeModal extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\t// Node properties\r\n\t\t\tword: this.props.node.word || null,\r\n\t\t\tcolour: this.props.node.colour || null,\r\n\t\t\tlabelType: (this.props.node.label !== undefined) ? this.props.node.label.type || null : null,\r\n\t\t\tvertexTextType: (this.props.node.label !== undefined) ? this.props.node.vertex.type || null : null,\r\n\t\t\tcustomText: (this.props.node.label !== undefined) ? this.props.node.label.customText || null : null, // Note: Text can be \"\"\r\n\t\t\tfontColour: (this.props.node.label !== undefined) ? this.props.node.label.fontColour || null : null,\r\n\t\t\tparents: this.props.node.parents,\r\n\t\t\tselectedParentIndex: 0,\r\n\r\n\t\t\t// Optional or can be overridden\r\n\t\t\tlanguage: (typeof this.props.language === \"object\") ? this.props.language[0] : this.props.language,\r\n\t\t\tcollection: (this.props.collectionList !== undefined)\r\n\t\t\t\t? (`${this.props.collectionList[0].type[0].toUpperCase() + this.props.collectionList[0].type.substring(1)}: ${this.props.collectionList[0].header.word}`) : null,\r\n\t\t};\r\n\r\n\t\tthis.onNodeSubmit = this.props.onNodeSubmit.bind(this);\r\n\t\tthis.onFieldChange = this.onFieldChange.bind(this);\r\n\t\tthis.onLabelRadioClick = this.onLabelRadioClick.bind(this);\r\n\t}\r\n\r\n\tonFieldChange(event)\r\n\t{\r\n\t\tconst target = event.target;\r\n\t\tconst name = target.name;\r\n\t\tlet value = target.value;\r\n\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t}\r\n\r\n\tonLabelRadioClick(e, data)\r\n\t{\r\n\t\t// Update parent LeftBar component's state\r\n\t\tlet labelType;\r\n\t\tif(data.id === 0) labelType = \"language\";\r\n\t\telse if(data.id === 1) labelType = \"country\";\r\n\t\telse if(data.id === 2) labelType = \"word\";\r\n\t\telse if(data.id === 3) labelType = \"customText\";\r\n\r\n\t\tthis.setState({labelType: labelType});\r\n\t}\r\n\tonVertexRadioClick(e, data)\r\n\t{\r\n\t\t// Update parent LeftBar component's state\r\n\t\tlet vertexTextType;\r\n\t\tif(data.id === 0) vertexTextType = \"language\";\r\n\t\telse if(data.id === 1) vertexTextType = \"country\";\r\n\t\telse if(data.id === 2) vertexTextType = \"word\";\r\n\t\telse if(data.id === 3) vertexTextType = \"customText\";\r\n\r\n\t\tthis.setState({vertexTextType: vertexTextType});\r\n\t}\r\n\tvalidation()\r\n\t{\r\n\t\t// TODO: Validate form data\r\n\t\treturn true;\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\t// Languages is a textbox if none or one language is supplied, or a drop-down menu if some are supplied\r\n\t\tlet languageInput;\r\n\t\tif(typeof this.props.language === \"object\")\r\n\t\t{\r\n\t\t\tlet options = [];\r\n\t\t\tfor(let i = 0; i < this.props.language.length; ++i)\r\n\t\t\t{\r\n\t\t\t\toptions.push(<option key={i}>{this.props.language[i]}</option>);\r\n\t\t\t}\r\n\t\t\tlanguageInput = <select name={\"language\"} value={this.state.language} onChange={this.onFieldChange}>\r\n\t\t\t\t{options}\r\n\t\t\t</select>\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlanguageInput = <Textbox hint={\"e.g. \\\"English (GB)\\\"\"} name={\"language\"} value={this.state.language} onFieldChange={this.onFieldChange} />\r\n\t\t}\r\n\r\n\t\t// If no collectionIndex is supplied, allow them to select one from the list\r\n\t\tlet selectCollection;\r\n\t\tif(!this.props.collectionIndex === undefined)\r\n\t\t{\r\n\t\t\tlet options = [];\r\n\r\n\t\t\tlet i = 0;\r\n\t\t\tfor(i; i < this.props.collectionList.length; ++i)\r\n\t\t\t{\r\n\t\t\t\tlet collection = this.props.collectionList[i];\r\n\t\t\t\tlet string = `${collection.type[0].toUpperCase() + collection.type.substring(1)}: ${this.props.collectionList[i].header.word}`;\r\n\t\t\t\toptions.push(<option key={i}>{string}</option>);\r\n\t\t\t}\r\n\t\t\tselectCollection = [\r\n\t\t\t\t<h3 key={0}>Collection</h3>,\r\n\t\t\t\t<select key={1} name={\"collection\"} value={this.state.collection} onChange={this.onFieldChange}>\r\n\t\t\t\t\t{options}\r\n\t\t\t\t</select>\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\t// Label components (if appropriate)\r\n\t\tlet labelControls = [], nodeColourControls = [];\r\n\t\tif(this.props.node.label)\r\n\t\t{\r\n\t\t\tnodeColourControls.push(\r\n\t\t\t\t<h3>Node Country/Region Colour</h3>,\r\n\t\t\t\t<div className={\"node-colour-container\"}>\r\n\t\t\t\t\t<input type={\"textbox\"} name={\"colour\"} value={this.state.colour} onChange={this.onFieldChange} />\r\n\t\t\t\t\t<input type={\"color\"} defaultValue={this.state.colour} value={this.state.colour} onChange={(e) => {\r\n\t\t\t\t\t\tthis.setState({colour: e.target.value});\r\n\t\t\t\t\t}}/>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\r\n\t\t\t// RadioGroup buttons\r\n\t\t\tconst buttons = [{active: false, label: \"Node language\"}, {active: false, label: \"Node country/region\"}, {active: false, label: \"Word\"}, {active: false, label: \"Custom label:\"}];\r\n\t\t\tlet labelTypeIndex;\r\n\t\t\tif(this.state.labelType === \"language\")\r\n\t\t\t\tlabelTypeIndex = 0;\r\n\t\t\telse if(this.state.labelType === \"country\")\r\n\t\t\t\tlabelTypeIndex = 1;\r\n\t\t\telse if(this.state.labelType === \"word\")\r\n\t\t\t\tlabelTypeIndex = 2;\r\n\t\t\telse if(this.state.labelType === \"customText\")\r\n\t\t\t\tlabelTypeIndex = 3;\r\n\t\t\tbuttons[labelTypeIndex].active = true;\r\n\r\n\t\t\tlabelControls = [\r\n\t\t\t\t<h3>Label</h3>,\r\n\t\t\t\t<div className={\"label-controls-container\"}>,\r\n\t\t\t\t\t<h4>Text:</h4>\r\n\t\t\t\t\t<RadioGroup buttons={buttons} name={\"custom-label\"} onRadioButtonClick={this.onLabelRadioClick} />\r\n\t\t\t\t\t<Textbox hint={\"Custom label text...\"} name={\"customText\"} value={this.state.customText} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t<div className={\"label-colour-container\"}>\r\n\t\t\t\t\t\t<h4>Font colour: </h4>\r\n\t\t\t\t\t\t<input type={\"textbox\"} name={\"fontColour\"} value={this.state.fontColour} onChange={this.onFieldChange} />\r\n\t\t\t\t\t\t<input type={\"color\"} defaultValue={this.state.fontColour} value={this.state.fontColour} onChange={(e) => {\r\n\t\t\t\t\t\t\tthis.setState({fontColour: e.target.value});\r\n\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t]\r\n\t\t}\r\n\r\n\t\t// Vertex properties (if appropriate)\r\n\t\tlet vertexControls = [];\r\n\t\tif(this.props.node.vertex)\r\n\t\t{\r\n\t\t\t// RadioGroup buttons\r\n\t\t\tconst buttons = [{active: false, label: \"Node language\"}, {active: false, label: \"Node country/region\"}, {active: false, label: \"Word\"}, {active: false, label: \"Custom label:\"}];\r\n\t\t\tlet vertexTextType;\r\n\t\t\tif(this.state.vertexTextType === \"language\")\r\n\t\t\t\tvertexTextType = 0;\r\n\t\t\telse if(this.state.vertexTextType === \"country\")\r\n\t\t\t\tvertexTextType = 1;\r\n\t\t\telse if(this.state.vertexTextType === \"word\")\r\n\t\t\t\tvertexTextType = 2;\r\n\t\t\telse if(this.state.vertexTextType === \"customText\")\r\n\t\t\t\tvertexTextType = 3;\r\n\t\t\tbuttons[vertexTextType].active = true;\r\n\r\n\t\t\tlabelControls = [\r\n\t\t\t\t<h3>Vertex</h3>,\r\n\t\t\t\t<div className={\"label-controls-container\"}>,\r\n\t\t\t\t\t<h4>Text:</h4>\r\n\t\t\t\t\t<RadioGroup buttons={buttons} name={\"custom-label\"} onRadioButtonClick={this.onLabelRadioClick} />\r\n\t\t\t\t\t<Textbox hint={\"Custom label text...\"} name={\"customText\"} value={this.state.customText} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t<div className={\"label-colour-container\"}>\r\n\t\t\t\t\t\t<h4>Font colour: </h4>\r\n\t\t\t\t\t\t<input type={\"textbox\"} name={\"fontColour\"} value={this.state.fontColour} onChange={this.onFieldChange} />\r\n\t\t\t\t\t\t<input type={\"color\"} defaultValue={this.state.fontColour} value={this.state.fontColour} onChange={(e) => {\r\n\t\t\t\t\t\t\tthis.setState({fontColour: e.target.value});\r\n\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t]\r\n\t\t}\r\n\r\n\r\n\t\t// TODO: Decide between:\r\n\t\t//   - (1) changing HCI so that users create a child node from a parent, and can only make a (single) parent node per collection from the collection context menu\r\n\t\t//   - (2) passing down the collection's words into the modal as a prop. Not sure what kind of performance/memory hit this would induce\r\n\t\t// Parents\r\n\t\tlet parentList = [], potentialParentList = [], parentControls = [];\r\n\t\tif(this.props.node.parents)\r\n\t\t{\r\n\t\t\t// Gather current parents\r\n\t\t\tfor(let i = 0; i < this.props.node.parents.length; ++i)\r\n\t\t\t{\r\n\t\t\t\tlet parent = this.props.node.parents[i];\r\n\t\t\t\tparentList.push(<div className={\"parent-list\"}>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t{parent.word + \" (\" + parent.language + \")\"}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Button value={\"X\"} onClick={(e) => {\r\n\t\t\t\t\t\t\tthis.props.node.parents.splice(i, 1);\r\n\t\t\t\t\t\t\tthis.setState({parents: this.props.node.parents});\r\n\t\t\t\t\t\t}} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this.props.words)\r\n\t\t{\r\n\t\t\tfor(let i = 0; i < this.props.words.length; ++i)\r\n\t\t\t{\r\n\t\t\t\t// List all potential new parents\r\n\t\t\t\tlet word = this.props.words[i];\r\n\t\t\t\tif(this.props.node !== word && !this.props.node.parents.includes(word))\r\n\t\t\t\t{\r\n\t\t\t\t\tpotentialParentList.push(<option key={i} data-index={i}>{word.word + \" (\" + word.language + \")\"}</option>);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(potentialParentList);\r\n\t\tlet potentialParents = <select name={\"selectedParent\"} onChange={(event) => {\r\n\t\t\tconst selectedIndex = event.target.selectedIndex;\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tselectedParentIndex: selectedIndex\r\n\t\t\t});\r\n\t\t}\r\n\t\t}>\r\n\t\t\t{potentialParentList}\r\n\t\t</select>;\r\n\t\tif(potentialParents)\r\n\t\t{\r\n\t\t\tparentControls = <Button id={\"add-node-modal-add-parent\"} value={\"Add parent\"} onClick={(e) => {\r\n\t\t\t\tlet selectedParent = potentialParentList[this.state.selectedParentIndex];\r\n\t\t\t\tlet parentIndex = selectedParent.props[\"data-index\"];\r\n\t\t\t\tthis.props.node.parents.push(this.props.words[parentIndex]);\r\n\t\t\t\tthis.setState({parents: this.props.node.parents});\r\n\t\t\t}} />\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className={\"modal\"}>\r\n\t\t\t\t<h3>Word</h3>\r\n\t\t\t\t<Textbox hint={\"e.g. \\\"Horse\\\"...\"} name={\"word\"} value={this.state.word} onFieldChange={this.onFieldChange}/>\r\n\t\t\t\t<h3>Language</h3>\r\n\t\t\t\t{languageInput}\r\n\t\t\t\t<h3>Current Parents</h3>\r\n\t\t\t\t{parentList}\r\n\t\t\t\t<h3>Potential Parents</h3>\r\n\t\t\t\t{potentialParents}\r\n\t\t\t\t{parentControls}\r\n\t\t\t\t{labelControls}\r\n\t\t\t\t{selectCollection}\r\n\t\t\t\t<Button value={\"Submit\"} id={\"add-node-modal-submit\"} onClick={(e) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.validation())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Build node structure to match collection type\r\n\t\t\t\t\t\tlet updatedNode;\r\n\t\t\t\t\t\tif(this.props.type === \"journey\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tupdatedNode = {\r\n\t\t\t\t\t\t\t\t...this.props.node,\r\n\t\t\t\t\t\t\t\tword: this.state.word, language: this.state.language, colour: this.state.colour,\r\n\t\t\t\t\t\t\t\tvertex: {\r\n\t\t\t\t\t\t\t\t\t...this.props.node.vertex,\r\n\t\t\t\t\t\t\t\t\tfontColour: this.state.fontColour\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(this.props.type === \"cognate\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tupdatedNode = {\r\n\t\t\t\t\t\t\t\t...this.props.node,\r\n\t\t\t\t\t\t\t\tword: this.state.word, language: this.state.language, colour: this.state.colour,\r\n\t\t\t\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\t\t\t\t...this.props.node.label,\r\n\t\t\t\t\t\t\t\t\ttype: this.state.labelType, customText: this.state.customText, fontColour: this.state.fontColour, fontSize: this.state.fontSize\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.props.onNodeSubmit(e, this.props.collectionIndex, updatedNode);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}