{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { useD3 } from \"../hooks/useD3\";\nimport languageCountries from \"../supportedLanguages.json\";\nimport countries_data from \"../data/countries/countries.json\";\nimport { AddEditNodeModal } from \"./AddEditNodeModal\";\nimport { ContextMenu } from \"./ContextMenu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Map(props) {\n  _s();\n\n  // Prop functions\n  const openContextMenu = props.openContextMenu.bind(this);\n  const addNode = props.addNode.bind(this);\n  const editNode = props.editNode.bind(this);\n  const removeNode = props.removeNode.bind(this);\n  const moveLabel = props.moveLabel.bind(this);\n  const openModal = props.openModal.bind(this);\n  const collections = props.collections;\n\n  let topojson = require(\"topojson\");\n\n  let countries_data = require(\"../data/countries/countries.json\");\n  /* Example of using d3-geo in useEffect() instead of custom useD3() */\n  // Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\n\n\n  useEffect(() => {\n    let svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\n    let countries = countries_data.features; // Create path (passed as svg attribute later to draw the countries)\n    // TODO: Have it auto-scale as window is dragged\n\n    const width = svg._groups[0][0].clientWidth;\n    const height = svg._groups[0][0].clientHeight;\n    const projection = d3.geoConicConformal().center([8, 52.823]) // Middle of Europe(ish)\n    .scale(1360).translate([width / 2, height / 2]);\n    const path = d3.geoPath().projection(projection); // Draw countries, bind data and handlers\n\n    let countryPaths = svg.append(\"g\").selectAll(\"path\") // svg->g->path\n    .data(countries) // svg->g->path\n    .enter() // svg->g->path (create new nodes per data)\n    .append(\"path\") // svg->g->path (create new nodes per data)\n    .attr(\"fill\", d => determineFillColour(d)).on(\"click\", function (e, d) {// TODO: Possibly same functions as context menu (see about calling this.onContextMenu() to keep things nice and DRY)\n    }).on(\"contextmenu\", function (e, d) {\n      e.preventDefault(); // Prevent browser context menu from opening\n\n      const nodeObject = findNodes(d, \"cognate\");\n\n      if (nodeObject) {\n        const contextMenuItems = [{\n          text: \"Add new node (journey)\",\n          handler: e => {\n            // Add new journey node within the country/region they right-clicked on (there may be multiple nodes in one country/region for journeys)\n            let collectionList = collections.filter(collection => collection.type === \"journey\"); // Journeys only\n\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: addNode,\n              collectionList: collectionList,\n              language: d.properties.languages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Add sibling node (cognate)\",\n          handler: e => {\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: addNode,\n              collectionIndex: nodeObject.collectionIndex,\n              language: d.properties.languages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Edit node (cognate)\",\n          handler: e => {\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: editNode,\n              collectionIndex: nodeObject.collectionIndex,\n              childNodeIndex: nodeObject.childNodeIndex,\n              word: nodeObject.node.word,\n              language: nodeObject.node.language\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Remove node (cognate)\",\n          handler: e => {\n            removeNode(e, nodeObject.collectionIndex, nodeObject.childNodeIndex);\n          }\n        }];\n        openContextMenu(e, /*#__PURE__*/_jsxDEV(ContextMenu, {\n          x: e.clientX,\n          y: e.clientY,\n          items: contextMenuItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this));\n      } else {\n        // TODO: Context menu for adding to new collection, adding to existing collection\n        const contextMenuItems = [{\n          text: \"Add new node (journey)\",\n          handler: e => {\n            let collectionList = collections.filter(collection => collection.type === \"journey\"); // Journeys only\n\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: addNode,\n              collectionList: collectionList,\n              language: d.properties.languages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Add to collection (cognate)\",\n          handler: e => {\n            let collectionList = collections.filter(collection => collection.type === \"cognate\"); // Cognates only\n\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: addNode,\n              collectionList: collectionList,\n              language: d.properties.languages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 22\n            }, this));\n          }\n        }];\n        openContextMenu(e, /*#__PURE__*/_jsxDEV(ContextMenu, {\n          x: e.clientX,\n          y: e.clientY,\n          items: contextMenuItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this));\n      }\n    }).on(\"mouseover\", function (e, d) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"white\") // White can't become transparent\n        element.attr(\"fill\", \"rgb(230,230,230)\");else element.attr(\"fill-opacity\", \"0.65\");\n    }).on(\"mouseout\", function (e, d) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\n        element.attr(\"fill\", \"white\");else element.attr(\"fill-opacity\", \"1\");\n    }).attr(\"stroke\", \"black\").attr(\"stroke-linejoin\", \"round\").attr(\"d\", path); // Cognate labels\n\n    const labelG = svg.append(\"g\");\n    const labels = labelG.classed(\"labels\", true);\n    countryPaths.each(function (f, i) {\n      // Only place labels of countries with associated cognate data\n      // TODO: Make this a setting\n      let cognateNodeObject = findNodes(f, \"cognate\");\n      let journeyNodeObjects = findNodes(f, \"journey\");\n\n      if (cognateNodeObject) {\n        /* START Cognates Visualisations */\n        let cognateNode = cognateNodeObject.node;\n        let boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\n\n        let fontSize = cognateNode.label.fontSize; // Font size of the label\n\n        let labelText = cognateNode.language; // Language by default\n\n        if (cognateNode.label.type === \"country\") labelText = f.properties.name_long;else if (cognateNode.label.type === \"customText\") labelText = cognateNode.label.customText;else if (cognateNode.label.type === \"word\") labelText = cognateNode.word; // TODO: Initial scale factor depending on size of country (to stop oversized text from escaping country)\n\n        if (labelText.length !== 0 && !cognateNode.fontSize) // Only scale if font size hasn't been set by user\n          {\n            if (boundingBox.width < labelText.length * 16) fontSize = boundingBox.width / 8 + \"px\";\n          } // Append labels to paths, with co-ordinates according to feature's position on map\n\n\n        let labelX = cognateNode.label.x === null ? boundingBox.x + boundingBox.width / 4 : cognateNode.label.x;\n        let labelY = cognateNode.label.y === null ? boundingBox.y + boundingBox.height / 2 : cognateNode.label.y;\n        let label = labelG.append(\"text\").attr(\"x\", labelX).attr(\"y\", labelY).attr(\"fill\", cognateNode.label.fontColour).style(\"font-size\", fontSize).text(labelText);\n        /* END Cognates Visualisations */\n\n        /* START Journeys Visualisations */\n\n        let vertexText = cognateNode.language; // Language by default\n\n        if (cognateNode.vertex.type === \"country\") vertexText = f.properties.name_long;else if (cognateNode.vertex.type === \"customText\") vertexText = cognateNode.vertex.customText;else if (cognateNode.vertex.type === \"word\") vertexText = cognateNode.vertex.word; // Append vertices\n\n        let vertexX = cognateNode.vertex.x === null ? boundingBox.x + boundingBox.width / 4 : cognateNode.vertex.x;\n        let vertexY = cognateNode.vertex.y === null ? boundingBox.y + boundingBox.height / 2 : cognateNode.vertex.y;\n        let vertex = labelG.append(\"circ\").attr(\"x\", vertexX).attr(\"y\", vertexY).attr(\"stroke\", cognateNode.vertex.strokeColour).attr(\"fill\", cognateNode.vertex.fillColour).text(vertexText);\n        /* END Journeys Visualisations */\n        // Dragging/resizing handlers\n\n        let startXOffset,\n            startYOffset,\n            resizing = false,\n            startX,\n            startY,\n            startSize,\n            newSize;\n        label.on(\"mousemove\", e => {\n          let labelX = parseFloat(label.attr(\"x\")),\n              labelY = parseFloat(label.attr(\"y\"));\n          let mouseX = e.layerX,\n              mouseY = e.layerY; // Determine corner of text's box\n\n          const southEastCorner = {\n            xStart: labelX + label.node().getBBox().width - 5,\n            xEnd: labelX + label.node().getBBox().width + 15,\n            yStart: labelY,\n            yEnd: labelY + 10\n          }; // Check corner\n\n          if (mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd && mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd) {\n            label.style(\"cursor\", \"se-resize\");\n          } else label.style(\"cursor\", \"grab\");\n        }).call(d3.drag().on(\"start\", e => {\n          let labelX = parseFloat(label.attr(\"x\")),\n              labelY = parseFloat(label.attr(\"y\"));\n          let mouseX = e.x,\n              mouseY = e.y;\n          startXOffset = mouseX - labelX;\n          startYOffset = mouseY - labelY; // Determine corner of text's box\n\n          const southEastCorner = {\n            xStart: labelX + label.node().getBBox().width - 5,\n            xEnd: labelX + label.node().getBBox().width + 15,\n            yStart: labelY,\n            yEnd: labelY + 10\n          }; // Check corner\n\n          if (mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd && mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd) {\n            resizing = true;\n            startX = mouseX;\n            startY = mouseY;\n            startSize = parseFloat(label.style(\"font-size\"));\n          }\n        }).on(\"drag\", e => {\n          let mouseX = e.x,\n              mouseY = e.y;\n\n          if (resizing) {\n            // Resize the label\n            if (mouseX >= startX && mouseY >= startY || mouseX <= startX && mouseY <= startY) {\n              let deltaX = mouseX - startX;\n              newSize = startSize + deltaX / 10;\n              if (newSize < 5) newSize = 5; // Floor of 5px to prevent it shrinking into nothingness\n\n              label.style(\"font-size\", newSize + \"px\"); // Only visually, not updating state itself\n            }\n          } else {\n            // Move the label\n            labelX = mouseX - startXOffset;\n            labelY = mouseY - startYOffset;\n            label.attr(\"x\", labelX).attr(\"y\", labelY); // Only visually\n          }\n        }).on(\"end\", () => {\n          resizing = false;\n          moveLabel(cognateNodeObject.collectionIndex, cognateNodeObject.childNodeIndex, labelX, labelY, newSize); // Set final properties\n        }));\n      }\n    }); // Graticules (lines on the map)\n\n    const g = svg.append(\"g\");\n    const graticules = g.classed(\"graticules\", true).append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(0,0,0,.2)\").attr(\"d\", path(d3.geoGraticule()()));\n    /*\r\n    svg.call(d3.zoom().on(\"zoom\", function () {\r\n    \tz = d3.event.transform.k;\r\n    \tdraw(); // TODO: Contain above render code into draw() function\r\n    }));\r\n     */\n    // Clean-up function (kills all SVG elements upon unmounting)\n\n    return function cleanup() {\n      svg.selectAll(\"g\").remove();\n    };\n  });\n\n  function findNodes(d, type) {\n    // Search collections\n    for (let c = 0; c < collections.length; ++c) {\n      let collection = collections[c];\n\n      if (type === \"cognate\") {\n        if (collection.type === \"cognate\") {\n          for (let n = 0; n < collection.childNodes.length; ++n) {\n            let childNode = collection.childNodes[n];\n\n            if (d.properties.languages.includes(childNode.language)) {\n              return {\n                node: childNode,\n                collectionIndex: c,\n                childNodeIndex: n\n              };\n            }\n          }\n        }\n      } else if (type === \"journey\") {\n        let countryNodes = [];\n\n        if (collection.type === \"journey\") {\n          for (let n = 0; n < collection.childNodes.length; ++n) {\n            let childNode = collection.childNodes[n];\n            if (d.properties.languages.include(childNode.language)) countryNodes.push(childNode);\n          }\n\n          return countryNodes;\n        }\n      }\n    }\n  }\n  /**\r\n   * Determines country SVG fill colour according to countries' language(s) and the specified colour of that language's cognate node(s)\r\n   * @param d Data attached to DOM element via D3 (i.e. the country)\r\n   * @returns {string} The fill colour, as specified by user in Collection.jsx\r\n   */\n\n\n  function determineFillColour(d) {\n    const nodeObject = findNodes(d, \"cognate\"); // Find node in collections\n\n    if (nodeObject) return nodeObject.node.colour; // Country has associated collection node? Return the colour\n    else return \"white\"; // Otherwise, return white by default for all countries with no associated data\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      /*ref={ref}*/\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        margin: 0,\n        backgroundColor: \"#3d73ab\"\n        /* The sea */\n\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Map, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Map.jsx"],"names":["React","useEffect","useState","d3","useD3","languageCountries","countries_data","AddEditNodeModal","ContextMenu","Map","props","openContextMenu","bind","addNode","editNode","removeNode","moveLabel","openModal","collections","topojson","require","svg","selectAll","countries","features","width","_groups","clientWidth","height","clientHeight","projection","geoConicConformal","center","scale","translate","path","geoPath","countryPaths","append","data","enter","attr","d","determineFillColour","on","e","preventDefault","nodeObject","findNodes","contextMenuItems","text","handler","collectionList","filter","collection","type","properties","languages","collectionIndex","childNodeIndex","node","word","language","clientX","clientY","element","select","labelG","labels","classed","each","f","i","cognateNodeObject","journeyNodeObjects","cognateNode","boundingBox","getBBox","fontSize","label","labelText","name_long","customText","length","labelX","x","labelY","y","fontColour","style","vertexText","vertex","vertexX","vertexY","strokeColour","fillColour","startXOffset","startYOffset","resizing","startX","startY","startSize","newSize","parseFloat","mouseX","layerX","mouseY","layerY","southEastCorner","xStart","xEnd","yStart","yEnd","call","drag","deltaX","g","graticules","geoGraticule","cleanup","remove","c","n","childNodes","childNode","includes","countryNodes","include","push","colour","margin","backgroundColor"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {useD3} from \"../hooks/useD3\";\r\nimport languageCountries from \"../supportedLanguages.json\";\r\nimport countries_data from \"../data/countries/countries.json\";\r\nimport {AddEditNodeModal} from \"./AddEditNodeModal\";\r\nimport {ContextMenu} from \"./ContextMenu\";\r\n\r\nexport function Map(props)\r\n{\r\n\t// Prop functions\r\n\tconst openContextMenu = props.openContextMenu.bind(this);\r\n\tconst addNode = props.addNode.bind(this);\r\n\tconst editNode = props.editNode.bind(this);\r\n\tconst removeNode = props.removeNode.bind(this);\r\n\tconst moveLabel = props.moveLabel.bind(this);\r\n\tconst openModal = props.openModal.bind(this);\r\n\r\n\tconst collections = props.collections;\r\n\tlet topojson = require(\"topojson\");\r\n\tlet countries_data = require(\"../data/countries/countries.json\");\r\n\r\n\t/* Example of using d3-geo in useEffect() instead of custom useD3() */\r\n\t// Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\r\n\tuseEffect(() => {\r\n\t\tlet svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\r\n\t\tlet countries = countries_data.features;\r\n\r\n\t\t// Create path (passed as svg attribute later to draw the countries)\r\n\t\t// TODO: Have it auto-scale as window is dragged\r\n\t\tconst width = svg._groups[0][0].clientWidth;\r\n\t\tconst height = svg._groups[0][0].clientHeight;\r\n\t\tconst projection = d3.geoConicConformal()\r\n\t\t\t.center([8, 52.823]) // Middle of Europe(ish)\r\n\t\t\t.scale(1360)\r\n\t\t\t.translate([width/2, height/2]);\r\n\t\tconst path = d3.geoPath().projection(projection);\r\n\r\n\t\t// Draw countries, bind data and handlers\r\n\t\tlet countryPaths = svg.append(\"g\")\r\n\t\t\t.selectAll(\"path\") // svg->g->path\r\n\t\t\t.data(countries)         // svg->g->path\r\n\t\t\t.enter()                 // svg->g->path (create new nodes per data)\r\n\t\t\t.append(\"path\")          // svg->g->path (create new nodes per data)\r\n\t\t\t.attr(\"fill\", (d) => determineFillColour(d))\r\n\t\t\t.on(\"click\", function(e, d){\r\n\t\t\t\t// TODO: Possibly same functions as context menu (see about calling this.onContextMenu() to keep things nice and DRY)\r\n\t\t\t})\r\n\t\t\t.on(\"contextmenu\", function(e, d){\r\n\t\t\t\te.preventDefault(); // Prevent browser context menu from opening\r\n\t\t\t\tconst nodeObject = findNodes(d, \"cognate\");\r\n\r\n\t\t\t\tif(nodeObject)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst contextMenuItems = [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add new node (journey)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\t// Add new journey node within the country/region they right-clicked on (there may be multiple nodes in one country/region for journeys)\r\n\t\t\t\t\t\t\t\tlet collectionList = collections.filter(collection => collection.type === \"journey\"); // Journeys only\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={addNode} collectionList={collectionList} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add sibling node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={addNode} collectionIndex={nodeObject.collectionIndex} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Edit node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={editNode} collectionIndex={nodeObject.collectionIndex} childNodeIndex={nodeObject.childNodeIndex}\r\n\t\t\t\t\t\t\t\t                               word={nodeObject.node.word} language={nodeObject.node.language} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Remove node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tremoveNode(e, nodeObject.collectionIndex, nodeObject.childNodeIndex);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t];\r\n\t\t\t\t\topenContextMenu(e, <ContextMenu x={e.clientX} y={e.clientY} items={contextMenuItems} />);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// TODO: Context menu for adding to new collection, adding to existing collection\r\n\t\t\t\t\tconst contextMenuItems = [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add new node (journey)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tlet collectionList = collections.filter(collection => collection.type === \"journey\"); // Journeys only\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={addNode} collectionList={collectionList} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add to collection (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tlet collectionList = collections.filter(collection => collection.type === \"cognate\"); // Cognates only\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={addNode} collectionList={collectionList} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t\topenContextMenu(e, <ContextMenu x={e.clientX} y={e.clientY} items={contextMenuItems} />);\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\t\t\t.on(\"mouseover\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"white\") // White can't become transparent\r\n\t\t\t\t\telement.attr(\"fill\", \"rgb(230,230,230)\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"0.65\");\r\n\t\t\t})\r\n\t\t\t.on(\"mouseout\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\r\n\t\t\t\t\telement.attr(\"fill\", \"white\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"1\");\r\n\t\t\t})\r\n\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t.attr(\"stroke-linejoin\", \"round\")\r\n\t\t\t.attr(\"d\", path);\r\n\r\n\t\t// Cognate labels\r\n\t\tconst labelG = svg.append(\"g\");\r\n\t\tconst labels = labelG.classed(\"labels\", true);\r\n\t\tcountryPaths.each(function(f, i) {\r\n\t\t\t// Only place labels of countries with associated cognate data\r\n\t\t\t// TODO: Make this a setting\r\n\t\t\tlet cognateNodeObject = findNodes(f, \"cognate\");\r\n\t\t\tlet journeyNodeObjects = findNodes(f, \"journey\");\r\n\t\t\tif(cognateNodeObject)\r\n\t\t\t{\r\n\t\t\t\t/* START Cognates Visualisations */\r\n\t\t\t\tlet cognateNode = cognateNodeObject.node;\r\n\t\t\t\tlet boundingBox = d3.select(this).node().getBBox();        // Get rectangular bounds of country/region\r\n\r\n\t\t\t\tlet fontSize = cognateNode.label.fontSize;                 // Font size of the label\r\n\t\t\t\tlet labelText = cognateNode.language;                      // Language by default\r\n\t\t\t\tif(cognateNode.label.type === \"country\") labelText = f.properties.name_long;\r\n\t\t\t\telse if(cognateNode.label.type === \"customText\") labelText = cognateNode.label.customText;\r\n\t\t\t\telse if(cognateNode.label.type === \"word\") labelText = cognateNode.word;\r\n\r\n\t\t\t\t// TODO: Initial scale factor depending on size of country (to stop oversized text from escaping country)\r\n\t\t\t\tif(labelText.length !== 0 && !cognateNode.fontSize) // Only scale if font size hasn't been set by user\r\n\t\t\t\t{\r\n\t\t\t\t\tif(boundingBox.width < (labelText.length * 16))\r\n\t\t\t\t\t\tfontSize = boundingBox.width/8 + \"px\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Append labels to paths, with co-ordinates according to feature's position on map\r\n\t\t\t\tlet labelX = (cognateNode.label.x === null) ? (boundingBox.x + boundingBox.width/4) : cognateNode.label.x;\r\n\t\t\t\tlet labelY = (cognateNode.label.y === null) ? (boundingBox.y + boundingBox.height/2) : cognateNode.label.y;\r\n\t\t\t\tlet label = labelG.append(\"text\")\r\n\t\t\t\t\t.attr(\"x\", labelX).attr(\"y\", labelY)\r\n\t\t\t\t\t.attr(\"fill\", cognateNode.label.fontColour)\r\n\t\t\t\t\t.style(\"font-size\", fontSize)\r\n\t\t\t\t\t.text(labelText);\r\n\r\n\t\t\t\t/* END Cognates Visualisations */\r\n\r\n\t\t\t\t/* START Journeys Visualisations */\r\n\t\t\t\tlet vertexText = cognateNode.language; // Language by default\r\n\t\t\t\tif(cognateNode.vertex.type === \"country\") vertexText = f.properties.name_long;\r\n\t\t\t\telse if(cognateNode.vertex.type === \"customText\") vertexText = cognateNode.vertex.customText;\r\n\t\t\t\telse if(cognateNode.vertex.type === \"word\") vertexText = cognateNode.vertex.word;\r\n\r\n\t\t\t\t// Append vertices\r\n\t\t\t\tlet vertexX = (cognateNode.vertex.x === null) ? (boundingBox.x + boundingBox.width/4) : cognateNode.vertex.x;\r\n\t\t\t\tlet vertexY = (cognateNode.vertex.y === null) ? (boundingBox.y + boundingBox.height/2) : cognateNode.vertex.y;\r\n\t\t\t\tlet vertex = labelG.append(\"circ\")\r\n\t\t\t\t\t.attr(\"x\", vertexX).attr(\"y\", vertexY)\r\n\t\t\t\t\t.attr(\"stroke\", cognateNode.vertex.strokeColour)\r\n\t\t\t\t\t.attr(\"fill\", cognateNode.vertex.fillColour)\r\n\t\t\t\t\t.text(vertexText);\r\n\r\n\r\n\t\t\t\t/* END Journeys Visualisations */\r\n\r\n\t\t\t\t// Dragging/resizing handlers\r\n\t\t\t\tlet startXOffset, startYOffset, resizing = false, startX, startY, startSize, newSize;\r\n\t\t\t\tlabel\r\n\t\t\t\t\t.on(\"mousemove\", (e) => {\r\n\t\t\t\t\t\tlet labelX = parseFloat(label.attr(\"x\")), labelY = parseFloat(label.attr(\"y\"));\r\n\t\t\t\t\t\tlet mouseX = e.layerX, mouseY = e.layerY;\r\n\r\n\t\t\t\t\t\t// Determine corner of text's box\r\n\t\t\t\t\t\tconst southEastCorner = {\r\n\t\t\t\t\t\t\txStart: labelX + label.node().getBBox().width - 5,\r\n\t\t\t\t\t\t\txEnd: labelX + label.node().getBBox().width + 15,\r\n\t\t\t\t\t\t\tyStart: labelY,\r\n\t\t\t\t\t\t\tyEnd: labelY + 10\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Check corner\r\n\t\t\t\t\t\tif(mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd\r\n\t\t\t\t\t\t\t&& mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlabel.style(\"cursor\", \"se-resize\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tlabel.style(\"cursor\", \"grab\");\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.call(d3.drag()\r\n\t\t\t\t\t\t.on(\"start\", (e) => {\r\n\t\t\t\t\t\t\tlet labelX = parseFloat(label.attr(\"x\")), labelY = parseFloat(label.attr(\"y\"));\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tstartXOffset = mouseX - labelX;\r\n\t\t\t\t\t\t\tstartYOffset = mouseY - labelY;\r\n\r\n\t\t\t\t\t\t\t// Determine corner of text's box\r\n\t\t\t\t\t\t\tconst southEastCorner = {\r\n\t\t\t\t\t\t\t\txStart: labelX + label.node().getBBox().width - 5,\r\n\t\t\t\t\t\t\t\txEnd: labelX + label.node().getBBox().width + 15,\r\n\t\t\t\t\t\t\t\tyStart: labelY,\r\n\t\t\t\t\t\t\t\tyEnd: labelY + 10\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Check corner\r\n\t\t\t\t\t\t\tif(mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd\r\n\t\t\t\t\t\t\t\t&& mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tresizing = true;\r\n\t\t\t\t\t\t\t\tstartX = mouseX;\r\n\t\t\t\t\t\t\t\tstartY = mouseY;\r\n\t\t\t\t\t\t\t\tstartSize = parseFloat(label.style(\"font-size\"));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"drag\", (e) => {\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tif(resizing)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Resize the label\r\n\t\t\t\t\t\t\t\tif(mouseX >= startX && mouseY >= startY || mouseX <= startX && mouseY <= startY)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tlet deltaX = mouseX - startX;\r\n\t\t\t\t\t\t\t\t\tnewSize = startSize + (deltaX / 10);\r\n\t\t\t\t\t\t\t\t\tif(newSize < 5) newSize = 5; // Floor of 5px to prevent it shrinking into nothingness\r\n\t\t\t\t\t\t\t\t\tlabel.style(\"font-size\", newSize + \"px\"); // Only visually, not updating state itself\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Move the label\r\n\t\t\t\t\t\t\t\tlabelX = mouseX - startXOffset;\r\n\t\t\t\t\t\t\t\tlabelY = mouseY - startYOffset;\r\n\t\t\t\t\t\t\t\tlabel.attr(\"x\", labelX).attr(\"y\", labelY); // Only visually\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"end\", () => {\r\n\t\t\t\t\t\t\tresizing = false;\r\n\t\t\t\t\t\t\tmoveLabel(cognateNodeObject.collectionIndex, cognateNodeObject.childNodeIndex, labelX, labelY, newSize); // Set final properties\r\n\t\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Graticules (lines on the map)\r\n\t\tconst g = svg.append(\"g\");\r\n\t\tconst graticules = g.classed(\"graticules\", true)\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\")\r\n\t\t\t.attr(\"d\", path(d3.geoGraticule()()));\r\n\r\n\t\t/*\r\n\t\tsvg.call(d3.zoom().on(\"zoom\", function () {\r\n\t\t\tz = d3.event.transform.k;\r\n\t\t\tdraw(); // TODO: Contain above render code into draw() function\r\n\t\t}));\r\n\t\t */\r\n\r\n\t\t// Clean-up function (kills all SVG elements upon unmounting)\r\n\t\treturn function cleanup()\r\n\t\t{\r\n\t\t\tsvg.selectAll(\"g\").remove();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\tfunction findNodes(d, type)\r\n\t{\r\n\t\t// Search collections\r\n\t\tfor(let c = 0; c < collections.length; ++c)\r\n\t\t{\r\n\t\t\tlet collection = collections[c];\r\n\r\n\t\t\tif(type === \"cognate\")\r\n\t\t\t{\r\n\t\t\t\tif(collection.type === \"cognate\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let n = 0; n < collection.childNodes.length; ++n)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet childNode = collection.childNodes[n];\r\n\r\n\t\t\t\t\t\tif(d.properties.languages.includes(childNode.language))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {node: childNode, collectionIndex: c, childNodeIndex: n};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(type === \"journey\")\r\n\t\t\t{\r\n\t\t\t\tlet countryNodes = [];\r\n\t\t\t\tif(collection.type === \"journey\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let n = 0; n < collection.childNodes.length; ++n)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet childNode = collection.childNodes[n];\r\n\r\n\t\t\t\t\t\tif(d.properties.languages.include(childNode.language))\r\n\t\t\t\t\t\t\tcountryNodes.push(childNode);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn countryNodes;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Determines country SVG fill colour according to countries' language(s) and the specified colour of that language's cognate node(s)\r\n\t * @param d Data attached to DOM element via D3 (i.e. the country)\r\n\t * @returns {string} The fill colour, as specified by user in Collection.jsx\r\n\t */\r\n\tfunction determineFillColour(d)\r\n\t{\r\n\t\tconst nodeObject = findNodes(d, \"cognate\"); // Find node in collections\r\n\t\tif(nodeObject) return nodeObject.node.colour;   // Country has associated collection node? Return the colour\r\n\t\telse return \"white\";                            // Otherwise, return white by default for all countries with no associated data\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div className={\"map-container\"}>\r\n\t\t\t<svg\r\n\t\t\t\t/*ref={ref}*/\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\tbackgroundColor: \"#3d73ab\" /* The sea */\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}