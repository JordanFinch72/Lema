{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { useD3 } from \"../hooks/useD3\";\nimport languageCountries from \"../supportedLanguages.json\";\nimport countries_data from \"../data/countries/countries.json\";\nimport { AddEditNodeModal } from \"./AddEditNodeModal\";\nimport { ContextMenu } from \"./ContextMenu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Map(props) {\n  _s();\n\n  // Prop functions\n  const openContextMenu = props.openContextMenu.bind(this);\n  const addNode = props.addNode.bind(this);\n  const editNode = props.editNode.bind(this);\n  const removeNode = props.removeNode.bind(this);\n  const openModal = props.openModal.bind(this);\n  const collections = props.collections;\n\n  let topojson = require(\"topojson\");\n\n  let countries_data = require(\"../data/countries/countries.json\");\n  /* Example of using d3-geo in useEffect() instead of custom useD3() */\n  // Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\n\n\n  useEffect(() => {\n    let svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\n    let countries = countries_data.features; // Create path (passed as svg attribute later to draw the countries)\n    // TODO: Have it auto-scale as window is dragged\n\n    const width = svg._groups[0][0].clientWidth;\n    const height = svg._groups[0][0].clientHeight;\n    const projection = d3.geoConicConformal().center([8, 52.823]) // Middle of Europe(ish)\n    .scale(1360).translate([width / 2, height / 2]);\n    const path = d3.geoPath().projection(projection); // Draw countries, bind data and handlers\n\n    svg.append(\"g\").selectAll(\"path\") // svg->g->path\n    .data(countries) // svg->g->path\n    .enter() // svg->g->path (create new nodes per data)\n    .append(\"path\") // svg->g->path (create new nodes per data)\n    .attr(\"fill\", d => determineFillColour(d)).on(\"click\", function (e, d) {\n      // TODO: Functions (dragging nodes; etc.)\n      alert(\"Hello, \" + d.properties.name + \"! You speak \" + d.properties.languages + \"!\");\n    }).on(\"contextmenu\", function (e, d) {\n      e.preventDefault(); // Prevent browser context menu from opening\n\n      const nodeObject = findNode(d, \"cognate\");\n\n      if (nodeObject) {\n        const contextMenuItems = [{\n          text: \"Add sibling node (journey)\",\n          handler: e => {// TODO: Add new journey node within the country/region they right-clicked on (there may be multiple nodes in one country/region for journeys)\n            //         - Edit/remove handlers will be in a context menu for the node bubble/circle thing itself\n          }\n        }, {\n          text: \"Add sibling node (cognate)\",\n          handler: e => {\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: addNode,\n              collectionIndex: nodeObject.collectionIndex\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Edit node (cognate)\",\n          handler: e => {\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: editNode,\n              collectionIndex: nodeObject.collectionIndex,\n              childNodeIndex: nodeObject.childNodeIndex,\n              word: nodeObject.node.word,\n              language: nodeObject.node.language\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Remove node (cognate)\",\n          handler: e => {\n            removeNode(e, nodeObject.collectionIndex, nodeObject.childNodeIndex);\n          }\n        }];\n        openContextMenu(e, /*#__PURE__*/_jsxDEV(ContextMenu, {\n          x: e.clientX,\n          y: e.clientY,\n          items: contextMenuItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this));\n      } else {\n        // TODO: Context menu for adding to new collection, adding to existing collection\n        const contextMenuItems = [{\n          text: \"Add to new collection\",\n          handler: e => {}\n        }, {\n          text: \"Add to existing collection (cognate)\",\n          handler: e => {}\n        }];\n      }\n    }).on(\"mouseover\", function (e, d) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"white\") // White can't become transparent\n        element.attr(\"fill\", \"rgb(230,230,230)\");else element.attr(\"fill-opacity\", \"0.65\");\n    }).on(\"mouseout\", function (e, d) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\n        element.attr(\"fill\", \"white\");else element.attr(\"fill-opacity\", \"1\");\n    }).attr(\"stroke\", \"black\").attr(\"stroke-linejoin\", \"round\").attr(\"d\", path); // Graticules (lines on the map)\n\n    const g = svg.append(\"g\");\n    const graticules = g.classed(\"graticules\", true).append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(0,0,0,.2)\").attr(\"d\", path(d3.geoGraticule()()));\n    /*\r\n    svg.call(d3.zoom().on(\"zoom\", function () {\r\n    \tz = d3.event.transform.k;\r\n    \tdraw(); // TODO: Contain above render code into draw() function\r\n    }));\r\n     */\n    // Clean-up function (kills all SVG elements upon unmounting)\n\n    return function cleanup() {\n      svg.selectAll(\"g\").remove();\n    };\n  });\n\n  function findNode(d, type) {\n    // Search collections\n    for (let c = 0; c < collections.length; ++c) {\n      let collection = collections[c];\n\n      if (type === \"cognate\") {\n        if (collection.type === \"cognate\") {\n          for (let n = 0; n < collection.childNodes.length; ++n) {\n            let childNode = collection.childNodes[n];\n\n            if (d.properties.languages.includes(childNode.language)) {\n              return {\n                node: childNode,\n                collectionIndex: c,\n                childNodeIndex: n\n              };\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\r\n   * Determines country SVG fill colour according to countries' language(s) and the specified colour of that language's cognate node(s)\r\n   * @param d Data attached to DOM element via D3 (i.e. the country)\r\n   * @returns {string} The fill colour, as specified by user in Collection.jsx\r\n   */\n\n\n  function determineFillColour(d) {\n    const nodeObject = findNode(d, \"cognate\"); // Find node in collections\n\n    if (nodeObject) return nodeObject.node.colour; // Country has associated collection node? Return the colour\n    else return \"white\"; // Otherwise, return white by default for all countries with no associated data\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      /*ref={ref}*/\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        margin: 0,\n        backgroundColor: \"#3d73ab\"\n        /* The sea */\n\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Map, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Map.jsx"],"names":["React","useEffect","useState","d3","useD3","languageCountries","countries_data","AddEditNodeModal","ContextMenu","Map","props","openContextMenu","bind","addNode","editNode","removeNode","openModal","collections","topojson","require","svg","selectAll","countries","features","width","_groups","clientWidth","height","clientHeight","projection","geoConicConformal","center","scale","translate","path","geoPath","append","data","enter","attr","d","determineFillColour","on","e","alert","properties","name","languages","preventDefault","nodeObject","findNode","contextMenuItems","text","handler","collectionIndex","childNodeIndex","node","word","language","clientX","clientY","element","select","g","graticules","classed","geoGraticule","cleanup","remove","type","c","length","collection","n","childNodes","childNode","includes","colour","margin","backgroundColor"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {useD3} from \"../hooks/useD3\";\r\nimport languageCountries from \"../supportedLanguages.json\";\r\nimport countries_data from \"../data/countries/countries.json\";\r\nimport {AddEditNodeModal} from \"./AddEditNodeModal\";\r\nimport {ContextMenu} from \"./ContextMenu\";\r\n\r\nexport function Map(props)\r\n{\r\n\t// Prop functions\r\n\tconst openContextMenu = props.openContextMenu.bind(this);\r\n\tconst addNode = props.addNode.bind(this);\r\n\tconst editNode = props.editNode.bind(this);\r\n\tconst removeNode = props.removeNode.bind(this);\r\n\tconst openModal = props.openModal.bind(this);\r\n\r\n\tconst collections = props.collections;\r\n\tlet topojson = require(\"topojson\");\r\n\tlet countries_data = require(\"../data/countries/countries.json\");\r\n\r\n\t/* Example of using d3-geo in useEffect() instead of custom useD3() */\r\n\t// Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\r\n\tuseEffect(() => {\r\n\t\tlet svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\r\n\t\tlet countries = countries_data.features;\r\n\r\n\t\t// Create path (passed as svg attribute later to draw the countries)\r\n\t\t// TODO: Have it auto-scale as window is dragged\r\n\t\tconst width = svg._groups[0][0].clientWidth;\r\n\t\tconst height = svg._groups[0][0].clientHeight;\r\n\t\tconst projection = d3.geoConicConformal()\r\n\t\t\t.center([8, 52.823]) // Middle of Europe(ish)\r\n\t\t\t.scale(1360)\r\n\t\t\t.translate([width/2, height/2]);\r\n\t\tconst path = d3.geoPath().projection(projection);\r\n\r\n\t\t// Draw countries, bind data and handlers\r\n\t\tsvg.append(\"g\")\r\n\t\t\t.selectAll(\"path\") // svg->g->path\r\n\t\t\t.data(countries)         // svg->g->path\r\n\t\t\t.enter()                 // svg->g->path (create new nodes per data)\r\n\t\t\t.append(\"path\")          // svg->g->path (create new nodes per data)\r\n\t\t\t.attr(\"fill\", (d) => determineFillColour(d))\r\n\t\t\t.on(\"click\", function(e, d){\r\n\t\t\t\t// TODO: Functions (dragging nodes; etc.)\r\n\r\n\t\t\t\talert(\"Hello, \" + d.properties.name + \"! You speak \" + d.properties.languages + \"!\");\r\n\t\t\t})\r\n\t\t\t.on(\"contextmenu\", function(e, d){\r\n\t\t\t\te.preventDefault(); // Prevent browser context menu from opening\r\n\t\t\t\tconst nodeObject = findNode(d, \"cognate\");\r\n\r\n\t\t\t\tif(nodeObject)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst contextMenuItems = [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add sibling node (journey)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\t// TODO: Add new journey node within the country/region they right-clicked on (there may be multiple nodes in one country/region for journeys)\r\n\t\t\t\t\t\t\t\t//         - Edit/remove handlers will be in a context menu for the node bubble/circle thing itself\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add sibling node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={addNode} collectionIndex={nodeObject.collectionIndex} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Edit node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={editNode} collectionIndex={nodeObject.collectionIndex} childNodeIndex={nodeObject.childNodeIndex}\r\n\t\t\t\t\t\t\t\t                               word={nodeObject.node.word} language={nodeObject.node.language} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Remove node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tremoveNode(e, nodeObject.collectionIndex, nodeObject.childNodeIndex);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t];\r\n\t\t\t\t\topenContextMenu(e, <ContextMenu x={e.clientX} y={e.clientY} items={contextMenuItems} />);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// TODO: Context menu for adding to new collection, adding to existing collection\r\n\t\t\t\t\tconst contextMenuItems = [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add to new collection\", handler: (e) => {\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add to existing collection (cognate)\", handler: (e) => {\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\t\t\t.on(\"mouseover\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"white\") // White can't become transparent\r\n\t\t\t\t\telement.attr(\"fill\", \"rgb(230,230,230)\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"0.65\");\r\n\t\t\t})\r\n\t\t\t.on(\"mouseout\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\r\n\t\t\t\t\telement.attr(\"fill\", \"white\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"1\");\r\n\t\t\t})\r\n\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t.attr(\"stroke-linejoin\", \"round\")\r\n\t\t\t.attr(\"d\", path);\r\n\r\n\t\t// Graticules (lines on the map)\r\n\t\tconst g = svg.append(\"g\");\r\n\t\tconst graticules = g.classed(\"graticules\", true)\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\")\r\n\t\t\t.attr(\"d\", path(d3.geoGraticule()()));\r\n\r\n\t\t/*\r\n\t\tsvg.call(d3.zoom().on(\"zoom\", function () {\r\n\t\t\tz = d3.event.transform.k;\r\n\t\t\tdraw(); // TODO: Contain above render code into draw() function\r\n\t\t}));\r\n\t\t */\r\n\r\n\t\t// Clean-up function (kills all SVG elements upon unmounting)\r\n\t\treturn function cleanup()\r\n\t\t{\r\n\t\t\tsvg.selectAll(\"g\").remove();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\tfunction findNode(d, type)\r\n\t{\r\n\t\t// Search collections\r\n\t\tfor(let c = 0; c < collections.length; ++c)\r\n\t\t{\r\n\t\t\tlet collection = collections[c];\r\n\r\n\t\t\tif(type === \"cognate\")\r\n\t\t\t{\r\n\t\t\t\tif(collection.type === \"cognate\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let n = 0; n < collection.childNodes.length; ++n)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet childNode = collection.childNodes[n];\r\n\r\n\t\t\t\t\t\tif(d.properties.languages.includes(childNode.language))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {node: childNode, collectionIndex: c, childNodeIndex: n};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Determines country SVG fill colour according to countries' language(s) and the specified colour of that language's cognate node(s)\r\n\t * @param d Data attached to DOM element via D3 (i.e. the country)\r\n\t * @returns {string} The fill colour, as specified by user in Collection.jsx\r\n\t */\r\n\tfunction determineFillColour(d)\r\n\t{\r\n\t\tconst nodeObject = findNode(d, \"cognate\"); // Find node in collections\r\n\t\tif(nodeObject) return nodeObject.node.colour;   // Country has associated collection node? Return the colour\r\n\t\telse return \"white\";                            // Otherwise, return white by default for all countries with no associated data\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div className={\"map-container\"}>\r\n\t\t\t<svg\r\n\t\t\t\t/*ref={ref}*/\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\tbackgroundColor: \"#3d73ab\" /* The sea */\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}