{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\Lema.js\";\nimport \"./css/Lema.css\";\nimport { Component } from \"react\";\nimport { Banner } from \"./components/Banner\";\nimport { LeftBar } from \"./components/LeftBar\";\nimport { Map } from \"./components/Map\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Lema extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeModal: null,\n      // Either null or a React component\n      activeContextMenu: null,\n      // Either null or a React component\n      mapRef: null,\n      collections: [\n        /*{\n        \ttype: \"journey\",\n        \theader: {word: \"horse\", language: \"English (GB)\"},\n        \twords: [\n        \t\t{word: \"kers\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n        \t\t{word: \"krsos\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n        \t\t{word: \"hrussa\", language: \"Proto-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n        \t\t{word: \"hross\", language: \"Proto-West-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n        \t\t{word: \"horse\", language: \"English (GB)\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n        \t]\n        },*/\n\n        /*{   /!* One word, all cognates (same ancestor). TODO: Legend should detail the ancestors *!/\n        \ttype: \"cognate\",\n        \theader: {word: \"palfrey\", language: \"English (GB)\"},\n        \twords: [\n        \t\t{word: \"palfrey\", language: \"English (GB)\", colour: \"#f5b60d\"},\n        \t\t{word: \"paard\", language: \"Dutch\", colour: \"#f5b60d\"},\n        \t\t{word: \"Pferd\", language: \"German\", colour: \"#f5b60d\"},\n        \t\t{word: \"Päerd\", language: \"Luxembourgish\", colour: \"#f5b60d\"},\n        \t\t{word: \"פערד\", language: \"Yiddish\", colour: \"#f5b60d\"}\n        \t]\n        },*/\n        // TODO: Multiple cognate collections at once (separate layers/patterned colours)\n\n        /*{   /!* Multiple words, no shared countries. Demonstrates cognates of same English word across different families/languages. *!/\n        \ttype: \"cognate\",\n        \theader: {word: \"smith\", language: \"English (GB)\"},\n        \twords: [\n        \t\t{word: \"smith\", language: \"English (GB)\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smid\", language: \"Dutch\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"Schmidt\", language: \"German\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smed\", language: \"Danish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smed\", language: \"Norwegian\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smed\", language: \"Swedish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smiður\", language: \"Icelandic\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"forgeron\", language: \"French\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"fabbro\", language: \"Italian\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"Kovář\", language: \"Czech\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"kováč\", language: \"Slovak\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"kowal\", language: \"Polish\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}}\n        \t]\n        }*/\n      ],\n      mapRenderCounter: 0\n    };\n    this.flattenTree = this.flattenTree.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.openContextMenu = this.openContextMenu.bind(this);\n    this.closeContextMenu = this.closeContextMenu.bind(this);\n    this.addCollection = this.addCollection.bind(this);\n    this.editCollection = this.editCollection.bind(this);\n    this.addJourney = this.addJourney.bind(this);\n    this.addNode = this.addNode.bind(this);\n    this.editNode = this.editNode.bind(this);\n    this.removeNode = this.removeNode.bind(this);\n    this.removeCollection = this.removeCollection.bind(this);\n  }\n\n  flattenTree(wordArray, structure, index) {\n    console.log(node);\n    /*if(node.parents)\n    {\n    \tfor(let j = 0; j < node.parents.length; ++j)\n    \t{\n    \t\twordArray = this.flattenTree(wordArray, node.parents[j]);\n    \t}\n    }\n    \tnode.arrayIndex = wordArray.length; // To track where they are in the flattened tree. Required due to duplicate IDs exist in database, so cannot use them as keys\n    wordArray.push(node);\n    return wordArray;*/\n  }\n\n  addJourney(e, edWords, edStructure) {\n    // Flatten the structure\n    let journeyWords = [];\n    journeyWords = this.flattenTree(journeyWords, edStructure, 0);\n  }\n\n  componentDidMount() {\n    /*// TODO: Temporary; same operation will be performed on incoming data from API\n    let testJourney =\n    \t{\n    \t\ttype: \"journey\",\n    \t\theader: {word: \"Pferd\", language: \"German\"},\n    \t\twords: [\n    \t\t\t{id: 1, word: \"Pferd\", language: \"German\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n    \t\t\t\t\t{id: 2, word: \"pfarifrit\", language: \"Old High German\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n    \t\t\t\t\t\t\t{id: 4, word: \"paraveredus\", language: \"Latin\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n    \t\t\t\t\t\t\t\t\t{id: 6, word: \"veredus\", language: \"Latin\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n    \t\t\t\t\t\t\t\t\t\t\t{id: 8, word: \"werēdos\", language: \"Gaulish\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n    \t\t\t\t\t\t\t\t\t\t\t\t\t{id: 10, word: \"uɸorēdos\", language: \"Proto-Celtic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 12, word: \"uɸo\", language: \"Proto-Celtic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 14, word: \"upo\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: []}\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]},\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 13, word: \"rēdos\", language: \"Proto-Celtic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: []}\n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n    \t\t\t\t\t\t\t\t\t\t\t\t]}\n    \t\t\t\t\t\t\t\t\t\t]}\n    \t\t\t\t\t\t\t\t]},\n    \t\t\t\t\t\t\t{id: 5, word: \"paraveredus\", language: \"Late Latin\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n    \t\t\t\t\t\t\t\t\t{id: 7, word: \"παρά\", language: \"Ancient Greek\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n    \t\t\t\t\t\t\t\t\t\t\t{id: 9, word: \"preh₂-\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n    \t\t\t\t\t\t\t\t\t\t\t\t\t{id: 11, word: \"per-\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: []}\n    \t\t\t\t\t\t\t\t\t\t\t\t]}\n    \t\t\t\t\t\t\t\t\t\t]}\n    \t\t\t\t\t\t\t\t]}\n    \t\t\t\t\t\t]},\n    \t\t\t\t\t{id: 3, word: \"pferift\", language: \"Middle High German\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: []}\n    \t\t\t\t]}\n    \t\t]\n    \t};\n    \tif(this.state.collections.length <= 0)\n    {\n    \tlet newCollections = [];\n    \tlet journeyWords = [];\n    \tjourneyWords = this.flattenTree(journeyWords, testJourney.words[0]);\n    \ttestJourney.words = journeyWords;\n    \tnewCollections.push(testJourney);\n    \tthis.setState({collections: newCollections}, (e) => {console.log(this.state.collections)});\n    }*/\n  }\n\n  openModal(e, modalComponent) {\n    this.setState({\n      activeModal: modalComponent\n    });\n  }\n\n  closeModal() {\n    if (this.state.activeModal) {\n      this.setState({\n        activeModal: null\n      });\n    }\n  }\n\n  openContextMenu(e, menuComponent) {\n    this.setState({\n      activeContextMenu: menuComponent\n    });\n  }\n\n  closeContextMenu() {\n    this.setState({\n      activeContextMenu: null\n    });\n  }\n\n  addNode(e, collectionIndex, newNode) {\n    // Data validation\n    let errorCollector = \"\";\n\n    if (this.state.collections[collectionIndex].type === \"cognate\") {\n      // Check for existing language\n      for (let i = 0; i < this.state.collections[collectionIndex].words.length; ++i) {\n        let childNode = this.state.collections[collectionIndex].words[i];\n\n        if (childNode.language === newNode.language) {\n          errorCollector += \"A language may only have one word per cognate collection.\\n\" + \"Additional cognate collections may re-use languages in other cognate collections.\";\n          break;\n        }\n      }\n    }\n\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error message with toast\n    else {\n      // Insert new node\n      let newCollections = this.state.collections;\n      newNode.arrayIndex = newCollections[collectionIndex].words.length;\n      newCollections[collectionIndex].words.push(newNode);\n      this.setState({\n        collections: newCollections\n      });\n    }\n  }\n  /**\n   * Updates the state's collections array with updated node\n   * @param e React SyntheticEvent\n   * @param collectionIndex Index of collection to which the node belongs\n   * @param updatedNode The updated node to be set in the collections array\n   */\n\n\n  editNode(e, collectionIndex, updatedNode) {\n    let newCollections = this.state.collections; // Find node\n\n    let node = newCollections[collectionIndex].words[updatedNode.arrayIndex]; // Update node by reference\n\n    for (let index in updatedNode) if (node[index]) node[index] = updatedNode[index];\n\n    this.setState({\n      collections: newCollections\n    }, () => {\n      console.log(\"Post-edit collections: \");\n      console.log(this.state.collections);\n      this.closeModal();\n    });\n  }\n\n  removeNode(e, collectionIndex, arrayIndex) {\n    let newCollections = this.state.collections; // Find node\n\n    let node = newCollections[collectionIndex].words[arrayIndex]; // Beginning of chain is always 0\n\n    let confirmed = false;\n    if (node.parents.length > 0) confirmed = window.confirm(\"Warning: this node is connected to \" + node.parents.length + \" parent nodes. The nodes will be unaffected by the deletion. Do you still wish to delete?\");else confirmed = window.confirm(\"Are you sure you wish to delete this node?\");\n    if (confirmed) newCollections[collectionIndex].words.splice(arrayIndex, 1); // Delete node\n\n    this.setState({\n      collections: newCollections\n    }, this.closeModal);\n  }\n\n  addCollection(e, data) {\n    if (data.type === \"Cognates\") data.type = \"cognate\";else if (data.type === \"Historical journey\") data.type = \"journey\"; // Data validation\n    // TODO: For cognates, only one cognate per language should be allowed\n    //  - Future feature: for additional cognate collections, change solid colours to patterns of the specified colours instead (e.g. stripes; checks)\n\n    let errorCollector = \"\";\n    if (data.header.word === null || data.header.word.length <= 0) errorCollector += \"You must enter a word.\\n\";\n    if (data.header.language === null || data.header.language.length <= 0) errorCollector += \"You must enter a language.\\n\";\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error handling with toast\n    else {\n      let newCollections = this.state.collections;\n      newCollections.push({\n        type: data.type,\n        header: data.header,\n        words: []\n      });\n      this.setState({\n        collections: newCollections\n      }, this.closeModal);\n    }\n  }\n\n  editCollection(e, data) {\n    if (data.type === \"Cognates\") data.type = \"cognate\";else if (data.type === \"Historical journey\") data.type = \"journey\"; // Data validation\n\n    let errorCollector = \"\";\n    if (data.header.word === null || data.header.word.length <= 0) errorCollector += \"You must enter a word.\\n\";\n    if (data.header.language === null || data.header.language.length <= 0) errorCollector += \"You must enter a language.\\n\";\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error handling with toast\n    else {\n      let newCollections = this.state.collections;\n      newCollections[data.index].type = data.type;\n      newCollections[data.index].header = data.header;\n      this.setState({\n        collections: newCollections,\n        mapRenderCounter: this.state.mapRenderCounter + 1\n      }, this.closeModal);\n    }\n  }\n\n  removeCollection(e, collectionIndex) {\n    let newCollections = this.state.collections;\n    newCollections.splice(collectionIndex, 1);\n    this.setState({\n      collections: newCollections\n    }, function () {\n      console.log(this.state);\n    });\n  }\n\n  render() {\n    let modalContainer = null,\n        contextMenuContainer = null;\n\n    if (this.state.activeModal !== null) {\n      let activeModal = this.state.activeModal;\n      modalContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-container\",\n        onClick: e => {\n          if (e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n        },\n        children: activeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 21\n      }, this);\n    }\n\n    if (this.state.activeContextMenu !== null) {\n      let activeContextMenu = this.state.activeContextMenu;\n      contextMenuContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"context-menu-container\",\n        onClick: this.closeContextMenu,\n        children: activeContextMenu\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 5\n      }, this);\n    } //console.log(this.state.collections);\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Lema\",\n      children: [/*#__PURE__*/_jsxDEV(Banner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-view-container\",\n        children: [/*#__PURE__*/_jsxDEV(LeftBar, {\n          collections: this.state.collections,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          addJourney: this.addJourney,\n          addNode: this.addNode,\n          editNode: this.editNode,\n          editNodeColour: this.editNodeColour,\n          removeNode: this.removeNode,\n          addCollection: this.addCollection,\n          editCollection: this.editCollection,\n          removeCollection: this.removeCollection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Map, {\n          collections: this.state.collections,\n          mapRenderCounter: this.state.mapRenderCounter,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          addNode: this.addNode,\n          editNode: this.editNode,\n          editNodeColour: this.editNodeColour,\n          removeNode: this.removeNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 5\n      }, this), modalContainer, contextMenuContainer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Lema;","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/Lema.js"],"names":["Component","Banner","LeftBar","Map","Lema","constructor","props","state","activeModal","activeContextMenu","mapRef","collections","mapRenderCounter","flattenTree","bind","openModal","closeModal","openContextMenu","closeContextMenu","addCollection","editCollection","addJourney","addNode","editNode","removeNode","removeCollection","wordArray","structure","index","console","log","node","e","edWords","edStructure","journeyWords","componentDidMount","modalComponent","setState","menuComponent","collectionIndex","newNode","errorCollector","type","i","words","length","childNode","language","alert","newCollections","arrayIndex","push","updatedNode","confirmed","parents","window","confirm","splice","data","header","word","render","modalContainer","contextMenuContainer","nativeEvent","target","className","editNodeColour"],"mappings":"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","sourcesContent":["import \"./css/Lema.css\";\nimport {Component} from \"react\";\nimport {Banner} from \"./components/Banner\";\nimport {LeftBar} from \"./components/LeftBar\";\nimport {Map} from \"./components/Map\";\n\nclass Lema extends Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tactiveModal: null, // Either null or a React component\n\t\t\tactiveContextMenu: null, // Either null or a React component\n\t\t\tmapRef: null,\n\t\t\tcollections: [\n\n\t\t\t\t/*{\n\t\t\t\t\ttype: \"journey\",\n\t\t\t\t\theader: {word: \"horse\", language: \"English (GB)\"},\n\t\t\t\t\twords: [\n\t\t\t\t\t\t{word: \"kers\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"krsos\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"hrussa\", language: \"Proto-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"hross\", language: \"Proto-West-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"horse\", language: \"English (GB)\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n\t\t\t\t\t]\n\t\t\t\t},*/\n\t\t\t\t/*{   /!* One word, all cognates (same ancestor). TODO: Legend should detail the ancestors *!/\n\t\t\t\t\ttype: \"cognate\",\n\t\t\t\t\theader: {word: \"palfrey\", language: \"English (GB)\"},\n\t\t\t\t\twords: [\n\t\t\t\t\t\t{word: \"palfrey\", language: \"English (GB)\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"paard\", language: \"Dutch\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"Pferd\", language: \"German\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"Päerd\", language: \"Luxembourgish\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"פערד\", language: \"Yiddish\", colour: \"#f5b60d\"}\n\t\t\t\t\t]\n\t\t\t\t},*/\n\t\t\t\t\t// TODO: Multiple cognate collections at once (separate layers/patterned colours)\n\t\t\t\t/*{   /!* Multiple words, no shared countries. Demonstrates cognates of same English word across different families/languages. *!/\n\t\t\t\t\ttype: \"cognate\",\n\t\t\t\t\theader: {word: \"smith\", language: \"English (GB)\"},\n\t\t\t\t\twords: [\n\t\t\t\t\t\t{word: \"smith\", language: \"English (GB)\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smid\", language: \"Dutch\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"Schmidt\", language: \"German\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smed\", language: \"Danish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smed\", language: \"Norwegian\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smed\", language: \"Swedish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smiður\", language: \"Icelandic\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"forgeron\", language: \"French\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"fabbro\", language: \"Italian\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"Kovář\", language: \"Czech\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"kováč\", language: \"Slovak\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"kowal\", language: \"Polish\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}}\n\t\t\t\t\t]\n\t\t\t\t}*/\n\t\t\t],\n\t\t\tmapRenderCounter: 0\n\t\t};\n\n\t\tthis.flattenTree = this.flattenTree.bind(this);\n\t\tthis.openModal = this.openModal.bind(this);\n\t\tthis.closeModal = this.closeModal.bind(this);\n\t\tthis.openContextMenu = this.openContextMenu.bind(this);\n\t\tthis.closeContextMenu = this.closeContextMenu.bind(this);\n\t\tthis.addCollection = this.addCollection.bind(this);\n\t\tthis.editCollection = this.editCollection.bind(this);\n\t\tthis.addJourney = this.addJourney.bind(this);\n\t\tthis.addNode = this.addNode.bind(this);\n\t\tthis.editNode = this.editNode.bind(this);\n\t\tthis.removeNode = this.removeNode.bind(this);\n\t\tthis.removeCollection = this.removeCollection.bind(this);\n\t}\n\n\tflattenTree(wordArray, structure, index)\n\t{\n\t\tconsole.log(node);\n\n\t\t/*if(node.parents)\n\t\t{\n\t\t\tfor(let j = 0; j < node.parents.length; ++j)\n\t\t\t{\n\t\t\t\twordArray = this.flattenTree(wordArray, node.parents[j]);\n\t\t\t}\n\t\t}\n\n\t\tnode.arrayIndex = wordArray.length; // To track where they are in the flattened tree. Required due to duplicate IDs exist in database, so cannot use them as keys\n\t\twordArray.push(node);\n\t\treturn wordArray;*/\n\t}\n\n\taddJourney(e, edWords, edStructure)\n\t{\n\t\t// Flatten the structure\n\t\tlet journeyWords = [];\n\t\tjourneyWords = this.flattenTree(journeyWords, edStructure, 0);\n\t}\n\n\tcomponentDidMount()\n\t{\n\t\t/*// TODO: Temporary; same operation will be performed on incoming data from API\n\t\tlet testJourney =\n\t\t\t{\n\t\t\t\ttype: \"journey\",\n\t\t\t\theader: {word: \"Pferd\", language: \"German\"},\n\t\t\t\twords: [\n\t\t\t\t\t{id: 1, word: \"Pferd\", language: \"German\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t{id: 2, word: \"pfarifrit\", language: \"Old High German\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t{id: 4, word: \"paraveredus\", language: \"Latin\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t{id: 6, word: \"veredus\", language: \"Latin\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 8, word: \"werēdos\", language: \"Gaulish\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 10, word: \"uɸorēdos\", language: \"Proto-Celtic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 12, word: \"uɸo\", language: \"Proto-Celtic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 14, word: \"upo\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: []}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 13, word: \"rēdos\", language: \"Proto-Celtic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: []}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t\t\t{id: 5, word: \"paraveredus\", language: \"Late Latin\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t{id: 7, word: \"παρά\", language: \"Ancient Greek\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 9, word: \"preh₂-\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 11, word: \"per-\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: []}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t{id: 3, word: \"pferift\", language: \"Middle High German\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: []}\n\t\t\t\t\t\t]}\n\t\t\t\t]\n\t\t\t};\n\n\t\tif(this.state.collections.length <= 0)\n\t\t{\n\t\t\tlet newCollections = [];\n\t\t\tlet journeyWords = [];\n\t\t\tjourneyWords = this.flattenTree(journeyWords, testJourney.words[0]);\n\t\t\ttestJourney.words = journeyWords;\n\t\t\tnewCollections.push(testJourney);\n\t\t\tthis.setState({collections: newCollections}, (e) => {console.log(this.state.collections)});\n\t\t}*/\n\t}\n\n\topenModal(e, modalComponent)\n\t{\n\t\tthis.setState({\n\t\t\tactiveModal: modalComponent\n\t\t});\n\t}\n\tcloseModal()\n\t{\n\t\tif(this.state.activeModal)\n\t\t{\n\t\t\tthis.setState({\n\t\t\t\tactiveModal: null\n\t\t\t});\n\t\t}\n\t}\n\topenContextMenu(e, menuComponent)\n\t{\n\t\tthis.setState({\n\t\t\tactiveContextMenu: menuComponent\n\t\t});\n\t}\n\tcloseContextMenu()\n\t{\n\t\tthis.setState({\n\t\t\tactiveContextMenu: null\n\t\t});\n\t}\n\n\taddNode(e, collectionIndex, newNode)\n\t{\n\t\t// Data validation\n\t\tlet errorCollector = \"\";\n\t\tif(this.state.collections[collectionIndex].type === \"cognate\")\n\t\t{\n\t\t\t// Check for existing language\n\t\t\tfor(let i = 0; i < this.state.collections[collectionIndex].words.length; ++i)\n\t\t\t{\n\t\t\t\tlet childNode = this.state.collections[collectionIndex].words[i];\n\t\t\t\tif(childNode.language === newNode.language)\n\t\t\t\t{\n\t\t\t\t\terrorCollector += \"A language may only have one word per cognate collection.\\n\" +\n\t\t\t\t\t\t\t\t\t  \"Additional cognate collections may re-use languages in other cognate collections.\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error message with toast\n\t\telse\n\t\t{\n\t\t\t// Insert new node\n\t\t\tlet newCollections = this.state.collections;\n\t\t\tnewNode.arrayIndex = newCollections[collectionIndex].words.length;\n\t\t\tnewCollections[collectionIndex].words.push(newNode);\n\n\t\t\tthis.setState({collections: newCollections});\n\t\t}\n\t}\n\n\t/**\n\t * Updates the state's collections array with updated node\n\t * @param e React SyntheticEvent\n\t * @param collectionIndex Index of collection to which the node belongs\n\t * @param updatedNode The updated node to be set in the collections array\n\t */\n\teditNode(e, collectionIndex, updatedNode)\n\t{\n\t\tlet newCollections = this.state.collections;\n\n\t\t// Find node\n\t\tlet node = newCollections[collectionIndex].words[updatedNode.arrayIndex];\n\n\t\t// Update node by reference\n\t\tfor(let index in updatedNode)\n\t\t\tif(node[index]) node[index] = updatedNode[index];\n\n\t\tthis.setState({collections: newCollections}, () => {\n\t\t\tconsole.log(\"Post-edit collections: \");\n\t\t\tconsole.log(this.state.collections);\n\t\t\tthis.closeModal();\n\t\t});\n\t}\n\tremoveNode(e, collectionIndex, arrayIndex)\n\t{\n\t\tlet newCollections = this.state.collections;\n\n\t\t// Find node\n\t\tlet node = newCollections[collectionIndex].words[arrayIndex]; // Beginning of chain is always 0\n\t\tlet confirmed = false;\n\t\tif(node.parents.length > 0)\n\t\t\tconfirmed = window.confirm(\"Warning: this node is connected to \"+node.parents.length+\" parent nodes. The nodes will be unaffected by the deletion. Do you still wish to delete?\");\n\t\telse\n\t\t\tconfirmed = window.confirm(\"Are you sure you wish to delete this node?\");\n\n\t\tif(confirmed)\n\t\t\tnewCollections[collectionIndex].words.splice(arrayIndex, 1); // Delete node\n\n\t\tthis.setState({collections: newCollections}, this.closeModal);\n\t}\n\n\taddCollection(e, data)\n\t{\n\t\tif(data.type === \"Cognates\") data.type = \"cognate\";\n\t\telse if(data.type === \"Historical journey\") data.type = \"journey\";\n\n\t\t// Data validation\n\t\t// TODO: For cognates, only one cognate per language should be allowed\n\t\t//  - Future feature: for additional cognate collections, change solid colours to patterns of the specified colours instead (e.g. stripes; checks)\n\t\tlet errorCollector = \"\";\n\t\tif(data.header.word === null || data.header.word.length <= 0)\n\t\t\terrorCollector += \"You must enter a word.\\n\";\n\t\tif(data.header.language === null || data.header.language.length <= 0)\n\t\t\terrorCollector += \"You must enter a language.\\n\";\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error handling with toast\n\t\telse\n\t\t{\n\t\t\tlet newCollections = this.state.collections;\n\t\t\tnewCollections.push({type: data.type, header: data.header, words: []});\n\t\t\tthis.setState( {collections: newCollections}, this.closeModal);\n\t\t}\n\t}\n\teditCollection(e, data)\n\t{\n\t\tif(data.type === \"Cognates\") data.type = \"cognate\";\n\t\telse if(data.type === \"Historical journey\") data.type = \"journey\";\n\n\t\t// Data validation\n\t\tlet errorCollector = \"\";\n\t\tif(data.header.word === null || data.header.word.length <= 0)\n\t\t\terrorCollector += \"You must enter a word.\\n\";\n\t\tif(data.header.language === null || data.header.language.length <= 0)\n\t\t\terrorCollector += \"You must enter a language.\\n\";\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error handling with toast\n\t\telse\n\t\t{\n\t\t\tlet newCollections = this.state.collections;\n\t\t\tnewCollections[data.index].type = data.type;\n\t\t\tnewCollections[data.index].header = data.header;\n\t\t\tthis.setState({collections: newCollections, mapRenderCounter: this.state.mapRenderCounter+1}, this.closeModal);\n\t\t}\n\t}\n\tremoveCollection(e, collectionIndex)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tnewCollections.splice(collectionIndex, 1);\n\t\tthis.setState({collections: newCollections}, function()\n\t\t{\n\t\t\tconsole.log(this.state);\n\t\t});\n\t}\n\n\n\trender()\n\t{\n\t\tlet modalContainer = null, contextMenuContainer = null;\n\t\tif(this.state.activeModal !== null)\n\t\t{\n\t\t\tlet activeModal = this.state.activeModal;\n\t\t\tmodalContainer = <div className={\"modal-container\"} onClick={(e) =>\n\t\t\t{\n\t\t\t\tif(e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n\t\t\t}}>{activeModal}</div>;\n\t\t}\n\t\tif(this.state.activeContextMenu !== null)\n\t\t{\n\t\t\tlet activeContextMenu = this.state.activeContextMenu;\n\t\t\tcontextMenuContainer =\n\t\t\t\t<div className={\"context-menu-container\"} onClick={this.closeContextMenu}>{activeContextMenu}</div>;\n\t\t}\n\n\t\t//console.log(this.state.collections);\n\n\t\treturn (\n\t\t\t<div className=\"Lema\">\n\t\t\t\t<Banner/>\n\t\t\t\t<div className={\"main-view-container\"}>\n\t\t\t\t\t<LeftBar collections={this.state.collections}\n\t\t\t\t\t         openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t         openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t         addJourney={this.addJourney}\n\t\t\t\t\t         addNode={this.addNode} editNode={this.editNode} editNodeColour={this.editNodeColour} removeNode={this.removeNode}\n\t\t\t\t\t         addCollection={this.addCollection} editCollection={this.editCollection} removeCollection={this.removeCollection}\n\t\t\t\t\t/>\n\t\t\t\t\t<Map collections={this.state.collections} mapRenderCounter={this.state.mapRenderCounter}\n\t\t\t\t\t     openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t     openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t\t addNode={this.addNode} editNode={this.editNode} editNodeColour={this.editNodeColour} removeNode={this.removeNode}  />\n\t\t\t\t</div>\n\t\t\t\t{modalContainer}\n\t\t\t\t{contextMenuContainer}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Lema;\n"]},"metadata":{},"sourceType":"module"}