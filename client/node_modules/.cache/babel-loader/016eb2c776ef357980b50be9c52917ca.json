{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { useD3 } from \"../hooks/useD3\";\nimport languageCountries from \"../languageCountries.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Map(props) {\n  _s();\n\n  const items = props.items;\n\n  let topojson = require(\"topojson\");\n\n  let world = require(\"../data/world.json\");\n\n  let foo = [{\n    \"name\": \"Netherlands\",\n    \"continent\": \"Europe\"\n  }, {\n    \"name\": \"England\",\n    \"continent\": \"Europe\"\n  }];\n  let ref = useD3(svg => {\n    let width = svg._groups[0][0].clientWidth;\n    let height = svg._groups[0][0].clientHeight;\n    let areas = world.features.reduce((countries2, feature) => {\n      // flatten multipolygons into polygons\n      if (feature.geometry.type === \"Polygon\") {\n        countries2.push(feature);\n      } else {\n        // MultiPolygon\n        feature.geometry.coordinates.forEach(coordinates => {\n          countries2.push({\n            type: \"Feature\",\n            properties: feature.properties,\n            geometry: {\n              type: \"Polygon\",\n              coordinates\n            }\n          });\n        });\n      }\n\n      return countries2;\n    }, []); // TODO: Adjust dimensions so it displays better; have it auto-scale as window is dragged\n\n    const W = width;\n    const H = W * height / width;\n    const g = svg.append(\"g\");\n    const g_countries = g.append(\"g\");\n    const graticules = g.append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(0,0,0,.2)\");\n    let x = 0;\n    let z = 1.7;\n\n    function draw() {\n      svg.append(\"p\").data(foo).text(function (d) {\n        return d.name + \"|\" + d.continent;\n      });\n    }\n    /*\r\n     svg.call(d3.zoom().on(\"zoom\", function () {\r\n     z = d3.event.transform.k;\r\n     draw();\r\n     }));\r\n     */\n\n\n    draw();\n    return svg.node();\n  }, [props.mapRenderCounter]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: ref,\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        margin: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Map, \"r127xTdrGuIqcYXTmMbvPxoKAyo=\", false, function () {\n  return [useD3];\n});\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Map.jsx"],"names":["React","useState","d3","useD3","languageCountries","Map","props","items","topojson","require","world","foo","ref","svg","width","_groups","clientWidth","height","clientHeight","areas","features","reduce","countries2","feature","geometry","type","push","coordinates","forEach","properties","W","H","g","append","g_countries","graticules","attr","x","z","draw","data","text","d","name","continent","node","mapRenderCounter","margin"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {useD3} from \"../hooks/useD3\";\r\nimport languageCountries from \"../languageCountries.json\";\r\n\r\nexport function Map(props)\r\n{\r\n\tconst items = props.items;\r\n\tlet topojson = require(\"topojson\");\r\n\tlet world = require(\"../data/world.json\");\r\n\r\n\tlet foo = [{\"name\": \"Netherlands\", \"continent\": \"Europe\"}, {\"name\": \"England\", \"continent\": \"Europe\"}];\r\n\r\n\tlet ref = useD3(\r\n\t\t(svg) =>\r\n\t\t{\r\n\t\t\tlet width = svg._groups[0][0].clientWidth;\r\n\t\t\tlet height = svg._groups[0][0].clientHeight;\r\n\r\n\t\t\tlet areas = world.features\r\n\t\t\t\t.reduce((countries2, feature) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// flatten multipolygons into polygons\r\n\t\t\t\t\tif(feature.geometry.type === \"Polygon\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcountries2.push(feature);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{ // MultiPolygon\r\n\t\t\t\t\t\tfeature.geometry.coordinates.forEach(coordinates =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcountries2.push({\r\n\t\t\t\t\t\t\t\ttype: \"Feature\",\r\n\t\t\t\t\t\t\t\tproperties: feature.properties,\r\n\t\t\t\t\t\t\t\tgeometry: {type: \"Polygon\", coordinates}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn countries2;\r\n\t\t\t\t}, []);\r\n\r\n\t\t\t// TODO: Adjust dimensions so it displays better; have it auto-scale as window is dragged\r\n\t\t\tconst W = width;\r\n\t\t\tconst H = W * height / width;\r\n\t\t\tconst g = svg.append(\"g\");\r\n\t\t\tconst g_countries = g.append(\"g\");\r\n\r\n\t\t\tconst graticules = g.append(\"path\")\r\n\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\");\r\n\r\n\t\t\tlet x = 0;\r\n\t\t\tlet z = 1.7;\r\n\r\n\t\t\tfunction draw()\r\n\t\t\t{\r\n\r\n\t\t\t\tsvg.append(\"p\").data(foo).text(function(d){\r\n\t\t\t\t\treturn d.name + \"|\" + d.continent;\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t/*\r\n\t\t\t svg.call(d3.zoom().on(\"zoom\", function () {\r\n\t\t\t z = d3.event.transform.k;\r\n\t\t\t draw();\r\n\t\t\t }));\r\n\t\t\t */\r\n\r\n\t\t\tdraw();\r\n\r\n\t\t\treturn svg.node();\r\n\r\n\t\t},\r\n\t\t[props.mapRenderCounter]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className={\"map-container\"}>\r\n\t\t\t<svg\r\n\t\t\t\tref={ref}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmargin: 0\r\n\t\t\t\t}}>\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}