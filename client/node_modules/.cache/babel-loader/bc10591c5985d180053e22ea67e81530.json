{"ast":null,"code":"import { path } from \"d3-path\";\nimport constant from \"./constant.js\";\nimport asterisk from \"./symbol/asterisk.js\";\nimport circle from \"./symbol/circle.js\";\nimport cross from \"./symbol/cross.js\";\nimport diamond from \"./symbol/diamond.js\";\nimport diamond2 from \"./symbol/diamond2.js\";\nimport plus from \"./symbol/plus.js\";\nimport square from \"./symbol/square.js\";\nimport square2 from \"./symbol/square2.js\";\nimport star from \"./symbol/star.js\";\nimport triangle from \"./symbol/triangle.js\";\nimport triangle2 from \"./symbol/triangle2.js\";\nimport wye from \"./symbol/wye.js\";\nimport x from \"./symbol/x.js\"; // These symbols are designed to be filled.\n\nexport const symbolsFill = [circle, cross, diamond, square, star, triangle, wye]; // These symbols are designed to be stroked (with a width of 1.5px and round caps).\n\nexport const symbolsStroke = [circle, plus, x, triangle2, asterisk, square2, diamond2];\nexport default function Symbol(type, size) {\n  let context = null;\n  type = typeof type === \"function\" ? type : constant(type || circle);\n  size = typeof size === \"function\" ? size : constant(size === undefined ? 64 : +size);\n\n  function symbol() {\n    let buffer;\n    if (!context) context = buffer = path();\n    type.apply(this, arguments).draw(context, +size.apply(this, arguments));\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  symbol.type = function (_) {\n    return arguments.length ? (type = typeof _ === \"function\" ? _ : constant(_), symbol) : type;\n  };\n\n  symbol.size = function (_) {\n    return arguments.length ? (size = typeof _ === \"function\" ? _ : constant(+_), symbol) : size;\n  };\n\n  symbol.context = function (_) {\n    return arguments.length ? (context = _ == null ? null : _, symbol) : context;\n  };\n\n  return symbol;\n}","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/client/node_modules/d3-shape/src/symbol.js"],"names":["path","constant","asterisk","circle","cross","diamond","diamond2","plus","square","square2","star","triangle","triangle2","wye","x","symbolsFill","symbolsStroke","Symbol","type","size","context","undefined","symbol","buffer","apply","arguments","draw","_","length"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,SAAnB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,OAAOC,CAAP,MAAc,eAAd,C,CAEA;;AACA,OAAO,MAAMC,WAAW,GAAG,CACzBZ,MADyB,EAEzBC,KAFyB,EAGzBC,OAHyB,EAIzBG,MAJyB,EAKzBE,IALyB,EAMzBC,QANyB,EAOzBE,GAPyB,CAApB,C,CAUP;;AACA,OAAO,MAAMG,aAAa,GAAG,CAC3Bb,MAD2B,EAE3BI,IAF2B,EAG3BO,CAH2B,EAI3BF,SAJ2B,EAK3BV,QAL2B,EAM3BO,OAN2B,EAO3BH,QAP2B,CAAtB;AAUP,eAAe,SAASW,MAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4B;AACzC,MAAIC,OAAO,GAAG,IAAd;AAEAF,EAAAA,IAAI,GAAG,OAAOA,IAAP,KAAgB,UAAhB,GAA6BA,IAA7B,GAAoCjB,QAAQ,CAACiB,IAAI,IAAIf,MAAT,CAAnD;AACAgB,EAAAA,IAAI,GAAG,OAAOA,IAAP,KAAgB,UAAhB,GAA6BA,IAA7B,GAAoClB,QAAQ,CAACkB,IAAI,KAAKE,SAAT,GAAqB,EAArB,GAA0B,CAACF,IAA5B,CAAnD;;AAEA,WAASG,MAAT,GAAkB;AAChB,QAAIC,MAAJ;AACA,QAAI,CAACH,OAAL,EAAcA,OAAO,GAAGG,MAAM,GAAGvB,IAAI,EAAvB;AACdkB,IAAAA,IAAI,CAACM,KAAL,CAAW,IAAX,EAAiBC,SAAjB,EAA4BC,IAA5B,CAAiCN,OAAjC,EAA0C,CAACD,IAAI,CAACK,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAA3C;AACA,QAAIF,MAAJ,EAAY,OAAOH,OAAO,GAAG,IAAV,EAAgBG,MAAM,GAAG,EAAT,IAAe,IAAtC;AACb;;AAEDD,EAAAA,MAAM,CAACJ,IAAP,GAAc,UAASS,CAAT,EAAY;AACxB,WAAOF,SAAS,CAACG,MAAV,IAAoBV,IAAI,GAAG,OAAOS,CAAP,KAAa,UAAb,GAA0BA,CAA1B,GAA8B1B,QAAQ,CAAC0B,CAAD,CAA7C,EAAkDL,MAAtE,IAAgFJ,IAAvF;AACD,GAFD;;AAIAI,EAAAA,MAAM,CAACH,IAAP,GAAc,UAASQ,CAAT,EAAY;AACxB,WAAOF,SAAS,CAACG,MAAV,IAAoBT,IAAI,GAAG,OAAOQ,CAAP,KAAa,UAAb,GAA0BA,CAA1B,GAA8B1B,QAAQ,CAAC,CAAC0B,CAAF,CAA7C,EAAmDL,MAAvE,IAAiFH,IAAxF;AACD,GAFD;;AAIAG,EAAAA,MAAM,CAACF,OAAP,GAAiB,UAASO,CAAT,EAAY;AAC3B,WAAOF,SAAS,CAACG,MAAV,IAAoBR,OAAO,GAAGO,CAAC,IAAI,IAAL,GAAY,IAAZ,GAAmBA,CAA7B,EAAgCL,MAApD,IAA8DF,OAArE;AACD,GAFD;;AAIA,SAAOE,MAAP;AACD","sourcesContent":["import {path} from \"d3-path\";\r\nimport constant from \"./constant.js\";\r\nimport asterisk from \"./symbol/asterisk.js\";\r\nimport circle from \"./symbol/circle.js\";\r\nimport cross from \"./symbol/cross.js\";\r\nimport diamond from \"./symbol/diamond.js\";\r\nimport diamond2 from \"./symbol/diamond2.js\";\r\nimport plus from \"./symbol/plus.js\";\r\nimport square from \"./symbol/square.js\";\r\nimport square2 from \"./symbol/square2.js\";\r\nimport star from \"./symbol/star.js\";\r\nimport triangle from \"./symbol/triangle.js\";\r\nimport triangle2 from \"./symbol/triangle2.js\";\r\nimport wye from \"./symbol/wye.js\";\r\nimport x from \"./symbol/x.js\";\r\n\r\n// These symbols are designed to be filled.\r\nexport const symbolsFill = [\r\n  circle,\r\n  cross,\r\n  diamond,\r\n  square,\r\n  star,\r\n  triangle,\r\n  wye\r\n];\r\n\r\n// These symbols are designed to be stroked (with a width of 1.5px and round caps).\r\nexport const symbolsStroke = [\r\n  circle,\r\n  plus,\r\n  x,\r\n  triangle2,\r\n  asterisk,\r\n  square2,\r\n  diamond2\r\n];\r\n\r\nexport default function Symbol(type, size) {\r\n  let context = null;\r\n\r\n  type = typeof type === \"function\" ? type : constant(type || circle);\r\n  size = typeof size === \"function\" ? size : constant(size === undefined ? 64 : +size);\r\n\r\n  function symbol() {\r\n    let buffer;\r\n    if (!context) context = buffer = path();\r\n    type.apply(this, arguments).draw(context, +size.apply(this, arguments));\r\n    if (buffer) return context = null, buffer + \"\" || null;\r\n  }\r\n\r\n  symbol.type = function(_) {\r\n    return arguments.length ? (type = typeof _ === \"function\" ? _ : constant(_), symbol) : type;\r\n  };\r\n\r\n  symbol.size = function(_) {\r\n    return arguments.length ? (size = typeof _ === \"function\" ? _ : constant(+_), symbol) : size;\r\n  };\r\n\r\n  symbol.context = function(_) {\r\n    return arguments.length ? (context = _ == null ? null : _, symbol) : context;\r\n  };\r\n\r\n  return symbol;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}