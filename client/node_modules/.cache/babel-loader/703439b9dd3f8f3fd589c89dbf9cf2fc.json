{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { useD3 } from \"../hooks/useD3\";\nimport languageCountries from \"../supportedLanguages.json\";\nimport countries_data from \"../data/countries/countries.json\";\nimport { AddEditNodeModal } from \"./AddEditNodeModal\";\nimport { ContextMenu } from \"./ContextMenu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Map(props) {\n  _s();\n\n  // Prop functions\n  const openContextMenu = props.openContextMenu.bind(this);\n  const addNode = props.addNode.bind(this);\n  const editNode = props.editNode.bind(this);\n  const removeNode = props.removeNode.bind(this);\n  const openModal = props.openModal.bind(this);\n  const collections = props.collections;\n\n  let topojson = require(\"topojson\");\n\n  let countries_data = require(\"../data/countries/countries.json\");\n  /* Example of using d3-geo in useEffect() instead of custom useD3() */\n  // Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\n\n\n  useEffect(() => {\n    let svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\n    let countries = countries_data.features; // Create path (passed as svg attribute later to draw the countries)\n    // TODO: Have it auto-scale as window is dragged\n\n    const width = svg._groups[0][0].clientWidth;\n    const height = svg._groups[0][0].clientHeight;\n    const projection = d3.geoConicConformal().center([8, 52.823]) // Middle of Europe(ish)\n    .scale(1360).translate([width / 2, height / 2]);\n    const path = d3.geoPath().projection(projection); // Draw countries, bind data and handlers\n\n    let countryPaths = svg.append(\"g\").selectAll(\"path\") // svg->g->path\n    .data(countries) // svg->g->path\n    .enter() // svg->g->path (create new nodes per data)\n    .append(\"path\") // svg->g->path (create new nodes per data)\n    .attr(\"fill\", d => determineFillColour(d)).on(\"click\", function (e, d) {// TODO: Functions (dragging nodes; etc.)\n    }).on(\"contextmenu\", function (e, d) {\n      e.preventDefault(); // Prevent browser context menu from opening\n\n      const nodeObject = findNode(d, \"cognate\");\n\n      if (nodeObject) {\n        const contextMenuItems = [{\n          text: \"Add new node (journey)\",\n          handler: e => {\n            // Add new journey node within the country/region they right-clicked on (there may be multiple nodes in one country/region for journeys)\n            let collectionList = collections.filter(collection => collection.type === \"journey\"); // Journeys only\n\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: addNode,\n              collectionList: collectionList,\n              language: d.properties.languages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Add sibling node (cognate)\",\n          handler: e => {\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: addNode,\n              collectionIndex: nodeObject.collectionIndex,\n              language: d.properties.languages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Edit node (cognate)\",\n          handler: e => {\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: editNode,\n              collectionIndex: nodeObject.collectionIndex,\n              childNodeIndex: nodeObject.childNodeIndex,\n              word: nodeObject.node.word,\n              language: nodeObject.node.language\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Remove node (cognate)\",\n          handler: e => {\n            removeNode(e, nodeObject.collectionIndex, nodeObject.childNodeIndex);\n          }\n        }];\n        openContextMenu(e, /*#__PURE__*/_jsxDEV(ContextMenu, {\n          x: e.clientX,\n          y: e.clientY,\n          items: contextMenuItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this));\n      } else {\n        // TODO: Context menu for adding to new collection, adding to existing collection\n        const contextMenuItems = [{\n          text: \"Add new node (journey)\",\n          handler: e => {\n            let collectionList = collections.filter(collection => collection.type === \"journey\"); // Journeys only\n\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: addNode,\n              collectionList: collectionList,\n              language: d.properties.languages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Add to collection (cognate)\",\n          handler: e => {\n            let collectionList = collections.filter(collection => collection.type === \"cognate\"); // Cognates only\n\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: addNode,\n              collectionList: collectionList,\n              language: d.properties.languages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 22\n            }, this));\n          }\n        }];\n        openContextMenu(e, /*#__PURE__*/_jsxDEV(ContextMenu, {\n          x: e.clientX,\n          y: e.clientY,\n          items: contextMenuItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this));\n      }\n    }).on(\"mouseover\", function (e, d) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"white\") // White can't become transparent\n        element.attr(\"fill\", \"rgb(230,230,230)\");else element.attr(\"fill-opacity\", \"0.65\");\n    }).on(\"mouseout\", function (e, d) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\n        element.attr(\"fill\", \"white\");else element.attr(\"fill-opacity\", \"1\");\n    }).attr(\"stroke\", \"black\").attr(\"stroke-linejoin\", \"round\").attr(\"d\", path); // Cognate labels\n\n    const labelG = svg.append(\"g\");\n    const labels = labelG.classed(\"labels\", true);\n    countryPaths.each(function (f, i) {\n      // Only place labels of countries with associated cognate data\n      // TODO: Make this a setting\n      let node = findNode(f, \"cognate\");\n\n      if (node) {\n        node = node.node;\n        let boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\n\n        let fontSize = \"initial\"; // Font size of the label\n\n        let text = node.language; // Language by default\n\n        if (node.labelType === \"country\") text = f.properties.name;else if (node.labelType === \"custom\") text = node.customLabel; // Scale factor depending on size of country (to stop oversized text from escaping country)\n\n        if (text.length !== 0) {\n          if (boundingBox.width < text.length * 16) fontSize = boundingBox.width / 8 + \"px\";\n        } // Append labels to paths, with co-ordinates according to feature's position on map\n\n\n        let label = labelG.append(\"text\").attr(\"x\", boundingBox.x + boundingBox.width / 4).attr(\"y\", boundingBox.y + boundingBox.height / 2).style(\"font-size\", fontSize).text(text); // Allow labels to be dragged\n\n        let startXOffset, startYOffset, resizing;\n        label.on(\"mousemove\", e => {\n          let labelX = Number(label.attr(\"x\")),\n              labelY = Number(label.attr(\"y\"));\n          let mouseX = e.layerX,\n              mouseY = e.layerY; // Determine corners of textbox\n\n          let topLeft = {\n            xStart: labelX - 5,\n            xEnd: labelX + 10,\n            yStart: labelY - label.node().getBBox().height + 5,\n            yEnd: labelY - label.node().getBBox().height + 15\n          };\n          let topRight = {\n            xStart: labelX + label.node().getBBox().width - 5,\n            xEnd: labelX + label.node().getBBox().width + 15,\n            yStart: labelY - label.node().getBBox().height + 5,\n            yEnd: labelY - label.node().getBBox().height + 15\n          };\n          let bottomLeft = {\n            xStart: labelX - 5,\n            xEnd: labelX + 10,\n            yStart: labelY,\n            yEnd: labelY + 10\n          };\n          let bottomRight = {\n            xStart: labelX + label.node().getBBox().width - 5,\n            xEnd: labelX + label.node().getBBox().width + 15,\n            yStart: labelY,\n            yEnd: labelY + 10\n          }; // Change cursor if in appropriate corner\n\n          if (mouseX >= topLeft.xStart && mouseX <= topLeft.xEnd && mouseY >= topLeft.yStart && mouseY <= topLeft.yEnd) {\n            label.style(\"cursor\", \"nw-resize\");\n          } else if (mouseX >= topRight.xStart && mouseX <= topRight.xEnd && mouseY >= topRight.yStart && mouseY <= topRight.yEnd) {\n            label.style(\"cursor\", \"ne-resize\");\n          } else if (mouseX >= bottomLeft.xStart && mouseX <= bottomLeft.xEnd && mouseY >= bottomLeft.yStart && mouseY <= bottomLeft.yEnd) {\n            label.style(\"cursor\", \"sw-resize\");\n          } else if (mouseX >= bottomRight.xStart && mouseX <= bottomRight.xEnd && mouseY >= bottomRight.yStart && mouseY <= bottomRight.yEnd) {\n            label.style(\"cursor\", \"se-resize\");\n          } else label.style(\"cursor\", \"text\");\n        }).call(d3.drag().on(\"start\", e => {\n          let labelX = Number(label.attr(\"x\")),\n              labelY = Number(label.attr(\"y\"));\n          let mouseX = e.x,\n              mouseY = e.y;\n          startXOffset = mouseX - labelX;\n          startYOffset = mouseY - labelY; // Determine corners of text's box\n\n          const labelCorners = {\n            nw: {\n              xStart: labelX - 5,\n              xEnd: labelX + 10,\n              yStart: labelY - label.node().getBBox().height + 5,\n              yEnd: labelY - label.node().getBBox().height + 15\n            },\n            ne: {\n              xStart: labelX + label.node().getBBox().width - 5,\n              xEnd: labelX + label.node().getBBox().width + 15,\n              yStart: labelY - label.node().getBBox().height + 5,\n              yEnd: labelY - label.node().getBBox().height + 15\n            },\n            sw: {\n              xStart: labelX - 5,\n              xEnd: labelX + 10,\n              yStart: labelY,\n              yEnd: labelY + 10\n            },\n            se: {\n              xStart: labelX + label.node().getBBox().width - 5,\n              xEnd: labelX + label.node().getBBox().width + 15,\n              yStart: labelY,\n              yEnd: labelY + 10\n            }\n          }; // Check corners\n\n          Object.keys(labelCorners).forEach((key, index) => {\n            let corner = labelCorners[key];\n\n            if (mouseX >= corner.xStart && mouseX <= corner.xEnd && mouseY >= corner.yStart && mouseY <= corner.yEnd) {\n              resizing = \"key\";\n            }\n          });\n        }).on(\"drag\", e => {\n          const x = e.x - startXOffset;\n          const y = e.y - startYOffset;\n          label.attr(\"x\", x).attr(\"y\", y);\n        }).on(\"end\", () => {}));\n      }\n    }); // Graticules (lines on the map)\n\n    const g = svg.append(\"g\");\n    const graticules = g.classed(\"graticules\", true).append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(0,0,0,.2)\").attr(\"d\", path(d3.geoGraticule()()));\n    /*\r\n    svg.call(d3.zoom().on(\"zoom\", function () {\r\n    \tz = d3.event.transform.k;\r\n    \tdraw(); // TODO: Contain above render code into draw() function\r\n    }));\r\n     */\n    // Clean-up function (kills all SVG elements upon unmounting)\n\n    return function cleanup() {\n      svg.selectAll(\"g\").remove();\n    };\n  });\n\n  function findNode(d, type) {\n    // Search collections\n    for (let c = 0; c < collections.length; ++c) {\n      let collection = collections[c];\n\n      if (type === \"cognate\") {\n        if (collection.type === \"cognate\") {\n          for (let n = 0; n < collection.childNodes.length; ++n) {\n            let childNode = collection.childNodes[n];\n\n            if (d.properties.languages.includes(childNode.language)) {\n              return {\n                node: childNode,\n                collectionIndex: c,\n                childNodeIndex: n\n              };\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\r\n   * Determines country SVG fill colour according to countries' language(s) and the specified colour of that language's cognate node(s)\r\n   * @param d Data attached to DOM element via D3 (i.e. the country)\r\n   * @returns {string} The fill colour, as specified by user in Collection.jsx\r\n   */\n\n\n  function determineFillColour(d) {\n    const nodeObject = findNode(d, \"cognate\"); // Find node in collections\n\n    if (nodeObject) return nodeObject.node.colour; // Country has associated collection node? Return the colour\n    else return \"white\"; // Otherwise, return white by default for all countries with no associated data\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      /*ref={ref}*/\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        margin: 0,\n        backgroundColor: \"#3d73ab\"\n        /* The sea */\n\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Map, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Map.jsx"],"names":["React","useEffect","useState","d3","useD3","languageCountries","countries_data","AddEditNodeModal","ContextMenu","Map","props","openContextMenu","bind","addNode","editNode","removeNode","openModal","collections","topojson","require","svg","selectAll","countries","features","width","_groups","clientWidth","height","clientHeight","projection","geoConicConformal","center","scale","translate","path","geoPath","countryPaths","append","data","enter","attr","d","determineFillColour","on","e","preventDefault","nodeObject","findNode","contextMenuItems","text","handler","collectionList","filter","collection","type","properties","languages","collectionIndex","childNodeIndex","node","word","language","clientX","clientY","element","select","labelG","labels","classed","each","f","i","boundingBox","getBBox","fontSize","labelType","name","customLabel","length","label","x","y","style","startXOffset","startYOffset","resizing","labelX","Number","labelY","mouseX","layerX","mouseY","layerY","topLeft","xStart","xEnd","yStart","yEnd","topRight","bottomLeft","bottomRight","call","drag","labelCorners","nw","ne","sw","se","Object","keys","forEach","key","index","corner","g","graticules","geoGraticule","cleanup","remove","c","n","childNodes","childNode","includes","colour","margin","backgroundColor"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {useD3} from \"../hooks/useD3\";\r\nimport languageCountries from \"../supportedLanguages.json\";\r\nimport countries_data from \"../data/countries/countries.json\";\r\nimport {AddEditNodeModal} from \"./AddEditNodeModal\";\r\nimport {ContextMenu} from \"./ContextMenu\";\r\n\r\nexport function Map(props)\r\n{\r\n\t// Prop functions\r\n\tconst openContextMenu = props.openContextMenu.bind(this);\r\n\tconst addNode = props.addNode.bind(this);\r\n\tconst editNode = props.editNode.bind(this);\r\n\tconst removeNode = props.removeNode.bind(this);\r\n\tconst openModal = props.openModal.bind(this);\r\n\r\n\tconst collections = props.collections;\r\n\tlet topojson = require(\"topojson\");\r\n\tlet countries_data = require(\"../data/countries/countries.json\");\r\n\r\n\t/* Example of using d3-geo in useEffect() instead of custom useD3() */\r\n\t// Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\r\n\tuseEffect(() => {\r\n\t\tlet svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\r\n\t\tlet countries = countries_data.features;\r\n\r\n\t\t// Create path (passed as svg attribute later to draw the countries)\r\n\t\t// TODO: Have it auto-scale as window is dragged\r\n\t\tconst width = svg._groups[0][0].clientWidth;\r\n\t\tconst height = svg._groups[0][0].clientHeight;\r\n\t\tconst projection = d3.geoConicConformal()\r\n\t\t\t.center([8, 52.823]) // Middle of Europe(ish)\r\n\t\t\t.scale(1360)\r\n\t\t\t.translate([width/2, height/2]);\r\n\t\tconst path = d3.geoPath().projection(projection);\r\n\r\n\t\t// Draw countries, bind data and handlers\r\n\t\tlet countryPaths = svg.append(\"g\")\r\n\t\t\t.selectAll(\"path\") // svg->g->path\r\n\t\t\t.data(countries)         // svg->g->path\r\n\t\t\t.enter()                 // svg->g->path (create new nodes per data)\r\n\t\t\t.append(\"path\")          // svg->g->path (create new nodes per data)\r\n\t\t\t.attr(\"fill\", (d) => determineFillColour(d))\r\n\t\t\t.on(\"click\", function(e, d){\r\n\t\t\t\t// TODO: Functions (dragging nodes; etc.)\r\n\t\t\t})\r\n\t\t\t.on(\"contextmenu\", function(e, d){\r\n\t\t\t\te.preventDefault(); // Prevent browser context menu from opening\r\n\t\t\t\tconst nodeObject = findNode(d, \"cognate\");\r\n\r\n\t\t\t\tif(nodeObject)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst contextMenuItems = [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add new node (journey)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\t// Add new journey node within the country/region they right-clicked on (there may be multiple nodes in one country/region for journeys)\r\n\t\t\t\t\t\t\t\tlet collectionList = collections.filter(collection => collection.type === \"journey\"); // Journeys only\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={addNode} collectionList={collectionList} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add sibling node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={addNode} collectionIndex={nodeObject.collectionIndex} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Edit node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={editNode} collectionIndex={nodeObject.collectionIndex} childNodeIndex={nodeObject.childNodeIndex}\r\n\t\t\t\t\t\t\t\t                               word={nodeObject.node.word} language={nodeObject.node.language} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Remove node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tremoveNode(e, nodeObject.collectionIndex, nodeObject.childNodeIndex);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t];\r\n\t\t\t\t\topenContextMenu(e, <ContextMenu x={e.clientX} y={e.clientY} items={contextMenuItems} />);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// TODO: Context menu for adding to new collection, adding to existing collection\r\n\t\t\t\t\tconst contextMenuItems = [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add new node (journey)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tlet collectionList = collections.filter(collection => collection.type === \"journey\"); // Journeys only\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={addNode} collectionList={collectionList} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add to collection (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tlet collectionList = collections.filter(collection => collection.type === \"cognate\"); // Cognates only\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={addNode} collectionList={collectionList} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t\topenContextMenu(e, <ContextMenu x={e.clientX} y={e.clientY} items={contextMenuItems} />);\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\t\t\t.on(\"mouseover\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"white\") // White can't become transparent\r\n\t\t\t\t\telement.attr(\"fill\", \"rgb(230,230,230)\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"0.65\");\r\n\t\t\t})\r\n\t\t\t.on(\"mouseout\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\r\n\t\t\t\t\telement.attr(\"fill\", \"white\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"1\");\r\n\t\t\t})\r\n\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t.attr(\"stroke-linejoin\", \"round\")\r\n\t\t\t.attr(\"d\", path);\r\n\r\n\t\t// Cognate labels\r\n\t\tconst labelG = svg.append(\"g\");\r\n\t\tconst labels = labelG.classed(\"labels\", true);\r\n\t\tcountryPaths.each(function(f, i) {\r\n\t\t\t// Only place labels of countries with associated cognate data\r\n\t\t\t// TODO: Make this a setting\r\n\t\t\tlet node = findNode(f, \"cognate\");\r\n\t\t\tif(node)\r\n\t\t\t{\r\n\t\t\t\tnode = node.node;\r\n\t\t\t\tlet boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\r\n\t\t\t\tlet fontSize = \"initial\";                           // Font size of the label\r\n\t\t\t\tlet text = node.language;                           // Language by default\r\n\t\t\t\tif(node.labelType === \"country\") text = f.properties.name;\r\n\t\t\t\telse if(node.labelType === \"custom\") text = node.customLabel;\r\n\r\n\t\t\t\t// Scale factor depending on size of country (to stop oversized text from escaping country)\r\n\t\t\t\tif(text.length !== 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(boundingBox.width < (text.length * 16))\r\n\t\t\t\t\t\tfontSize = boundingBox.width/8 + \"px\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Append labels to paths, with co-ordinates according to feature's position on map\r\n\t\t\t\tlet label = labelG.append(\"text\")\r\n\t\t\t\t\t.attr(\"x\", (boundingBox.x + boundingBox.width/4)).attr(\"y\", (boundingBox.y + boundingBox.height/2))\r\n\t\t\t\t\t.style(\"font-size\", fontSize)\r\n\t\t\t\t\t.text(text);\r\n\r\n\t\t\t\t// Allow labels to be dragged\r\n\t\t\t\tlet startXOffset, startYOffset, resizing;\r\n\t\t\t\tlabel\r\n\t\t\t\t\t.on(\"mousemove\", (e) => {\r\n\t\t\t\t\t\tlet labelX = Number(label.attr(\"x\")), labelY = Number(label.attr(\"y\"));\r\n\t\t\t\t\t\tlet mouseX = e.layerX, mouseY = e.layerY;\r\n\r\n\t\t\t\t\t\t// Determine corners of textbox\r\n\t\t\t\t\t\tlet topLeft = {\r\n\t\t\t\t\t\t\txStart: labelX-5,\r\n\t\t\t\t\t\t\txEnd: labelX + 10,\r\n\t\t\t\t\t\t\tyStart: labelY - label.node().getBBox().height + 5,\r\n\t\t\t\t\t\t\tyEnd: labelY - label.node().getBBox().height + 15\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tlet topRight = {\r\n\t\t\t\t\t\t\txStart: labelX + label.node().getBBox().width - 5,\r\n\t\t\t\t\t\t\txEnd: labelX + label.node().getBBox().width + 15,\r\n\t\t\t\t\t\t\tyStart: labelY - label.node().getBBox().height + 5,\r\n\t\t\t\t\t\t\tyEnd: labelY - label.node().getBBox().height + 15\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tlet bottomLeft = {\r\n\t\t\t\t\t\t\txStart: labelX-5,\r\n\t\t\t\t\t\t\txEnd: labelX + 10,\r\n\t\t\t\t\t\t\tyStart: labelY,\r\n\t\t\t\t\t\t\tyEnd: labelY + 10\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tlet bottomRight = {\r\n\t\t\t\t\t\t\txStart: labelX + label.node().getBBox().width - 5,\r\n\t\t\t\t\t\t\txEnd: labelX + label.node().getBBox().width + 15,\r\n\t\t\t\t\t\t\tyStart: labelY,\r\n\t\t\t\t\t\t\tyEnd: labelY + 10\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t// Change cursor if in appropriate corner\r\n\t\t\t\t\t\tif(mouseX >= topLeft.xStart && mouseX <= topLeft.xEnd\r\n\t\t\t\t\t\t\t&& mouseY >= topLeft.yStart && mouseY <= topLeft.yEnd)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlabel.style(\"cursor\", \"nw-resize\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(mouseX >= topRight.xStart && mouseX <= topRight.xEnd\r\n\t\t\t\t\t\t\t&& mouseY >= topRight.yStart && mouseY <= topRight.yEnd)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlabel.style(\"cursor\", \"ne-resize\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(mouseX >= bottomLeft.xStart && mouseX <= bottomLeft.xEnd\r\n\t\t\t\t\t\t\t&& mouseY >= bottomLeft.yStart && mouseY <= bottomLeft.yEnd)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlabel.style(\"cursor\", \"sw-resize\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(mouseX >= bottomRight.xStart && mouseX <= bottomRight.xEnd\r\n\t\t\t\t\t\t\t&& mouseY >= bottomRight.yStart && mouseY <= bottomRight.yEnd)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlabel.style(\"cursor\", \"se-resize\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tlabel.style(\"cursor\", \"text\");\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.call(d3.drag()\r\n\t\t\t\t\t\t.on(\"start\", (e) => {\r\n\t\t\t\t\t\t\tlet labelX = Number(label.attr(\"x\")), labelY = Number(label.attr(\"y\"));\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tstartXOffset = mouseX - labelX;\r\n\t\t\t\t\t\t\tstartYOffset = mouseY - labelY;\r\n\r\n\t\t\t\t\t\t\t// Determine corners of text's box\r\n\t\t\t\t\t\t\tconst labelCorners = {\r\n\t\t\t\t\t\t\t\tnw: {\r\n\t\t\t\t\t\t\t\t\txStart: labelX-5,\r\n\t\t\t\t\t\t\t\t\txEnd: labelX + 10,\r\n\t\t\t\t\t\t\t\t\tyStart: labelY - label.node().getBBox().height + 5,\r\n\t\t\t\t\t\t\t\t\tyEnd: labelY - label.node().getBBox().height + 15\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tne: {\r\n\t\t\t\t\t\t\t\t\txStart: labelX + label.node().getBBox().width - 5,\r\n\t\t\t\t\t\t\t\t\txEnd: labelX + label.node().getBBox().width + 15,\r\n\t\t\t\t\t\t\t\t\tyStart: labelY - label.node().getBBox().height + 5,\r\n\t\t\t\t\t\t\t\t\tyEnd: labelY - label.node().getBBox().height + 15},\r\n\t\t\t\t\t\t\t\tsw: {\r\n\t\t\t\t\t\t\t\t\txStart: labelX-5,\r\n\t\t\t\t\t\t\t\t\txEnd: labelX + 10,\r\n\t\t\t\t\t\t\t\t\tyStart: labelY,\r\n\t\t\t\t\t\t\t\t\tyEnd: labelY + 10},\r\n\t\t\t\t\t\t\t\tse: {\r\n\t\t\t\t\t\t\t\t\txStart: labelX + label.node().getBBox().width - 5,\r\n\t\t\t\t\t\t\t\t\txEnd: labelX + label.node().getBBox().width + 15,\r\n\t\t\t\t\t\t\t\t\tyStart: labelY,\r\n\t\t\t\t\t\t\t\t\tyEnd: labelY + 10}\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t// Check corners\r\n\t\t\t\t\t\t\tObject.keys(labelCorners).forEach((key, index) => {\r\n\t\t\t\t\t\t\t\tlet corner = labelCorners[key];\r\n\t\t\t\t\t\t\t\tif(mouseX >= corner.xStart && mouseX <= corner.xEnd\r\n\t\t\t\t\t\t\t\t\t&& mouseY >= corner.yStart && mouseY <= corner.yEnd)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tresizing = \"key\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"drag\", (e) => {\r\n\t\t\t\t\t\t\tconst x = e.x - startXOffset;\r\n\t\t\t\t\t\t\tconst y = e.y - startYOffset;\r\n\t\t\t\t\t\t\tlabel.attr(\"x\", x).attr(\"y\", y);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"end\", () => {\r\n\r\n\t\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Graticules (lines on the map)\r\n\t\tconst g = svg.append(\"g\");\r\n\t\tconst graticules = g.classed(\"graticules\", true)\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\")\r\n\t\t\t.attr(\"d\", path(d3.geoGraticule()()));\r\n\r\n\t\t/*\r\n\t\tsvg.call(d3.zoom().on(\"zoom\", function () {\r\n\t\t\tz = d3.event.transform.k;\r\n\t\t\tdraw(); // TODO: Contain above render code into draw() function\r\n\t\t}));\r\n\t\t */\r\n\r\n\t\t// Clean-up function (kills all SVG elements upon unmounting)\r\n\t\treturn function cleanup()\r\n\t\t{\r\n\t\t\tsvg.selectAll(\"g\").remove();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\tfunction findNode(d, type)\r\n\t{\r\n\t\t// Search collections\r\n\t\tfor(let c = 0; c < collections.length; ++c)\r\n\t\t{\r\n\t\t\tlet collection = collections[c];\r\n\r\n\t\t\tif(type === \"cognate\")\r\n\t\t\t{\r\n\t\t\t\tif(collection.type === \"cognate\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let n = 0; n < collection.childNodes.length; ++n)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet childNode = collection.childNodes[n];\r\n\r\n\t\t\t\t\t\tif(d.properties.languages.includes(childNode.language))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {node: childNode, collectionIndex: c, childNodeIndex: n};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Determines country SVG fill colour according to countries' language(s) and the specified colour of that language's cognate node(s)\r\n\t * @param d Data attached to DOM element via D3 (i.e. the country)\r\n\t * @returns {string} The fill colour, as specified by user in Collection.jsx\r\n\t */\r\n\tfunction determineFillColour(d)\r\n\t{\r\n\t\tconst nodeObject = findNode(d, \"cognate\"); // Find node in collections\r\n\t\tif(nodeObject) return nodeObject.node.colour;   // Country has associated collection node? Return the colour\r\n\t\telse return \"white\";                            // Otherwise, return white by default for all countries with no associated data\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div className={\"map-container\"}>\r\n\t\t\t<svg\r\n\t\t\t\t/*ref={ref}*/\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\tbackgroundColor: \"#3d73ab\" /* The sea */\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}