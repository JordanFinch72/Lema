{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\AddEditNodeModal.jsx\";\nimport { Component } from \"react\";\nimport { Textbox } from \"./Textbox\";\nimport { Button } from \"./Button\";\nimport { RadioGroup } from \"./RadioGroup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class AddEditNodeModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      /* Node properties */\n      word: this.props.node.word || null,\n      parents: this.props.node.parents,\n      selectedParentIndex: 0,\n      // Cognate properties\n      colour: this.props.node.colour || null,\n      labelType: this.props.node.label !== undefined ? this.props.node.label.type || null : null,\n      labelCustomText: this.props.node.label !== undefined ? this.props.node.label.customText || null : null,\n      // Note: Text can be \"\"\n      labelFontColour: this.props.node.label !== undefined ? this.props.node.label.fontColour || null : null,\n      // Journey properties\n      vertexTextType: this.props.node.vertex !== undefined ? this.props.node.vertex.type || null : null,\n      vertexCustomText: this.props.node.vertex !== undefined ? this.props.node.vertex.customText || null : null,\n      // Note: Text can be \"\"\n      vertexFontColour: this.props.node.vertex !== undefined ? this.props.node.vertex.fontColour || null : null,\n      vertexStrokeColour: this.props.node.vertex !== undefined ? this.props.node.vertex.strokeColour || null : null,\n      vertexFillColour: this.props.node.vertex !== undefined ? this.props.node.vertex.fillColour || null : null,\n      vertexEdgeStrokeColour: this.props.node.vertex !== undefined ? this.props.node.vertex.edgeStrokeColour || null : null,\n      vertexEdgeStrokeWidth: this.props.node.vertex !== undefined ? this.props.node.vertex.edgeStrokeWidth || null : null,\n      vertexArrowheadStrokeColour: this.props.node.vertex !== undefined ? this.props.node.vertex.vertexArrowheadStrokeColour || null : null,\n      // Optional or can be overridden\n      language: typeof this.props.language === \"object\" ? this.props.language[0] : this.props.language,\n      collection: this.props.collectionList !== undefined ? `${this.props.collectionList[0].type[0].toUpperCase() + this.props.collectionList[0].type.substring(1)}: ${this.props.collectionList[0].header.word}` : null\n    };\n    this.onNodeSubmit = this.props.onNodeSubmit.bind(this);\n    this.onFieldChange = this.onFieldChange.bind(this);\n    this.onLabelRadioClick = this.onLabelRadioClick.bind(this);\n    this.onVertexRadioClick = this.onVertexRadioClick.bind(this);\n  }\n\n  onFieldChange(event) {\n    const target = event.target;\n    const name = target.name;\n    let value = target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  onLabelRadioClick(e, data) {\n    // Update parent LeftBar component's state\n    let labelType;\n    if (data.id === 0) labelType = \"language\";else if (data.id === 1) labelType = \"country\";else if (data.id === 2) labelType = \"word\";else if (data.id === 3) labelType = \"customText\";\n    this.setState({\n      labelType: labelType\n    });\n  }\n\n  onVertexRadioClick(e, data) {\n    // Update parent LeftBar component's state\n    let vertexTextType;\n    if (data.id === 0) vertexTextType = \"language\";else if (data.id === 1) vertexTextType = \"country\";else if (data.id === 2) vertexTextType = \"word\";else if (data.id === 3) vertexTextType = \"customText\";\n    this.setState({\n      vertexTextType: vertexTextType\n    }, e => {\n      console.log(this.state.vertexTextType);\n    });\n  }\n\n  validation() {\n    // TODO: Validate form data\n    return true;\n  }\n\n  render() {\n    // Languages is a textbox if none or one language is supplied, or a drop-down menu if some are supplied\n    let languageInput;\n\n    if (typeof this.props.language === \"object\") {\n      let options = [];\n\n      for (let i = 0; i < this.props.language.length; ++i) {\n        options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n          children: this.props.language[i]\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 18\n        }, this));\n      }\n\n      languageInput = /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"language\",\n        value: this.state.language,\n        onChange: this.onFieldChange,\n        children: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 20\n      }, this);\n    } else {\n      languageInput = /*#__PURE__*/_jsxDEV(Textbox, {\n        hint: \"e.g. \\\"English (GB)\\\"\",\n        name: \"language\",\n        value: this.state.language,\n        onFieldChange: this.onFieldChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 20\n      }, this);\n    } // If no collectionIndex is supplied, allow them to select one from the list\n\n\n    let selectCollection;\n\n    if (!this.props.collectionIndex === undefined) {\n      let options = [];\n      let i = 0;\n\n      for (i; i < this.props.collectionList.length; ++i) {\n        let collection = this.props.collectionList[i];\n        let string = `${collection.type[0].toUpperCase() + collection.type.substring(1)}: ${this.props.collectionList[i].header.word}`;\n        options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n          children: string\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 18\n        }, this));\n      }\n\n      selectCollection = [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Collection\"\n      }, 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"collection\",\n        value: this.state.collection,\n        onChange: this.onFieldChange,\n        children: options\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this)];\n    } // Label components (if appropriate)\n\n\n    let labelControls = [],\n        nodeColourControls = [];\n\n    if (this.props.node.label) {\n      nodeColourControls.push( /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Node Country/Region Colour\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-colour-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"textbox\",\n          name: \"colour\",\n          value: this.state.colour,\n          onChange: this.onFieldChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          defaultValue: this.state.colour,\n          value: this.state.colour,\n          onChange: e => {\n            this.setState({\n              colour: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 5\n      }, this)); // RadioGroup buttons\n\n      const buttons = [{\n        active: false,\n        label: \"Node language\"\n      }, {\n        active: false,\n        label: \"Node country/region\"\n      }, {\n        active: false,\n        label: \"Word\"\n      }, {\n        active: false,\n        label: \"Custom label:\"\n      }];\n      let labelTypeIndex;\n      if (this.state.labelType === \"language\") labelTypeIndex = 0;else if (this.state.labelType === \"country\") labelTypeIndex = 1;else if (this.state.labelType === \"word\") labelTypeIndex = 2;else if (this.state.labelType === \"customText\") labelTypeIndex = 3;\n      buttons[labelTypeIndex].active = true;\n      labelControls = [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Label\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label-controls-container\",\n        children: [\",\", /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n          buttons: buttons,\n          name: \"custom-label\",\n          onRadioButtonClick: this.onLabelRadioClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Textbox, {\n          hint: \"Custom label text...\",\n          name: \"labelCustomText\",\n          value: this.state.labelCustomText,\n          onFieldChange: this.onFieldChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"label-colour-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Font colour: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"textbox\",\n              name: \"labelFontColour\",\n              value: this.state.labelFontColour,\n              onChange: this.onFieldChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"color\",\n              defaultValue: this.state.labelFontColour,\n              value: this.state.labelFontColour,\n              onChange: e => {\n                this.setState({\n                  labelFontColour: e.target.value\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 5\n      }, this)];\n    } // Vertex properties (if appropriate)\n\n\n    let vertexControls = [];\n\n    if (this.props.node.vertex) {\n      // RadioGroup buttons\n      const buttons = [{\n        active: false,\n        label: \"Node language\"\n      }, {\n        active: false,\n        label: \"Node country/region\"\n      }, {\n        active: false,\n        label: \"Word\"\n      }, {\n        active: false,\n        label: \"Custom label:\"\n      }];\n      let vertexTextType;\n      if (this.state.vertexTextType === \"language\") vertexTextType = 0;else if (this.state.vertexTextType === \"country\") vertexTextType = 1;else if (this.state.vertexTextType === \"word\") vertexTextType = 2;else if (this.state.vertexTextType === \"customText\") vertexTextType = 3;\n      buttons[vertexTextType].active = true;\n      vertexControls = [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Vertex\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vertex-controls-container\",\n        children: [\",\", /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n          buttons: buttons,\n          name: \"custom-vertex-text\",\n          onRadioButtonClick: this.onVertexRadioClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Textbox, {\n          hint: \"Custom vertex text...\",\n          name: \"vertexCustomText\",\n          value: this.state.vertexCustomText,\n          onFieldChange: this.onFieldChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"label-colour-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Font colour: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"textbox\",\n              name: \"vertexFontColour\",\n              value: this.state.vertexFontColour,\n              onChange: this.onFieldChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"color\",\n              defaultValue: this.state.vertexFontColour,\n              value: this.state.vertexFontColour,\n              onChange: e => {\n                this.setState({\n                  vertexFontColour: e.target.value\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Vertex:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"vertex-colour-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Vertex stroke colour: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"textbox\",\n              name: \"vertexStrokeColour\",\n              value: this.state.vertexStrokeColour,\n              onChange: this.onFieldChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"color\",\n              defaultValue: this.state.vertexStrokeColour,\n              value: this.state.vertexStrokeColour,\n              onChange: e => {\n                this.setState({\n                  vertexStrokeColour: e.target.value\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"vertex-colour-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Vertex fill colour: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"textbox\",\n              name: \"vertexFillColour\",\n              value: this.state.vertexFillColour,\n              onChange: this.onFieldChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"color\",\n              defaultValue: this.state.vertexFillColour,\n              value: this.state.vertexFillColour,\n              onChange: e => {\n                this.setState({\n                  vertexFillColour: e.target.value\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"vertex-colour-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Edge colour: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"textbox\",\n              name: \"vertexEdgeStrokeColour\",\n              value: this.state.vertexEdgeStrokeColour,\n              onChange: this.onFieldChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"color\",\n              defaultValue: this.state.vertexEdgeStrokeColour,\n              value: this.state.vertexEdgeStrokeColour,\n              onChange: e => {\n                this.setState({\n                  vertexEdgeStrokeColour: e.target.value\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"vertex-colour-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Edge stroke width:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"textbox\",\n              name: \"vertexEdgeStrokeWidth\",\n              value: this.state.vertexEdgeStrokeWidth,\n              onChange: this.onFieldChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"vertex-colour-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Arrowhead colour:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"textbox\",\n              name: \"vertexEdgeStrokeWidth\",\n              value: this.state.vertexEdgeStrokeWidth,\n              onChange: this.onFieldChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 5\n      }, this)];\n    } // TODO: Decide between:\n    //   - (1) changing HCI so that users create a child node from a parent, and can only make a (single) parent node per collection from the collection context menu\n    //   - (2) passing down the collection's words into the modal as a prop. Not sure what kind of performance/memory hit this would induce\n    // Parents\n\n\n    let parentList = [],\n        potentialParentList = [],\n        parentControls = [];\n\n    if (this.props.node.parents) {\n      // Gather current parents\n      for (let i = 0; i < this.props.node.parents.length; ++i) {\n        let parent = this.props.node.parents[i];\n        parentList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"parent-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: parent.word + \" (\" + parent.language + \")\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              value: \"X\",\n              onClick: e => {\n                this.props.node.parents.splice(i, 1);\n                this.setState({\n                  parents: this.props.node.parents\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this));\n      }\n    }\n\n    if (this.props.words) {\n      for (let i = 0; i < this.props.words.length; ++i) {\n        // List all potential new parents\n        let word = this.props.words[i];\n\n        if (this.props.node !== word && !this.props.node.parents.includes(word)) {\n          potentialParentList.push( /*#__PURE__*/_jsxDEV(\"option\", {\n            \"data-index\": i,\n            children: word.word + \" (\" + word.language + \")\"\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 31\n          }, this));\n        }\n      }\n    }\n\n    console.log(potentialParentList);\n\n    let potentialParents = /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"selectedParent\",\n      onChange: event => {\n        const selectedIndex = event.target.selectedIndex;\n        this.setState({\n          selectedParentIndex: selectedIndex\n        });\n      },\n      children: potentialParentList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 26\n    }, this);\n\n    if (potentialParents) {\n      parentControls = /*#__PURE__*/_jsxDEV(Button, {\n        id: \"add-node-modal-add-parent\",\n        value: \"Add parent\",\n        onClick: e => {\n          let selectedParent = potentialParentList[this.state.selectedParentIndex];\n          let parentIndex = selectedParent.props[\"data-index\"];\n          this.props.node.parents.push(this.props.words[parentIndex]);\n          this.setState({\n            parents: this.props.node.parents\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 21\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Textbox, {\n        hint: \"e.g. \\\"Horse\\\"...\",\n        name: \"word\",\n        value: this.state.word,\n        onFieldChange: this.onFieldChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Language\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 5\n      }, this), languageInput, /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Current Parents\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 5\n      }, this), parentList.length > 0 ? parentList : \"None\", /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Potential Parents\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 5\n      }, this), potentialParents, parentControls, labelControls, \" \", vertexControls, selectCollection, /*#__PURE__*/_jsxDEV(Button, {\n        value: \"Submit\",\n        id: \"add-node-modal-submit\",\n        onClick: e => {\n          if (this.validation()) {\n            // Build node structure to match collection type\n            let updatedNode;\n\n            if (this.props.type === \"journey\") {\n              updatedNode = { ...this.props.node,\n                word: this.state.word,\n                language: this.state.language,\n                colour: this.state.colour,\n                vertex: { ...this.props.node.vertex,\n                  type: this.state.vertexTextType,\n                  customText: this.state.vertexCustomText,\n                  fontColour: this.state.vertexFontColour,\n                  strokeColour: this.state.vertexStrokeColour,\n                  fillColour: this.state.vertexFillColour,\n                  edgeStrokeColour: this.state.vertexEdgeStrokeColour,\n                  edgeStrokeWidth: this.state.vertexEdgeStrokeWidth\n                }\n              };\n            } else if (this.props.type === \"cognate\") {\n              updatedNode = { ...this.props.node,\n                word: this.state.word,\n                language: this.state.language,\n                colour: this.state.colour,\n                label: { ...this.props.node.label,\n                  type: this.state.labelType,\n                  customText: this.state.labelCustomText,\n                  fontColour: this.state.labelFontColour,\n                  fontSize: this.state.fontSize\n                }\n              };\n            }\n\n            this.props.onNodeSubmit(e, this.props.collectionIndex, updatedNode);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/AddEditNodeModal.jsx"],"names":["Component","Textbox","Button","RadioGroup","AddEditNodeModal","constructor","props","state","word","node","parents","selectedParentIndex","colour","labelType","label","undefined","type","labelCustomText","customText","labelFontColour","fontColour","vertexTextType","vertex","vertexCustomText","vertexFontColour","vertexStrokeColour","strokeColour","vertexFillColour","fillColour","vertexEdgeStrokeColour","edgeStrokeColour","vertexEdgeStrokeWidth","edgeStrokeWidth","vertexArrowheadStrokeColour","language","collection","collectionList","toUpperCase","substring","header","onNodeSubmit","bind","onFieldChange","onLabelRadioClick","onVertexRadioClick","event","target","name","value","setState","e","data","id","console","log","validation","render","languageInput","options","i","length","push","selectCollection","collectionIndex","string","labelControls","nodeColourControls","buttons","active","labelTypeIndex","vertexControls","parentList","potentialParentList","parentControls","parent","splice","words","includes","potentialParents","selectedIndex","selectedParent","parentIndex","updatedNode","fontSize"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\r\nimport {Textbox} from \"./Textbox\";\r\nimport {Button} from \"./Button\";\r\nimport {RadioGroup} from \"./RadioGroup\";\r\n\r\nexport class AddEditNodeModal extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\t/* Node properties */\r\n\t\t\tword: this.props.node.word || null,\r\n\t\t\tparents: this.props.node.parents,\r\n\t\t\tselectedParentIndex: 0,\r\n\r\n\t\t\t// Cognate properties\r\n\t\t\tcolour: this.props.node.colour || null,\r\n\t\t\tlabelType: (this.props.node.label !== undefined) ? this.props.node.label.type || null : null,\r\n\t\t\tlabelCustomText: (this.props.node.label !== undefined) ? this.props.node.label.customText || null : null, // Note: Text can be \"\"\r\n\t\t\tlabelFontColour: (this.props.node.label !== undefined) ? this.props.node.label.fontColour || null : null,\r\n\r\n\t\t\t// Journey properties\r\n\t\t\tvertexTextType: (this.props.node.vertex !== undefined) ? this.props.node.vertex.type || null : null,\r\n\t\t\tvertexCustomText: (this.props.node.vertex !== undefined) ? this.props.node.vertex.customText || null : null, // Note: Text can be \"\"\r\n\t\t\tvertexFontColour: (this.props.node.vertex !== undefined) ? this.props.node.vertex.fontColour || null : null,\r\n\t\t\tvertexStrokeColour: (this.props.node.vertex !== undefined) ? this.props.node.vertex.strokeColour || null : null,\r\n\t\t\tvertexFillColour: (this.props.node.vertex !== undefined) ? this.props.node.vertex.fillColour || null : null,\r\n\t\t\tvertexEdgeStrokeColour: (this.props.node.vertex !== undefined) ? this.props.node.vertex.edgeStrokeColour || null : null,\r\n\t\t\tvertexEdgeStrokeWidth: (this.props.node.vertex !== undefined) ? this.props.node.vertex.edgeStrokeWidth || null : null,\r\n\t\t\tvertexArrowheadStrokeColour: (this.props.node.vertex !== undefined) ? this.props.node.vertex.vertexArrowheadStrokeColour || null : null,\r\n\r\n\t\t\t// Optional or can be overridden\r\n\t\t\tlanguage: (typeof this.props.language === \"object\") ? this.props.language[0] : this.props.language,\r\n\t\t\tcollection: (this.props.collectionList !== undefined)\r\n\t\t\t\t? (`${this.props.collectionList[0].type[0].toUpperCase() + this.props.collectionList[0].type.substring(1)}: ${this.props.collectionList[0].header.word}`) : null,\r\n\t\t};\r\n\r\n\t\tthis.onNodeSubmit = this.props.onNodeSubmit.bind(this);\r\n\t\tthis.onFieldChange = this.onFieldChange.bind(this);\r\n\t\tthis.onLabelRadioClick = this.onLabelRadioClick.bind(this);\r\n\t\tthis.onVertexRadioClick = this.onVertexRadioClick.bind(this);\r\n\t}\r\n\r\n\tonFieldChange(event)\r\n\t{\r\n\t\tconst target = event.target;\r\n\t\tconst name = target.name;\r\n\t\tlet value = target.value;\r\n\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t}\r\n\r\n\tonLabelRadioClick(e, data)\r\n\t{\r\n\t\t// Update parent LeftBar component's state\r\n\t\tlet labelType;\r\n\t\tif(data.id === 0) labelType = \"language\";\r\n\t\telse if(data.id === 1) labelType = \"country\";\r\n\t\telse if(data.id === 2) labelType = \"word\";\r\n\t\telse if(data.id === 3) labelType = \"customText\";\r\n\r\n\t\tthis.setState({labelType: labelType});\r\n\t}\r\n\tonVertexRadioClick(e, data)\r\n\t{\r\n\t\t// Update parent LeftBar component's state\r\n\t\tlet vertexTextType;\r\n\t\tif(data.id === 0) vertexTextType = \"language\";\r\n\t\telse if(data.id === 1) vertexTextType = \"country\";\r\n\t\telse if(data.id === 2) vertexTextType = \"word\";\r\n\t\telse if(data.id === 3) vertexTextType = \"customText\";\r\n\r\n\t\tthis.setState({vertexTextType: vertexTextType}, (e) => {console.log(this.state.vertexTextType)});\r\n\t}\r\n\tvalidation()\r\n\t{\r\n\t\t// TODO: Validate form data\r\n\t\treturn true;\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\t// Languages is a textbox if none or one language is supplied, or a drop-down menu if some are supplied\r\n\t\tlet languageInput;\r\n\t\tif(typeof this.props.language === \"object\")\r\n\t\t{\r\n\t\t\tlet options = [];\r\n\t\t\tfor(let i = 0; i < this.props.language.length; ++i)\r\n\t\t\t{\r\n\t\t\t\toptions.push(<option key={i}>{this.props.language[i]}</option>);\r\n\t\t\t}\r\n\t\t\tlanguageInput = <select name={\"language\"} value={this.state.language} onChange={this.onFieldChange}>\r\n\t\t\t\t{options}\r\n\t\t\t</select>\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlanguageInput = <Textbox hint={\"e.g. \\\"English (GB)\\\"\"} name={\"language\"} value={this.state.language} onFieldChange={this.onFieldChange} />\r\n\t\t}\r\n\r\n\t\t// If no collectionIndex is supplied, allow them to select one from the list\r\n\t\tlet selectCollection;\r\n\t\tif(!this.props.collectionIndex === undefined)\r\n\t\t{\r\n\t\t\tlet options = [];\r\n\r\n\t\t\tlet i = 0;\r\n\t\t\tfor(i; i < this.props.collectionList.length; ++i)\r\n\t\t\t{\r\n\t\t\t\tlet collection = this.props.collectionList[i];\r\n\t\t\t\tlet string = `${collection.type[0].toUpperCase() + collection.type.substring(1)}: ${this.props.collectionList[i].header.word}`;\r\n\t\t\t\toptions.push(<option key={i}>{string}</option>);\r\n\t\t\t}\r\n\t\t\tselectCollection = [\r\n\t\t\t\t<h3 key={0}>Collection</h3>,\r\n\t\t\t\t<select key={1} name={\"collection\"} value={this.state.collection} onChange={this.onFieldChange}>\r\n\t\t\t\t\t{options}\r\n\t\t\t\t</select>\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\t// Label components (if appropriate)\r\n\t\tlet labelControls = [], nodeColourControls = [];\r\n\t\tif(this.props.node.label)\r\n\t\t{\r\n\t\t\tnodeColourControls.push(\r\n\t\t\t\t<h3>Node Country/Region Colour</h3>,\r\n\t\t\t\t<div className={\"node-colour-container\"}>\r\n\t\t\t\t\t<input type={\"textbox\"} name={\"colour\"} value={this.state.colour} onChange={this.onFieldChange} />\r\n\t\t\t\t\t<input type={\"color\"} defaultValue={this.state.colour} value={this.state.colour} onChange={(e) => {\r\n\t\t\t\t\t\tthis.setState({colour: e.target.value});\r\n\t\t\t\t\t}}/>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\r\n\t\t\t// RadioGroup buttons\r\n\t\t\tconst buttons = [{active: false, label: \"Node language\"}, {active: false, label: \"Node country/region\"}, {active: false, label: \"Word\"}, {active: false, label: \"Custom label:\"}];\r\n\t\t\tlet labelTypeIndex;\r\n\t\t\tif(this.state.labelType === \"language\")\r\n\t\t\t\tlabelTypeIndex = 0;\r\n\t\t\telse if(this.state.labelType === \"country\")\r\n\t\t\t\tlabelTypeIndex = 1;\r\n\t\t\telse if(this.state.labelType === \"word\")\r\n\t\t\t\tlabelTypeIndex = 2;\r\n\t\t\telse if(this.state.labelType === \"customText\")\r\n\t\t\t\tlabelTypeIndex = 3;\r\n\t\t\tbuttons[labelTypeIndex].active = true;\r\n\r\n\t\t\tlabelControls = [\r\n\t\t\t\t<h3>Label</h3>,\r\n\t\t\t\t<div className={\"label-controls-container\"}>,\r\n\t\t\t\t\t<h4>Text:</h4>\r\n\t\t\t\t\t<RadioGroup buttons={buttons} name={\"custom-label\"} onRadioButtonClick={this.onLabelRadioClick} />\r\n\t\t\t\t\t<Textbox hint={\"Custom label text...\"} name={\"labelCustomText\"} value={this.state.labelCustomText} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t<div className={\"label-colour-container\"}>\r\n\t\t\t\t\t\t<h4>Font colour: </h4>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<input type={\"textbox\"} name={\"labelFontColour\"} value={this.state.labelFontColour} onChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t<input type={\"color\"} defaultValue={this.state.labelFontColour} value={this.state.labelFontColour} onChange={(e) => {\r\n\t\t\t\t\t\t\t\tthis.setState({labelFontColour: e.target.value});\r\n\t\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t]\r\n\t\t}\r\n\r\n\t\t// Vertex properties (if appropriate)\r\n\t\tlet vertexControls = [];\r\n\t\tif(this.props.node.vertex)\r\n\t\t{\r\n\t\t\t// RadioGroup buttons\r\n\t\t\tconst buttons = [{active: false, label: \"Node language\"}, {active: false, label: \"Node country/region\"}, {active: false, label: \"Word\"}, {active: false, label: \"Custom label:\"}];\r\n\t\t\tlet vertexTextType;\r\n\t\t\tif(this.state.vertexTextType === \"language\")\r\n\t\t\t\tvertexTextType = 0;\r\n\t\t\telse if(this.state.vertexTextType === \"country\")\r\n\t\t\t\tvertexTextType = 1;\r\n\t\t\telse if(this.state.vertexTextType === \"word\")\r\n\t\t\t\tvertexTextType = 2;\r\n\t\t\telse if(this.state.vertexTextType === \"customText\")\r\n\t\t\t\tvertexTextType = 3;\r\n\t\t\tbuttons[vertexTextType].active = true;\r\n\r\n\t\t\tvertexControls = [\r\n\t\t\t\t<h3>Vertex</h3>,\r\n\t\t\t\t<div className={\"vertex-controls-container\"}>,\r\n\t\t\t\t\t<h4>Text:</h4>\r\n\t\t\t\t\t<RadioGroup buttons={buttons} name={\"custom-vertex-text\"} onRadioButtonClick={this.onVertexRadioClick} />\r\n\t\t\t\t\t<Textbox hint={\"Custom vertex text...\"} name={\"vertexCustomText\"} value={this.state.vertexCustomText} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t<div className={\"label-colour-container\"}>\r\n\t\t\t\t\t\t<h4>Font colour: </h4>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<input type={\"textbox\"} name={\"vertexFontColour\"} value={this.state.vertexFontColour} onChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t<input type={\"color\"} defaultValue={this.state.vertexFontColour} value={this.state.vertexFontColour} onChange={(e) => {\r\n\t\t\t\t\t\t\t\tthis.setState({vertexFontColour: e.target.value});\r\n\t\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<h4>Vertex:</h4>\r\n\t\t\t\t\t<div className={\"vertex-colour-container\"}>\r\n\t\t\t\t\t\t<h4>Vertex stroke colour: </h4>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<input type={\"textbox\"} name={\"vertexStrokeColour\"} value={this.state.vertexStrokeColour} onChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t<input type={\"color\"} defaultValue={this.state.vertexStrokeColour} value={this.state.vertexStrokeColour} onChange={(e) => {\r\n\t\t\t\t\t\t\t\tthis.setState({vertexStrokeColour: e.target.value});\r\n\t\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={\"vertex-colour-container\"}>\r\n\t\t\t\t\t\t<h4>Vertex fill colour: </h4>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<input type={\"textbox\"} name={\"vertexFillColour\"} value={this.state.vertexFillColour} onChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t<input type={\"color\"} defaultValue={this.state.vertexFillColour} value={this.state.vertexFillColour} onChange={(e) => {\r\n\t\t\t\t\t\t\t\tthis.setState({vertexFillColour: e.target.value});\r\n\t\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={\"vertex-colour-container\"}>\r\n\t\t\t\t\t\t<h4>Edge colour: </h4>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<input type={\"textbox\"} name={\"vertexEdgeStrokeColour\"} value={this.state.vertexEdgeStrokeColour} onChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t<input type={\"color\"} defaultValue={this.state.vertexEdgeStrokeColour} value={this.state.vertexEdgeStrokeColour} onChange={(e) => {\r\n\t\t\t\t\t\t\t\tthis.setState({vertexEdgeStrokeColour: e.target.value});\r\n\t\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={\"vertex-colour-container\"}>\r\n\t\t\t\t\t\t<h4>Edge stroke width:</h4>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<input type={\"textbox\"} name={\"vertexEdgeStrokeWidth\"} value={this.state.vertexEdgeStrokeWidth} onChange={this.onFieldChange} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={\"vertex-colour-container\"}>\r\n\t\t\t\t\t\t<h4>Arrowhead colour:</h4>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<input type={\"textbox\"} name={\"vertexEdgeStrokeWidth\"} value={this.state.vertexEdgeStrokeWidth} onChange={this.onFieldChange} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t]\r\n\t\t}\r\n\r\n\r\n\t\t// TODO: Decide between:\r\n\t\t//   - (1) changing HCI so that users create a child node from a parent, and can only make a (single) parent node per collection from the collection context menu\r\n\t\t//   - (2) passing down the collection's words into the modal as a prop. Not sure what kind of performance/memory hit this would induce\r\n\t\t// Parents\r\n\t\tlet parentList = [], potentialParentList = [], parentControls = [];\r\n\t\tif(this.props.node.parents)\r\n\t\t{\r\n\t\t\t// Gather current parents\r\n\t\t\tfor(let i = 0; i < this.props.node.parents.length; ++i)\r\n\t\t\t{\r\n\t\t\t\tlet parent = this.props.node.parents[i];\r\n\t\t\t\tparentList.push(<div className={\"parent-list\"}>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t{parent.word + \" (\" + parent.language + \")\"}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<Button value={\"X\"} onClick={(e) => {\r\n\t\t\t\t\t\t\tthis.props.node.parents.splice(i, 1);\r\n\t\t\t\t\t\t\tthis.setState({parents: this.props.node.parents});\r\n\t\t\t\t\t\t}} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this.props.words)\r\n\t\t{\r\n\t\t\tfor(let i = 0; i < this.props.words.length; ++i)\r\n\t\t\t{\r\n\t\t\t\t// List all potential new parents\r\n\t\t\t\tlet word = this.props.words[i];\r\n\t\t\t\tif(this.props.node !== word && !this.props.node.parents.includes(word))\r\n\t\t\t\t{\r\n\t\t\t\t\tpotentialParentList.push(<option key={i} data-index={i}>{word.word + \" (\" + word.language + \")\"}</option>);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log(potentialParentList);\r\n\t\tlet potentialParents = <select name={\"selectedParent\"} onChange={(event) => {\r\n\t\t\tconst selectedIndex = event.target.selectedIndex;\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tselectedParentIndex: selectedIndex\r\n\t\t\t});\r\n\t\t}}>\r\n\t\t\t{potentialParentList}\r\n\t\t</select>;\r\n\t\tif(potentialParents)\r\n\t\t{\r\n\t\t\tparentControls = <Button id={\"add-node-modal-add-parent\"} value={\"Add parent\"} onClick={(e) => {\r\n\t\t\t\tlet selectedParent = potentialParentList[this.state.selectedParentIndex];\r\n\t\t\t\tlet parentIndex = selectedParent.props[\"data-index\"];\r\n\t\t\t\tthis.props.node.parents.push(this.props.words[parentIndex]);\r\n\t\t\t\tthis.setState({parents: this.props.node.parents});\r\n\t\t\t}} />\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className={\"modal\"}>\r\n\t\t\t\t<h3>Word</h3>\r\n\t\t\t\t<Textbox hint={\"e.g. \\\"Horse\\\"...\"} name={\"word\"} value={this.state.word} onFieldChange={this.onFieldChange}/>\r\n\t\t\t\t<h3>Language</h3>\r\n\t\t\t\t{languageInput}\r\n\t\t\t\t<h3>Current Parents</h3>\r\n\t\t\t\t{(parentList.length > 0) ? parentList : \"None\"}\r\n\t\t\t\t<h3>Potential Parents</h3>\r\n\t\t\t\t{potentialParents}\r\n\t\t\t\t{parentControls}\r\n\t\t\t\t{labelControls} {vertexControls}\r\n\t\t\t\t{selectCollection}\r\n\t\t\t\t<Button value={\"Submit\"} id={\"add-node-modal-submit\"} onClick={(e) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.validation())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Build node structure to match collection type\r\n\t\t\t\t\t\tlet updatedNode;\r\n\t\t\t\t\t\tif(this.props.type === \"journey\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tupdatedNode = {\r\n\t\t\t\t\t\t\t\t...this.props.node,\r\n\t\t\t\t\t\t\t\tword: this.state.word, language: this.state.language, colour: this.state.colour,\r\n\t\t\t\t\t\t\t\tvertex: {\r\n\t\t\t\t\t\t\t\t\t...this.props.node.vertex,\r\n\t\t\t\t\t\t\t\t\ttype: this.state.vertexTextType,\r\n\t\t\t\t\t\t\t\t\tcustomText: this.state.vertexCustomText,\r\n\t\t\t\t\t\t\t\t\tfontColour: this.state.vertexFontColour,\r\n\t\t\t\t\t\t\t\t\tstrokeColour: this.state.vertexStrokeColour,\r\n\t\t\t\t\t\t\t\t\tfillColour: this.state.vertexFillColour,\r\n\t\t\t\t\t\t\t\t\tedgeStrokeColour: this.state.vertexEdgeStrokeColour,\r\n\t\t\t\t\t\t\t\t\tedgeStrokeWidth: this.state.vertexEdgeStrokeWidth\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(this.props.type === \"cognate\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tupdatedNode = {\r\n\t\t\t\t\t\t\t\t...this.props.node,\r\n\t\t\t\t\t\t\t\tword: this.state.word, language: this.state.language, colour: this.state.colour,\r\n\t\t\t\t\t\t\t\tlabel: {\r\n\t\t\t\t\t\t\t\t\t...this.props.node.label,\r\n\t\t\t\t\t\t\t\t\ttype: this.state.labelType,\r\n\t\t\t\t\t\t\t\t\tcustomText: this.state.labelCustomText,\r\n\t\t\t\t\t\t\t\t\tfontColour: this.state.labelFontColour,\r\n\t\t\t\t\t\t\t\t\tfontSize: this.state.fontSize\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.props.onNodeSubmit(e, this.props.collectionIndex, updatedNode);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}