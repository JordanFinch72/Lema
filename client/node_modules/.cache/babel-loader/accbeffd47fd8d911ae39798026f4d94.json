{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\AddEditNodeModal.jsx\";\nimport { Component } from \"react\";\nimport { Textbox } from \"./Textbox\";\nimport { Button } from \"./Button\";\nimport { RadioGroup } from \"./RadioGroup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class AddEditNodeModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      word: this.props.word || null,\n      language: typeof this.props.language === \"object\" ? this.props.language[0] : this.props.language,\n      collection: this.props.collectionList ? `${this.props.collectionList[0].type[0].toUpperCase() + this.props.collectionList[0].type.substring(1)}: ${this.props.collectionList[0].header.word}` : null,\n      colour: this.props.colour || null,\n      labelType: this.props.labelType || null,\n      customLabel: this.props.customLabel || null\n    };\n    this.onNodeSubmit = this.props.onNodeSubmit.bind(this);\n    this.onFieldChange = this.onFieldChange.bind(this);\n  }\n\n  onFieldChange(event) {\n    const target = event.target;\n    const name = target.name;\n    let value = target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  onLabelRadioClick(e, data) {\n    // Update parent LeftBar component's state\n    let labelType = data.id === 0 ? \"language\" : \"country\"; // Wipe label when they click on one of these buttons\n\n    let customLabel = this.state.customLabel;\n    if (customLabel !== null) customLabel = null;\n    this.setState({\n      labelType: labelType,\n      customLabel: customLabel\n    });\n  }\n\n  render() {\n    // Languages is a textbox if none or one language is supplied, or a drop-down menu if some are supplied\n    let languageInput;\n\n    if (typeof this.props.language === \"object\") {\n      let options = [];\n\n      for (let i = 0; i < this.props.language.length; ++i) {\n        options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n          children: this.props.language[i]\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 18\n        }, this));\n      }\n\n      languageInput = /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"language\",\n        value: this.state.language,\n        onChange: this.onFieldChange,\n        children: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 20\n      }, this);\n    } else {\n      languageInput = /*#__PURE__*/_jsxDEV(Textbox, {\n        hint: \"e.g. \\\"English (GB)\\\"\",\n        name: \"language\",\n        value: this.state.language,\n        onFieldChange: this.onFieldChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 20\n      }, this);\n    } // If no collectionIndex is supplied, allow them to select one from the list\n\n\n    let selectCollection;\n\n    if (!this.props.collectionIndex) {\n      let options = [];\n      let i = 0;\n\n      for (i; i < this.props.collectionList.length; ++i) {\n        let collection = this.props.collectionList[i];\n        let string = `${collection.type[0].toUpperCase() + collection.type.substring(1)}: ${this.props.collectionList[i].header.word}`;\n        options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n          children: string\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 18\n        }, this));\n      }\n\n      selectCollection = [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Collection\"\n      }, 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"collection\",\n        value: this.state.collection,\n        onChange: this.onFieldChange,\n        children: options\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this)];\n    } // RadioGroup buttons\n\n\n    const buttons = [{\n      active: true,\n      label: \"Node language\"\n    }, {\n      active: false,\n      label: \"Node country/region\"\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Textbox, {\n        hint: \"e.g. \\\"Horse\\\"...\",\n        name: \"word\",\n        value: this.state.word,\n        onFieldChange: this.onFieldChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Language\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }, this), languageInput, /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Node Colour\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        defaultValue: this.state.colour,\n        onChange: e => {\n          this.setState({\n            colour: e.target.value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Label\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label-controls-container\",\n        children: [/*#__PURE__*/_jsxDEV(RadioGroup, {\n          buttons: buttons,\n          onButtonClick: this.onLabelRadioClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"custom-label\",\n          children: \"Custom label: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Textbox, {\n          hint: \"Optional custom label (overrides language/country)\",\n          name: \"customLabel\",\n          value: this.state.customLabel,\n          onFieldChange: this.onFieldChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 5\n      }, this), selectCollection, /*#__PURE__*/_jsxDEV(Button, {\n        value: \"Submit\",\n        id: \"add-node-modal-submit\",\n        onClick: e => {\n          let data = {\n            word: this.state.word,\n            language: this.state.language,\n            collectionIndex: this.props.collectionIndex,\n            childNodeIndex: this.props.childNodeIndex\n          };\n          this.props.onNodeSubmit(e, data);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/AddEditNodeModal.jsx"],"names":["Component","Textbox","Button","RadioGroup","AddEditNodeModal","constructor","props","state","word","language","collection","collectionList","type","toUpperCase","substring","header","colour","labelType","customLabel","onNodeSubmit","bind","onFieldChange","event","target","name","value","setState","onLabelRadioClick","e","data","id","render","languageInput","options","i","length","push","selectCollection","collectionIndex","string","buttons","active","label","childNodeIndex"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\r\nimport {Textbox} from \"./Textbox\";\r\nimport {Button} from \"./Button\";\r\nimport {RadioGroup} from \"./RadioGroup\";\r\n\r\nexport class AddEditNodeModal extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tword: this.props.word || null,\r\n\t\t\tlanguage: (typeof this.props.language === \"object\") ? this.props.language[0] : this.props.language,\r\n\t\t\tcollection: (this.props.collectionList)\r\n\t\t\t\t? (`${this.props.collectionList[0].type[0].toUpperCase() + this.props.collectionList[0].type.substring(1)}: ${this.props.collectionList[0].header.word}`) : null,\r\n\t\t\tcolour: this.props.colour || null,\r\n\t\t\tlabelType: this.props.labelType || null,\r\n\t\t\tcustomLabel: this.props.customLabel || null\r\n\t\t};\r\n\r\n\t\tthis.onNodeSubmit = this.props.onNodeSubmit.bind(this);\r\n\t\tthis.onFieldChange = this.onFieldChange.bind(this);\r\n\t}\r\n\r\n\tonFieldChange(event)\r\n\t{\r\n\t\tconst target = event.target;\r\n\t\tconst name = target.name;\r\n\t\tlet value = target.value;\r\n\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t}\r\n\r\n\tonLabelRadioClick(e, data)\r\n\t{\r\n\t\t// Update parent LeftBar component's state\r\n\t\tlet labelType = (data.id === 0) ? \"language\" : \"country\";\r\n\r\n\t\t// Wipe label when they click on one of these buttons\r\n\t\tlet customLabel = this.state.customLabel;\r\n\t\tif(customLabel !== null)\r\n\t\t\tcustomLabel = null;\r\n\r\n\t\tthis.setState({labelType: labelType, customLabel: customLabel})\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\t// Languages is a textbox if none or one language is supplied, or a drop-down menu if some are supplied\r\n\t\tlet languageInput;\r\n\t\tif(typeof this.props.language === \"object\")\r\n\t\t{\r\n\t\t\tlet options = [];\r\n\t\t\tfor(let i = 0; i < this.props.language.length; ++i)\r\n\t\t\t{\r\n\t\t\t\toptions.push(<option key={i}>{this.props.language[i]}</option>);\r\n\t\t\t}\r\n\t\t\tlanguageInput = <select name={\"language\"} value={this.state.language} onChange={this.onFieldChange}>\r\n\t\t\t\t{options}\r\n\t\t\t</select>\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlanguageInput = <Textbox hint={\"e.g. \\\"English (GB)\\\"\"} name={\"language\"} value={this.state.language} onFieldChange={this.onFieldChange} />\r\n\t\t}\r\n\r\n\t\t// If no collectionIndex is supplied, allow them to select one from the list\r\n\t\tlet selectCollection;\r\n\t\tif(!this.props.collectionIndex)\r\n\t\t{\r\n\t\t\tlet options = [];\r\n\r\n\t\t\tlet i = 0;\r\n\t\t\tfor(i; i < this.props.collectionList.length; ++i)\r\n\t\t\t{\r\n\t\t\t\tlet collection = this.props.collectionList[i];\r\n\t\t\t\tlet string = `${collection.type[0].toUpperCase() + collection.type.substring(1)}: ${this.props.collectionList[i].header.word}`;\r\n\t\t\t\toptions.push(<option key={i}>{string}</option>);\r\n\t\t\t}\r\n\t\t\tselectCollection = [<h3 key={0}>Collection</h3>,\r\n\t\t\t\t<select key={1} name={\"collection\"} value={this.state.collection} onChange={this.onFieldChange}>\r\n\t\t\t\t{options}\r\n\t\t\t</select>]\r\n\t\t}\r\n\r\n\r\n\t\t// RadioGroup buttons\r\n\t\tconst buttons = [{active: true, label: \"Node language\"}, {active: false, label: \"Node country/region\"}];\r\n\r\n\t\treturn (\r\n\t\t\t<div className={\"modal\"}>\r\n\t\t\t\t<h3>Word</h3>\r\n\t\t\t\t<Textbox hint={\"e.g. \\\"Horse\\\"...\"} name={\"word\"} value={this.state.word} onFieldChange={this.onFieldChange}/>\r\n\t\t\t\t<h3>Language</h3>\r\n\t\t\t\t{languageInput}\r\n\t\t\t\t<h3>Node Colour</h3>\r\n\t\t\t\t<input type={\"color\"} defaultValue={this.state.colour} onChange={(e) => {\r\n\t\t\t\t\tthis.setState({colour: e.target.value});\r\n\t\t\t\t}}/>\r\n\t\t\t\t<h3>Label</h3>\r\n\t\t\t\t<div className={\"label-controls-container\"}>\r\n\t\t\t\t\t<RadioGroup buttons={buttons} onButtonClick={this.onLabelRadioClick} />\r\n\t\t\t\t\t<label for={\"custom-label\"}>Custom label: </label>\r\n\t\t\t\t\t<Textbox hint={\"Optional custom label (overrides language/country)\"} name={\"customLabel\"} value={this.state.customLabel} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t</div>\r\n\t\t\t\t{selectCollection}\r\n\t\t\t\t<Button value={\"Submit\"} id={\"add-node-modal-submit\"} onClick={(e) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet data = {word: this.state.word, language: this.state.language, collectionIndex: this.props.collectionIndex, childNodeIndex: this.props.childNodeIndex};\r\n\t\t\t\t\tthis.props.onNodeSubmit(e, data);\r\n\t\t\t\t}}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}