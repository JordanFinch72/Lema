{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\client\\\\src\\\\components\\\\modals\\\\ViewMapsModal.jsx\";\nimport { Component } from \"react\";\nimport { Textbox } from \"../controls/Textbox\";\nimport { Button } from \"../controls/Button\";\nimport { LabeledControl } from \"../controls/LabeledControl\";\nimport axios from \"axios\";\nimport { GenericModal } from \"./GenericModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MapItem extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: this.props.map.activeMap.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-container\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          value: \"LOAD\",\n          onClick: e => {\n            const userConfirmed = window.confirm(\"This will overwrite your currently active map.\\nYou may wish to save your map before you load another one.\\n\\nWould you like to continue?\");\n            if (userConfirmed) this.props.loadMap(e, this.props.map, \"database\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          value: \"X\",\n          onClick: e => {\n            const userConfirmed = window.confirm(\"This will permanently delete this map from the database (and the showcase)!\\n\\nWould you like to continue?\");\n            if (userConfirmed) this.props.deleteMap(e, this.props.map.activeMap.mapID);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport class ViewMapsModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loadedMaps: [],\n      loadedFileName: null,\n      loading: true\n    };\n    this.onFieldChange = this.onFieldChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadUserMaps(this.props.activeUser.username, this.props.activeUser.jwt);\n  }\n\n  loadUserMaps(username, jwt) {\n    console.debug(\"[== LOADING MAPS ==]\"); // Fetch maps belonging to this user\n\n    axios.get(`/maps/${username}/0/${jwt}`).then(response => {\n      const handleResponse = this.props.handleResponse(response, \"User's maps retrieved.\", null, false);\n      console.log(handleResponse);\n\n      if (handleResponse === true) {\n        this.setState({\n          loadedMaps: response.data.maps,\n          loading: false\n        });\n      } else if (handleResponse === \"Token refreshed.\" || handleResponse === undefined) {\n        this.loadUserMaps(this.props.activeUser.username, this.props.activeUser.jwt);\n      }\n    });\n  }\n\n  onFieldChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    let mapItems = [];\n    this.state.loadedMaps.forEach(m => mapItems.push( /*#__PURE__*/_jsxDEV(MapItem, {\n      activeUser: this.props.activeUser,\n      map: m,\n      openModal: this.props.openModal,\n      loadMap: this.props.loadMap,\n      deleteMap: this.props.deleteMap\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 54\n    }, this)));\n    if (this.state.loading) mapItems = \"Loading...\";else if (mapItems.length === 0) mapItems = \"No maps here! Try saving one to your profile! Alternatively, feel free to load one in from a file.\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left load\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"View / Import Map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-data\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section\",\n              children: mapItems\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Load From File\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"file\",\n                  id: \"mapJSON\",\n                  name: \"mapJSON\",\n                  accept: \"application/json\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 10\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  value: \"Import...\",\n                  onClick: e => {\n                    const files = document.getElementById(\"mapJSON\").files;\n\n                    if (files.length > 0) {\n                      const userConfirmed = window.confirm(\"This will overwrite your current map.\\nYou should save your map before you load another one.\\n\\nWould you like to continue?\");\n\n                      if (userConfirmed) {\n                        const fileReader = new window.FileReader();\n\n                        fileReader.onload = () => this.props.loadMap(e, JSON.parse(fileReader.result), \"file\");\n\n                        fileReader.readAsText(files[0]);\n                      }\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 10\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/client/src/components/modals/ViewMapsModal.jsx"],"names":["Component","Textbox","Button","LabeledControl","axios","GenericModal","MapItem","constructor","props","render","map","activeMap","title","e","userConfirmed","window","confirm","loadMap","deleteMap","mapID","ViewMapsModal","state","loadedMaps","loadedFileName","loading","onFieldChange","bind","componentDidMount","loadUserMaps","activeUser","username","jwt","console","debug","get","then","response","handleResponse","log","setState","data","maps","undefined","event","target","name","value","type","checked","mapItems","forEach","m","push","openModal","length","files","document","getElementById","fileReader","FileReader","onload","JSON","parse","result","readAsText"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\r\nimport {Textbox} from \"../controls/Textbox\";\r\nimport {Button} from \"../controls/Button\";\r\nimport {LabeledControl} from \"../controls/LabeledControl\";\r\nimport axios from \"axios\";\r\nimport {GenericModal} from \"./GenericModal\";\r\n\r\nclass MapItem extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\treturn(\r\n\t\t\t<div className={\"map-item\"}>\r\n\t\t\t\t{/* Flex-row */}\r\n\t\t\t\t<div className={\"title\"}>{this.props.map.activeMap.title}</div>\r\n\t\t\t\t<div className={\"buttons-container\"}>\r\n\t\t\t\t\t<Button value={\"LOAD\"} onClick={(e) => {\r\n\t\t\t\t\t\tconst userConfirmed = window.confirm(\"This will overwrite your currently active map.\\nYou may wish to save your map before you load another one.\\n\\nWould you like to continue?\");\r\n\r\n\t\t\t\t\t\tif(userConfirmed)\r\n\t\t\t\t\t\t\tthis.props.loadMap(e, this.props.map, \"database\");\r\n\t\t\t\t\t}} />\r\n\t\t\t\t\t<Button value={\"X\"} onClick={(e) => {\r\n\t\t\t\t\t\tconst userConfirmed = window.confirm(\"This will permanently delete this map from the database (and the showcase)!\\n\\nWould you like to continue?\");\r\n\r\n\t\t\t\t\t\tif(userConfirmed)\r\n\t\t\t\t\t\t\tthis.props.deleteMap(e, this.props.map.activeMap.mapID);\r\n\t\t\t\t\t}} />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport class ViewMapsModal extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tloadedMaps: [],\r\n\t\t\tloadedFileName: null,\r\n\t\t\tloading: true\r\n\t\t};\r\n\r\n\t\tthis.onFieldChange = this.onFieldChange.bind(this);\r\n\r\n\t}\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tthis.loadUserMaps(this.props.activeUser.username, this.props.activeUser.jwt);\r\n\t}\r\n\r\n\tloadUserMaps(username, jwt)\r\n\t{\r\n\t\tconsole.debug(\"[== LOADING MAPS ==]\");\r\n\r\n\t\t// Fetch maps belonging to this user\r\n\t\taxios.get(`/maps/${username}/0/${jwt}`).then((response) =>\r\n\t\t{\r\n\t\t\tconst handleResponse = this.props.handleResponse(response, \"User's maps retrieved.\", null, false);\r\n\t\t\tconsole.log(handleResponse);\r\n\t\t\tif(handleResponse === true)\r\n\t\t\t{\r\n\t\t\t\tthis.setState({loadedMaps: response.data.maps, loading: false})\r\n\t\t\t}\r\n\t\t\telse if(handleResponse === \"Token refreshed.\" || handleResponse === undefined)\r\n\t\t\t{\r\n\t\t\t\tthis.loadUserMaps(this.props.activeUser.username, this.props.activeUser.jwt);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tonFieldChange(event)\r\n\t{\r\n\t\tconst target = event.target;\r\n\t\tconst name = target.name;\r\n\t\tconst value = (target.type === \"checkbox\") ? target.checked : target.value;\r\n\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tlet mapItems = [];\r\n\t\tthis.state.loadedMaps.forEach((m) => mapItems.push(<MapItem activeUser={this.props.activeUser} map={m} openModal={this.props.openModal}\r\n\t\t                                                            loadMap={this.props.loadMap} deleteMap={this.props.deleteMap} />));\r\n\t\tif(this.state.loading)\r\n\t\t\tmapItems = \"Loading...\";\r\n\t\telse if(mapItems.length === 0)\r\n\t\t\tmapItems = \"No maps here! Try saving one to your profile! Alternatively, feel free to load one in from a file.\";\r\n\r\n\t\treturn (\r\n\t\t\t<div className={\"modal\"}>\r\n\t\t\t\t<div className={\"top\"}>\r\n\t\t\t\t\t<div className={\"left load\"}>\r\n\t\t\t\t\t\t<h2>View / Import Map</h2>\r\n\t\t\t\t\t\t<div className={\"map-data\"}>\r\n\t\t\t\t\t\t\t<div className={\"section\"}>\r\n\t\t\t\t\t\t\t\t{mapItems}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className={\"section\"}>\r\n\t\t\t\t\t\t\t\t<h4>Load From File</h4>\r\n\t\t\t\t\t\t\t\t<div className={\"form\"}>\r\n\t\t\t\t\t\t\t\t\t<input type={\"file\"} id={\"mapJSON\"} name={\"mapJSON\"} accept={\"application/json\"} />\r\n\t\t\t\t\t\t\t\t\t<Button value={\"Import...\"} onClick={(e) =>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tconst files = document.getElementById(\"mapJSON\").files;\r\n\t\t\t\t\t\t\t\t\t\tif(files.length > 0)\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tconst userConfirmed = window.confirm(\"This will overwrite your current map.\\nYou should save your map before you load another one.\\n\\nWould you like to continue?\");\r\n\t\t\t\t\t\t\t\t\t\t\tif(userConfirmed)\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst fileReader = new window.FileReader();\r\n\t\t\t\t\t\t\t\t\t\t\t\tfileReader.onload = () => this.props.loadMap(e, JSON.parse(fileReader.result), \"file\");\r\n\t\t\t\t\t\t\t\t\t\t\t\tfileReader.readAsText(files[0]);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"bottom\"}>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}