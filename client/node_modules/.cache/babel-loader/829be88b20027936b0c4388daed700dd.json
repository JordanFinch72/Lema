{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Collections.jsx\";\nimport { Component } from \"react\";\nimport { Journey } from \"./Journey\";\nimport { Cognate } from \"./Cognate\";\nimport { Button } from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Collections extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [{\n        // TODO: Dummy data\n        type: \"journey\",\n        header: {\n          word: \"horse\",\n          language: \"English (UK)\"\n        },\n        childNodes: [{\n          word: \"kers\",\n          language: \"Proto-Indo-European\"\n        }, {\n          word: \"krsos\",\n          language: \"Proto-Indo-European\"\n        }, {\n          word: \"hrussa\",\n          language: \"Proto-Germanic\"\n        }, {\n          word: \"hross\",\n          language: \"Proto-West-Germanic\"\n        }, {\n          word: \"horse\",\n          language: \"English\"\n        }]\n      }],\n      hello: \"hi\"\n    };\n    this.onNodeColourClick = this.onNodeColourClick.bind(this);\n  }\n  /**\r\n   * Open a modal that allows user to change the colour of the node on the map\r\n   */\n\n\n  onNodeColourClick(e, node) {\n    // TODO: Open modal, allow user choice\n    let newValue = \"red\"; // Find node and set colour\n\n    let newItems = this.state.items;\n\n    for (let i = 0; i < newItems.length; ++i) {\n      for (let j = 0; j < newItems[i].childNodes.length; ++j) {\n        let childNode = newItems[i].childNodes[j];\n\n        if (childNode === node) {\n          newItems[i].childNodes[j].colour = newValue;\n        }\n      }\n    }\n\n    this.setState({\n      items: newItems\n    });\n  }\n\n  onAddCollectionClick(e, data) {\n    this.setState(prevState => {\n      items: [prevState.items];\n    });\n  }\n\n  render() {\n    // TODO: Consider whether both cognates AND journeys may be displayed at the same time\n    let itemElements = this.state.items.map((item, index) => {\n      if (item.type === \"cognate\") {\n        return /*#__PURE__*/_jsxDEV(Cognate, {\n          header: item.header,\n          childNodes: item.childNodes\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 12\n        }, this);\n      } else if (item.type === \"journey\") {\n        return /*#__PURE__*/_jsxDEV(Journey, {\n          header: item.header,\n          childNodes: item.childNodes,\n          onNodeColourClick: this.onNodeColourClick\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 12\n        }, this);\n      }\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"collections-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Journeys\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          value: \"+\",\n          id: \"manual-add\",\n          style: {\n            alignSelf: \"end\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }, this), itemElements]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Collections.jsx"],"names":["Component","Journey","Cognate","Button","Collections","constructor","props","state","items","type","header","word","language","childNodes","hello","onNodeColourClick","bind","e","node","newValue","newItems","i","length","j","childNode","colour","setState","onAddCollectionClick","data","prevState","render","itemElements","map","item","index","alignSelf"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\r\nimport {Journey} from \"./Journey\";\r\nimport {Cognate} from \"./Cognate\";\r\nimport {Button} from \"./Button\";\r\n\r\nexport class Collections extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\titems: [\r\n\t\t\t\t{\r\n\t\t\t\t\t// TODO: Dummy data\r\n\t\t\t\t\ttype: \"journey\",\r\n\t\t\t\t\theader: {word: \"horse\", language: \"English (UK)\"},\r\n\t\t\t\t\tchildNodes: [{word: \"kers\", language: \"Proto-Indo-European\"}, {word: \"krsos\", language: \"Proto-Indo-European\"},\r\n\t\t\t\t\t\t{word: \"hrussa\", language: \"Proto-Germanic\"}, {word: \"hross\", language: \"Proto-West-Germanic\"}, {word: \"horse\", language: \"English\"}]\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\thello: \"hi\"\r\n\t\t};\r\n\r\n\t\tthis.onNodeColourClick = this.onNodeColourClick.bind(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Open a modal that allows user to change the colour of the node on the map\r\n\t */\r\n\tonNodeColourClick(e, node)\r\n\t{\r\n\t\t// TODO: Open modal, allow user choice\r\n\t\tlet newValue = \"red\";\r\n\r\n\t\t// Find node and set colour\r\n\t\tlet newItems = this.state.items;\r\n\t\tfor(let i = 0; i < newItems.length; ++i)\r\n\t\t{\r\n\t\t\tfor(let j = 0; j < newItems[i].childNodes.length; ++j)\r\n\t\t\t{\r\n\t\t\t\tlet childNode = newItems[i].childNodes[j];\r\n\t\t\t\tif(childNode === node)\r\n\t\t\t\t{\r\n\t\t\t\t\tnewItems[i].childNodes[j].colour = newValue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.setState({items: newItems});\r\n\t}\r\n\r\n\tonAddCollectionClick(e, data)\r\n\t{\r\n\t\tthis.setState((prevState) => {\r\n\t\t\titems: [\r\n\t\t\t\tprevState.items,\r\n\r\n\t\t\t]\r\n\t\t})\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\t// TODO: Consider whether both cognates AND journeys may be displayed at the same time\r\n\t\tlet itemElements = this.state.items.map((item, index) => {\r\n\t\t\tif(item.type === \"cognate\")\r\n\t\t\t{\r\n\t\t\t\treturn <Cognate header={item.header} childNodes={item.childNodes} key={index} />;\r\n\t\t\t}\r\n\t\t\telse if(item.type === \"journey\")\r\n\t\t\t{\r\n\t\t\t\treturn <Journey header={item.header} childNodes={item.childNodes} key={index} onNodeColourClick={this.onNodeColourClick} />;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn(\r\n\t\t\t<div className={\"collections-container\"}>\r\n\t\t\t\t<div className={\"header-container\"}>\r\n\t\t\t\t\t<h2>Journeys</h2>\r\n\t\t\t\t\t<Button value={\"+\"} id={\"manual-add\"} style={{alignSelf: \"end\"}} />\r\n\t\t\t\t</div>\r\n\t\t\t\t{itemElements}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}