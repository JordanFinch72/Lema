{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { AddEditNodeModal } from \"./modals/AddEditNodeModal\";\nimport { ContextMenu } from \"./controls/ContextMenu\";\nimport countriesData from \"../data/countries/countries.json\";\nimport languageProperties from \"../data/languageProperties.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Map(props) {\n  _s();\n\n  console.log(\"[== MAP RENDER ==]\"); // Prop functions\n\n  const openContextMenu = props.openContextMenu.bind(this);\n  const addNode = props.addNode.bind(this);\n  const editNode = props.editNode.bind(this);\n  const removeNode = props.removeNode.bind(this);\n  const openModal = props.openModal.bind(this); // Props\n\n  const collections = props.collections; // Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\n\n  useEffect(() => {\n    let svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\n    let countries = countriesData.features; // Create path (passed as svg attribute later to draw the countries)\n    // TODO: Have it auto-scale as window is dragged\n\n    const width = svg._groups[0][0].clientWidth;\n    const height = svg._groups[0][0].clientHeight;\n    const projection = d3.geoConicConformal().center([8, 52.823]) // Middle of Europe(ish)\n    .scale(1650).translate([width / 2, height / 2]);\n    const path = d3.geoPath().projection(projection);\n    const coordGroup = svg.append(\"g\").classed(\"coords\", true); // Draw countries, bind data and handlers\n\n    let countryPaths = svg.append(\"g\").selectAll(\"path\") // svg->g->path\n    .data(countries) // svg->g->path\n    .enter() // svg->g->path (create new nodes per data)\n    .append(\"path\") // svg->g->path (create new nodes per data)\n    .attr(\"fill\", d => determineFillColour(d)).attr(\"stroke\", d => determineStrokeColour(d)).attr(\"stroke-linejoin\", \"round\").attr(\"d\", path).on(\"click\", function (e, d) {// TODO: Possibly same functions as context menu (see about calling this.onContextMenu() to keep things nice and DRY)\n    }).on(\"mousemove\", function (e, d) {\n      const x = e.clientX,\n            y = e.clientY;\n      coordGroup.selectAll(\"text\").remove();\n      coordGroup.append(\"text\").text(`(${x},${y})`).attr(\"fill\", \"white\");\n    }).on(\"contextmenu\", function (e, d) {\n      e.preventDefault(); // Prevent browser context menu from opening\n\n      const nodeObject = findNodes(d, \"cognate\");\n      let contextMenuItems = []; // If clicked-on country has attached cognate\n\n      if (nodeObject) {\n        contextMenuItems = [{\n          text: \"Edit node (cognate)\",\n          handler: e => {\n            let collectionList = collections.filter((collection, i) => {\n              if (collection.type === \"cognate\") {\n                collection.collectionIndex = i;\n                return true;\n              }\n            });\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: editNode,\n              node: nodeObject.node,\n              collectionList: collectionList,\n              collectionIndex: nodeObject.collectionIndex,\n              type: \"cognate\",\n              language: nodeObject.node.language\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Remove node (cognate)\",\n          handler: e => {\n            removeNode(e, nodeObject.collectionIndex, nodeObject.arrayIndex);\n          }\n        }];\n      } else {\n        // TODO: Context menu for adding to new collection, adding to existing collection\n        contextMenuItems = [{\n          text: \"Add country to collection (cognate)\",\n          handler: e => {\n            let collectionList = collections.filter((collection, i) => {\n              if (collection.type === \"cognate\") {\n                collection.collectionIndex = i;\n                return true;\n              }\n            });\n\n            if (collectionList.length <= 0) {\n              alert(\"You must first create a cognate collection for the node to be added to.\");\n            } else {\n              let node = {\n                word: \"\",\n                language: \"\",\n                parents: []\n              };\n              node.fillColour = \"#FF0000\";\n              node.strokeColour = \"#000000\";\n              node.label = {\n                type: \"word\",\n                customText: \"\",\n                fontColour: \"#000000\",\n                fontSize: null,\n                x: null,\n                y: null\n              };\n              openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n                isNewWord: true,\n                onNodeSubmit: addNode,\n                node: node,\n                type: \"cognate\",\n                collectionList: collectionList,\n                collectionIndex: collectionList[0].collectionIndex,\n                language: d.properties.languages\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 23\n              }, this));\n            }\n          }\n        }];\n      } // Common to both\n\n\n      contextMenuItems.unshift({\n        text: \"Add new node (journey)\",\n        handler: e => {\n          let collectionList = collections.filter((collection, i) => {\n            if (collection.type === \"journey\") {\n              collection.collectionIndex = i;\n              return true;\n            }\n          });\n\n          if (collectionList.length <= 0) {\n            alert(\"You must first create a journey collection for the node to be added to.\");\n          } else {\n            // Open the AddEditNodeModal with initial node data\n            let node = {\n              word: \"\",\n              language: d.properties.languages[0],\n              parents: []\n            };\n            node.vertex = {\n              type: \"word\",\n              customText: \"\",\n              fontColour: \"#000000\",\n              strokeColour: \"#000000\",\n              fillColour: \"#FFFFFF\",\n              radius: null,\n              fontSize: null,\n              x: null,\n              y: null,\n              edgeStart: \"centre\",\n              edgeEnd: \"centre\",\n              edgeStrokeColour: \"#000000\",\n              edgeStrokeWidth: \"2px\",\n              edgeArrowheadEnabled: true,\n              edgeArrowheadStrokeColour: \"#000000\",\n              edgeArrowheadFillColour: \"#000000\"\n            };\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              isNewWord: true,\n              node: node,\n              type: \"journey\",\n              onNodeSubmit: addNode,\n              collectionList: collectionList,\n              collectionIndex: collectionList[0].collectionIndex,\n              language: d.properties.languages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 22\n            }, this));\n          }\n        }\n      });\n      openContextMenu(e, /*#__PURE__*/_jsxDEV(ContextMenu, {\n        x: e.clientX,\n        y: e.clientY,\n        items: contextMenuItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 24\n      }, this));\n    }).on(\"mouseover\", function (e, d) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"white\") // White can't become transparent\n        element.attr(\"fill\", \"rgb(230,230,230)\");else element.attr(\"fill-opacity\", \"0.65\");\n    }).on(\"mouseout\", function (e, d) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\n        element.attr(\"fill\", \"white\");else element.attr(\"fill-opacity\", \"1\");\n    }); // Cognate labels, journey vertices\n\n    const vertexEdgesG = svg.append(\"g\").classed(\"vertex-edges\", true); // SVG group for edges\n\n    const verticesLabelsG = svg.append(\"g\").classed(\"vertices-labels\", true); // SVG group for vertices AND cognate labels\n\n    countryPaths.each(function (f, i) {\n      let cognateNodeObject = findNodes(f, \"cognate\"); // The first node in any cognate collection that belongs to this country/region\n\n      let journeyNodeObjects = findNodes(f, \"journey\"); // All nodes across all journey collections belonging to this country/region\n\n      if (cognateNodeObject) {\n        /* Cognate visualisations */\n        let node = cognateNodeObject.node;\n        let boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\n\n        let fontSize = node.label.fontSize; // Font size of the label\n\n        let labelText = node.word; // Word by default\n\n        if (node.label.type === \"Country/region\") labelText = f.properties.name_long;else if (node.label.type === \"Custom text\") labelText = node.label.customText;else if (node.label.type === \"Language\") labelText = node.language; // TODO: Initial scale factor depending on size of country (to stop oversized text from escaping country)\n\n        if (labelText.length !== 0 && !node.label.fontSize) // Only scale if font size hasn't been set by user\n          {\n            if (boundingBox.width < labelText.length * 16) fontSize = boundingBox.width / 8 + \"px\";\n          } // Append labels to paths, with co-ordinates according to feature's position on map\n\n\n        let x = node.label.x === null ? boundingBox.x + boundingBox.width / 4 : node.label.x;\n        let y = node.label.y === null ? boundingBox.y + boundingBox.height / 2 : node.label.y;\n        let label = verticesLabelsG.append(\"text\").attr(\"x\", x).attr(\"y\", y).attr(\"fill\", node.label.fontColour).style(\"font-size\", fontSize).text(labelText); // Dragging/resizing handlers\n\n        let startXOffset,\n            startYOffset,\n            resizing = false,\n            startX,\n            startY,\n            startSize,\n            newSize;\n        label.on(\"mousemove\", e => {\n          let labelX = parseFloat(label.attr(\"x\")),\n              labelY = parseFloat(label.attr(\"y\"));\n          let mouseX = e.layerX,\n              mouseY = e.layerY; // Determine corner of text's box\n\n          const southEastCorner = {\n            xStart: labelX + label.node().getBBox().width - 5,\n            xEnd: labelX + label.node().getBBox().width + 15,\n            yStart: labelY,\n            yEnd: labelY + 10\n          }; // Check corner\n\n          if (mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd && mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd) {\n            label.style(\"cursor\", \"se-resize\");\n          } else label.style(\"cursor\", \"grab\");\n        }).call(d3.drag().on(\"start\", e => {\n          let labelX = parseFloat(label.attr(\"x\")),\n              labelY = parseFloat(label.attr(\"y\"));\n          let mouseX = e.x,\n              mouseY = e.y;\n          startXOffset = mouseX - labelX;\n          startYOffset = mouseY - labelY; // Determine corner of text's box\n\n          const southEastCorner = {\n            xStart: labelX + label.node().getBBox().width - 5,\n            xEnd: labelX + label.node().getBBox().width + 15,\n            yStart: labelY,\n            yEnd: labelY + 10\n          }; // Check corner\n\n          if (mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd && mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd) {\n            resizing = true;\n            startX = mouseX;\n            startY = mouseY;\n            startSize = parseFloat(label.style(\"font-size\"));\n          }\n        }).on(\"drag\", e => {\n          let mouseX = e.x,\n              mouseY = e.y;\n\n          if (resizing) {\n            // Resize the label\n            if (mouseX >= startX && mouseY >= startY || mouseX <= startX && mouseY <= startY) {\n              let deltaX = mouseX - startX;\n              newSize = startSize + deltaX / 10;\n              if (newSize < 5) newSize = 5; // Floor of 5px to prevent it shrinking into nothingness\n\n              label.style(\"font-size\", newSize + \"px\"); // Only visually, not updating state itself\n            }\n          } else {\n            // Move the label\n            x = mouseX - startXOffset;\n            y = mouseY - startYOffset;\n            newSize = node.label.fontSize;\n            label.attr(\"x\", x).attr(\"y\", y); // Only visually\n          }\n        }).on(\"end\", () => {\n          resizing = false;\n          node.label.x = x;\n          node.label.y = y;\n          node.label.fontSize = newSize;\n          editNode(null, cognateNodeObject.collectionIndex, node);\n        }));\n      }\n\n      if (journeyNodeObjects) {\n        /* Journey visualisations */\n        // Loop through all journey nodes inside this country/region\n        let xOffset = 0,\n            yOffset = 0,\n            prevDiameter = 0;\n        let startEdgeXOffset = 0,\n            startEdgeYOffset = 0,\n            endEdgeXOffset = 0,\n            endEdgeYOffset = 0; // Centre by default\n\n        for (let i = 0; i < journeyNodeObjects.length; ++i) {\n          let journeyNodeObject = journeyNodeObjects[i];\n          let node = journeyNodeObject.node;\n          let languageProp = getLanguageProp(node);\n          let boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\n\n          let radius = node.vertex.radius || 50; // Inherit radius (determined later if null)\n\n          let fontSize = node.vertex.fontSize;\n          let vertexText = node.word; // Word by default\n\n          if (node.vertex.type === \"Country region\") vertexText = f.properties.name_long;else if (node.vertex.type === \"Custom text\") vertexText = node.vertex.customText;else if (node.vertex.type === \"Language\") vertexText = node.language;\n          console.group(\"Node\");\n          console.log(node.language);\n          console.log(languageProp);\n          console.log(node.vertex);\n          console.groupEnd(); // Initial co-ordinates\n          // TODO: Vertex xOffset, yOffset attributes in country/region data\n\n          let vertexX = node.vertex.x === null ? languageProp.x + 612 : node.vertex.x;\n          let vertexY = node.vertex.y === null ? languageProp.y + 528 : node.vertex.y; // Set initial vertex position // TODO: Do it for label, too\n\n          if (!node.vertex.x || !node.vertex.y) {\n            node.vertex.x = vertexX;\n            node.vertex.y = vertexY; //return editNode(null, journeyNodeObject.collectionIndex, node);\n          } // Prepare text element. This is required to calculate circle radius based on text element's width\n\n\n          let vertexG = verticesLabelsG.append(\"g\"); // Group required to have circle and text together\n\n          let preparedText = vertexG.append(\"text\").attr(\"x\", vertexX).attr(\"y\", vertexY).attr(\"fill\", node.vertex.fontColour).attr(\"text-anchor\", \"middle\") // Centre of circle\n          .attr(\"alignment-baseline\", \"middle\") // Centre of circle\n          .style(\"font-size\", \"16px\").text(vertexText); // Determine initial radius of circle\n          // TODO: Initial scale factor depending on size of country (to stop oversized text from escaping country)\n\n          let innerTextWidth = preparedText.node().getBBox().width;\n\n          if (vertexText.length !== 0 && !node.vertex.radius) // Only scale if font size hasn't been set by user\n            {\n              radius = boundingBox.width / 8;\n              if (radius < innerTextWidth) radius = innerTextWidth / 2 + 5; // Convert text \"diameter\" to radius, add padding\n            }\n\n          preparedText.remove(); // Remove prepared text element. It will not show if appended before the circle\n          // Place edge between this node and its parents\n\n          let markerSelectString = \"\"; // String to select markers so they can move whilst being resized\n\n          if (node.parents) {\n            // Create edge for each parent, originating from this node\n            for (let i = 0; i < node.parents.length; ++i) {\n              let parentNode = node.parents[i]; // Fingerprint references for marker IDs and data-start/data-end attributes\n\n              const parentRef = journeyNodeObject.collectionIndex + \"|\" + parentNode.arrayIndex;\n              const nodeRef = journeyNodeObject.collectionIndex + \"|\" + node.arrayIndex; // Compute arrowheads\n\n              if (node.vertex.edgeArrowheadEnabled) {\n                vertexEdgesG.append(\"defs\").append(\"marker\").attr(\"id\", \"arrow\" + parentRef + nodeRef).attr(\"markerWidth\", 5).attr(\"markerHeight\", 4).attr(\"refX\", radius / 2 + 5).attr(\"refY\", 2).attr(\"orient\", \"auto\").append(\"polygon\").attr(\"points\", \"0 0, 5 2, 0 4\").attr(\"fill\", node.vertex.edgeArrowheadFillColour).attr(\"stroke\", node.vertex.edgeArrowheadStrokeColour).attr(\"id\", nodeRef);\n                markerSelectString += \"marker[id=\\\"arrow\" + parentRef + nodeRef + \"\\\"], \";\n              } // Determine edge start position\n\n\n              if (node.vertex.edgeStart === \"top\") startEdgeYOffset = -radius;else if (node.vertex.edgeStart === \"right\") startEdgeXOffset = radius;else if (node.vertex.edgeStart === \"bottom\") startEdgeYOffset = radius;else if (node.vertex.edgeStart === \"left\") startEdgeXOffset = -radius;else if (node.vertex.edgeStart === \"centre\") {\n                startEdgeXOffset = 0;\n                startEdgeYOffset = 0;\n              } // Determine edge end position\n\n              if (node.vertex.edgeEnd === \"top\") endEdgeYOffset = -radius;else if (node.vertex.edgeEnd === \"right\") endEdgeXOffset = radius;else if (node.vertex.edgeEnd === \"bottom\") endEdgeYOffset = radius;else if (node.vertex.edgeEnd === \"left\") endEdgeXOffset = -radius;else if (node.vertex.edgeStart === \"centre\") {\n                endEdgeXOffset = 0;\n                endEdgeYOffset = 0;\n              } // Place edge\n\n              const edge = vertexEdgesG.append(\"line\").attr(\"x1\", parentNode.vertex.x + startEdgeXOffset).attr(\"y1\", parentNode.vertex.y + startEdgeYOffset).attr(\"x2\", node.vertex.x + endEdgeXOffset).attr(\"y2\", node.vertex.y + endEdgeYOffset).attr(\"stroke\", node.vertex.edgeStrokeColour).attr(\"stroke-width\", node.vertex.edgeStrokeWidth).attr(\"data-start\", parentRef) // For finding attached edges later\n              .attr(\"data-end\", nodeRef);\n              if (node.vertex.edgeArrowheadEnabled) edge.attr(\"marker-end\", \"url(#arrow\" + parentRef + nodeRef + \")\");\n            }\n          }\n\n          let vertex = vertexG.append(\"circle\").attr(\"cx\", vertexX).attr(\"cy\", vertexY).attr(\"r\", radius + \"px\").attr(\"stroke\", node.vertex.strokeColour).attr(\"fill\", node.vertex.fillColour);\n          let text = vertexG.append(\"text\").attr(\"x\", vertexX).attr(\"y\", vertexY).attr(\"fill\", node.vertex.fontColour).attr(\"text-anchor\", \"middle\") // Centre of circle\n          .attr(\"alignment-baseline\", \"middle\") // Centre of circle\n          .style(\"font-size\", fontSize).text(vertexText);\n          prevDiameter = radius * 2; // Dragging/resizing/clicking handlers\n\n          let startXOffset,\n              startYOffset,\n              resizing = false,\n              startX,\n              startY,\n              startRadius,\n              newVertexRadius,\n              newLabelSize;\n          let on = text.on(\"contextmenu\", e => {\n            e.preventDefault();\n            let contextMenuItems = [{\n              text: \"Edit node (cognate)\",\n              handler: e => {\n                let collectionList = collections.filter((collection, i) => {\n                  if (collection.type === \"journey\") {\n                    collection.collectionIndex = i;\n                    return true;\n                  }\n                });\n                openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n                  onNodeSubmit: editNode,\n                  node: node,\n                  collectionList: collectionList,\n                  collectionIndex: journeyNodeObject.collectionIndex,\n                  type: \"cognate\",\n                  language: node.language\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 23\n                }, this));\n              }\n            }, {\n              text: \"Remove node (cognate)\",\n              handler: e => {\n                removeNode(e, journeyNodeObject.collectionIndex, node.arrayIndex);\n              }\n            }];\n            openContextMenu(e, /*#__PURE__*/_jsxDEV(ContextMenu, {\n              x: e.clientX,\n              y: e.clientY,\n              items: contextMenuItems\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 26\n            }, this));\n          });\n          vertex.on(\"mousemove\", e => {\n            let vertexX = parseFloat(vertex.attr(\"cx\")),\n                vertexY = parseFloat(vertex.attr(\"cy\"));\n            let mouseX = e.layerX,\n                mouseY = e.layerY; // Dimensions of bottom-right corner\n\n            let squareArea = vertex.node().getBBox().width * vertex.node().getBBox().height;\n            let circleArea = Math.PI * Math.pow(parseFloat(vertex.attr(\"r\")), 2);\n            let cornerWidth = (squareArea - circleArea) / 4 / 2; // Extract corners, divide by four, width and height are equal length (/2)\n            // Determine corner of circle's box\n\n            const southEastCorner = {\n              xStart: vertexX,\n              xEnd: vertexX + cornerWidth,\n              yStart: vertexY,\n              yEnd: vertexY + cornerWidth\n            }; // Check corner\n\n            if (mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd && mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd) {\n              vertex.style(\"cursor\", \"se-resize\");\n            } else vertex.style(\"cursor\", \"grab\");\n          }).on(\"contextmenu\", e => {\n            e.preventDefault();\n            let contextMenuItems = [{\n              text: \"Edit node (cognate)\",\n              handler: e => {\n                let collectionList = collections.filter((collection, i) => {\n                  if (collection.type === \"journey\") {\n                    collection.collectionIndex = i;\n                    return true;\n                  }\n                });\n                openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n                  onNodeSubmit: editNode,\n                  node: node,\n                  collectionList: collectionList,\n                  collectionIndex: journeyNodeObject.collectionIndex,\n                  type: \"cognate\",\n                  language: node.language\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 478,\n                  columnNumber: 23\n                }, this));\n              }\n            }, {\n              text: \"Remove node (cognate)\",\n              handler: e => {\n                removeNode(e, journeyNodeObject.collectionIndex, node.arrayIndex);\n              }\n            }];\n            openContextMenu(e, /*#__PURE__*/_jsxDEV(ContextMenu, {\n              x: e.clientX,\n              y: e.clientY,\n              items: contextMenuItems\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 26\n            }, this));\n          }).call(d3.drag().on(\"start\", e => {\n            let vertexX = parseFloat(vertex.attr(\"cx\")),\n                vertexY = parseFloat(vertex.attr(\"cy\"));\n            let mouseX = e.x,\n                mouseY = e.y;\n            startX = vertexX;\n            startY = vertexY;\n            startXOffset = mouseX - vertexX;\n            startYOffset = mouseY - vertexY; // Dimensions of bottom-right corner\n\n            let squareArea = vertex.node().getBBox().width * vertex.node().getBBox().height;\n            let circleArea = Math.PI * Math.pow(parseFloat(vertex.attr(\"r\")), 2);\n            let cornerWidth = (squareArea - circleArea) / 4 / 2; // Extract corners, divide by four, width and height are equal length (/2)\n            // Determine corner of circle's box\n\n            const southEastCorner = {\n              xStart: vertexX,\n              xEnd: vertexX + cornerWidth,\n              yStart: vertexY,\n              yEnd: vertexY + cornerWidth\n            }; // Check corner\n\n            if (mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd && mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd) {\n              resizing = true;\n              startX = mouseX;\n              startY = mouseY;\n              startRadius = parseFloat(vertex.attr(\"r\"));\n            }\n          }).on(\"drag\", e => {\n            let mouseX = e.x,\n                mouseY = e.y;\n\n            if (resizing) {\n              if (mouseX >= startX && mouseY >= startY || mouseX <= startX && mouseY <= startY) {\n                // Resize the vertex\n                let deltaX = mouseX - startX;\n                newVertexRadius = startRadius + deltaX / 10;\n                if (newVertexRadius < 10) newVertexRadius = 10; // Floor of 10px to prevent it shrinking into nothingness\n\n                vertex.attr(\"r\", newVertexRadius + \"px\"); // Only visually, not updating state itself\n                // Resize the vertex's text\n\n                const paddingOffset = 10;\n                newLabelSize = (newVertexRadius * 2 - paddingOffset) / innerTextWidth * 100 + \"%\";\n                text.style(\"font-size\", newLabelSize); // Move arrowheads as it is resized\n\n                if (markerSelectString) {\n                  let selectString = markerSelectString.slice(0, markerSelectString.length - 2); // Trim \", \" at the end of string\n\n                  d3.selectAll(selectString).attr(\"refX\", newVertexRadius / 2 + 5);\n                }\n              }\n            } else {\n              // Move the vertex\n              vertexX = mouseX - startXOffset;\n              vertexY = mouseY - startYOffset;\n              vertex.attr(\"cx\", vertexX).attr(\"cy\", vertexY); // Only visually\n\n              text.attr(\"x\", vertexX).attr(\"y\", vertexY); // Only visually\n              // Move the edges\n\n              let dataEnd = journeyNodeObject.collectionIndex + \"|\" + journeyNodeObject.node.arrayIndex;\n              let attachedEdges = d3.selectAll(\"line[data-start=\\\"\" + dataEnd + \"\\\"]\"); // Find all edges that start on this node\n\n              let attachedEdges2 = d3.selectAll(\"line[data-end=\\\"\" + dataEnd + \"\\\"]\"); // Find all edges that end on this node\n\n              if (attachedEdges) {\n                attachedEdges.attr(\"x1\", vertexX + startEdgeXOffset).attr(\"y1\", vertexY + startEdgeYOffset);\n              }\n\n              if (attachedEdges2) {\n                attachedEdges2.attr(\"x2\", vertexX + startEdgeXOffset).attr(\"y2\", vertexY + startEdgeYOffset);\n              }\n            }\n          }).on(\"end\", () => {\n            resizing = false;\n            node.vertex.x = vertexX;\n            node.vertex.y = vertexY;\n            node.vertex.radius = newVertexRadius || node.vertex.radius;\n            node.vertex.fontSize = newLabelSize || node.vertex.fontSize;\n            editNode(null, journeyNodeObject.collectionIndex, node);\n          }));\n        }\n      }\n    }); // Graticules (lines on the map)\n\n    const g = svg.append(\"g\");\n    const graticules = g.classed(\"graticules\", true).append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(0,0,0,.2)\").attr(\"d\", path(d3.geoGraticule()()));\n    /*\r\n    svg.call(d3.zoom().on(\"zoom\", function () {\r\n    \tz = d3.event.transform.k;\r\n    \tdraw(); // TODO: Contain above render code into draw() function\r\n    }));\r\n     */\n    // Clean-up function (kills all SVG elements upon unmounting)\n\n    return function cleanup() {\n      svg.selectAll(\"g\").remove();\n    };\n  });\n\n  function getLanguageProp(node) {\n    for (let l in languageProperties) {\n      const languageProp = languageProperties[l];\n      if (languageProp.language === node.language) return languageProp;\n    }\n  }\n  /**\r\n   * Finds all nodes in all collections of specified type where the node's language is within the feature's language array\r\n   * @param {*} d The dataset feature (country/region) currently being rendered\r\n   * @param {string} type The type of collection to search for (\"journey\" or \"cognate\")\r\n   */\n\n\n  function findNodes(d, type) {\n    // Search collections\n    if (type === \"cognate\") {\n      for (let c = 0; c < collections.length; ++c) {\n        let collection = collections[c];\n\n        if (collection.type === \"cognate\") {\n          for (let n = 0; n < collection.words.length; ++n) {\n            let childNode = collection.words[n];\n\n            if (d.properties.languages.includes(childNode.language)) {\n              return {\n                node: childNode,\n                collectionIndex: c,\n                arrayIndex: n\n              }; // TODO: Currently only returns first cognate\n            }\n          }\n        }\n      }\n    } else if (type === \"journey\") {\n      let countryNodes = [];\n\n      for (let c = 0; c < collections.length; ++c) // Search for all nodes in all collections for this country/region\n      {\n        let collection = collections[c];\n\n        if (collection.type === \"journey\") {\n          for (let n = 0; n < collection.words.length; ++n) {\n            let childNode = collection.words[n];\n            if (d.properties.languages.includes(childNode.language)) countryNodes.push({\n              node: childNode,\n              collectionIndex: c\n            });\n          }\n        }\n      }\n\n      return countryNodes;\n    }\n  }\n  /**\r\n   * Determines country SVG fill colour according to countries' language(s) and the specified colour of that language's cognate node(s).\r\n   * @param d Data attached to DOM element via D3 (i.e. the country).\r\n   * @returns {string} The fill colour, as specified by user in Collection.jsx.\r\n   */\n\n\n  function determineFillColour(d) {\n    const nodeObject = findNodes(d, \"cognate\"); // Find node in collections\n\n    if (nodeObject) return nodeObject.node.fillColour; // Country has associated collection node? Return the colour\n    else return \"white\"; // Otherwise, return white by default for all countries with no associated data\n  }\n  /**\r\n   * Determines country SVG stroke colour according to countries' language(s) and the specified colour of that language's cognate node(s).\r\n   * @param d Data attached to DOM element via D3 (i.e. the country).\r\n   * @returns {string} The fill colour, as specified by user in Collection.jsx.\r\n   */\n\n\n  function determineStrokeColour(d) {\n    const nodeObject = findNodes(d, \"cognate\"); // Find node in collections\n\n    if (nodeObject) return nodeObject.node.strokeColour; // Country has associated collection node? Return the colour\n    else return \"black\"; // Otherwise, return black by default for all countries with no associated data\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      /*ref={ref}*/\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        margin: 0,\n        backgroundColor: \"#3d73ab\"\n        /* The sea */\n\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 689,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Map, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Map.jsx"],"names":["React","useEffect","useState","d3","AddEditNodeModal","ContextMenu","countriesData","languageProperties","Map","props","console","log","openContextMenu","bind","addNode","editNode","removeNode","openModal","collections","svg","selectAll","countries","features","width","_groups","clientWidth","height","clientHeight","projection","geoConicConformal","center","scale","translate","path","geoPath","coordGroup","append","classed","countryPaths","data","enter","attr","d","determineFillColour","determineStrokeColour","on","e","x","clientX","y","clientY","remove","text","preventDefault","nodeObject","findNodes","contextMenuItems","handler","collectionList","filter","collection","i","type","collectionIndex","node","language","arrayIndex","length","alert","word","parents","fillColour","strokeColour","label","customText","fontColour","fontSize","properties","languages","unshift","vertex","radius","edgeStart","edgeEnd","edgeStrokeColour","edgeStrokeWidth","edgeArrowheadEnabled","edgeArrowheadStrokeColour","edgeArrowheadFillColour","element","select","vertexEdgesG","verticesLabelsG","each","f","cognateNodeObject","journeyNodeObjects","boundingBox","getBBox","labelText","name_long","style","startXOffset","startYOffset","resizing","startX","startY","startSize","newSize","labelX","parseFloat","labelY","mouseX","layerX","mouseY","layerY","southEastCorner","xStart","xEnd","yStart","yEnd","call","drag","deltaX","xOffset","yOffset","prevDiameter","startEdgeXOffset","startEdgeYOffset","endEdgeXOffset","endEdgeYOffset","journeyNodeObject","languageProp","getLanguageProp","vertexText","group","groupEnd","vertexX","vertexY","vertexG","preparedText","innerTextWidth","markerSelectString","parentNode","parentRef","nodeRef","edge","startRadius","newVertexRadius","newLabelSize","squareArea","circleArea","Math","PI","pow","cornerWidth","paddingOffset","selectString","slice","dataEnd","attachedEdges","attachedEdges2","g","graticules","geoGraticule","cleanup","l","c","n","words","childNode","includes","countryNodes","push","margin","backgroundColor"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {AddEditNodeModal} from \"./modals/AddEditNodeModal\";\r\nimport {ContextMenu} from \"./controls/ContextMenu\";\r\nimport countriesData from \"../data/countries/countries.json\";\r\nimport languageProperties from \"../data/languageProperties.json\";\r\n\r\nexport function Map(props)\r\n{\r\n\tconsole.log(\"[== MAP RENDER ==]\");\r\n\r\n\t// Prop functions\r\n\tconst openContextMenu = props.openContextMenu.bind(this);\r\n\tconst addNode = props.addNode.bind(this);\r\n\tconst editNode = props.editNode.bind(this);\r\n\tconst removeNode = props.removeNode.bind(this);\r\n\tconst openModal = props.openModal.bind(this);\r\n\r\n\t// Props\r\n\tconst collections = props.collections;\r\n\r\n\t// Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\r\n\tuseEffect(() => {\r\n\t\tlet svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\r\n\t\tlet countries = countriesData.features;\r\n\r\n\t\t// Create path (passed as svg attribute later to draw the countries)\r\n\t\t// TODO: Have it auto-scale as window is dragged\r\n\t\tconst width = svg._groups[0][0].clientWidth;\r\n\t\tconst height = svg._groups[0][0].clientHeight;\r\n\t\tconst projection = d3.geoConicConformal()\r\n\t\t\t.center([8, 52.823]) // Middle of Europe(ish)\r\n\t\t\t.scale(1650)\r\n\t\t\t.translate([width/2, height/2]);\r\n\t\tconst path = d3.geoPath().projection(projection);\r\n\r\n\t\tconst coordGroup = svg.append(\"g\")\r\n\t\t\t.classed(\"coords\", true);\r\n\r\n\t\t// Draw countries, bind data and handlers\r\n\t\tlet countryPaths = svg.append(\"g\")\r\n\t\t\t.selectAll(\"path\") // svg->g->path\r\n\t\t\t.data(countries)         // svg->g->path\r\n\t\t\t.enter()                 // svg->g->path (create new nodes per data)\r\n\t\t\t.append(\"path\")          // svg->g->path (create new nodes per data)\r\n\t\t\t.attr(\"fill\", (d) => determineFillColour(d))\r\n\t\t\t.attr(\"stroke\", (d) => determineStrokeColour(d))\r\n\t\t\t.attr(\"stroke-linejoin\", \"round\")\r\n\t\t\t.attr(\"d\", path)\r\n\t\t\t.on(\"click\", function(e, d){\r\n\t\t\t\t// TODO: Possibly same functions as context menu (see about calling this.onContextMenu() to keep things nice and DRY)\r\n\t\t\t})\r\n\t\t\t.on(\"mousemove\", function(e, d){\r\n\t\t\t\tconst x = e.clientX, y = e.clientY;\r\n\t\t\t\tcoordGroup.selectAll(\"text\").remove();\r\n\t\t\t\tcoordGroup.append(\"text\")\r\n\t\t\t\t\t.text(`(${x},${y})`)\r\n\t\t\t\t\t.attr(\"fill\", \"white\");\r\n\t\t\t})\r\n\t\t\t.on(\"contextmenu\", function(e, d){\r\n\t\t\t\te.preventDefault(); // Prevent browser context menu from opening\r\n\t\t\t\tconst nodeObject = findNodes(d, \"cognate\");\r\n\t\t\t\tlet contextMenuItems = [];\r\n\r\n\t\t\t\t// If clicked-on country has attached cognate\r\n\t\t\t\tif(nodeObject)\r\n\t\t\t\t{\r\n\t\t\t\t\tcontextMenuItems = [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Edit node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tlet collectionList = collections.filter((collection, i) => {\r\n\t\t\t\t\t\t\t\t\tif(collection.type === \"cognate\")\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcollection.collectionIndex = i;\r\n\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={editNode} node={nodeObject.node} collectionList={collectionList}\r\n\t\t\t\t\t\t\t\t                               collectionIndex={nodeObject.collectionIndex}\r\n\t\t\t\t\t\t\t\t                               type={\"cognate\"} language={nodeObject.node.language} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Remove node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tremoveNode(e, nodeObject.collectionIndex, nodeObject.arrayIndex);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t];\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// TODO: Context menu for adding to new collection, adding to existing collection\r\n\t\t\t\t\tcontextMenuItems = [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add country to collection (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tlet collectionList = collections.filter((collection, i) => {\r\n\t\t\t\t\t\t\t\t\tif(collection.type === \"cognate\")\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcollection.collectionIndex = i;\r\n\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t\tif(collectionList.length <= 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\talert(\"You must first create a cognate collection for the node to be added to.\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tlet node = {word: \"\", language: \"\", parents: []};\r\n\t\t\t\t\t\t\t\t\tnode.fillColour = \"#FF0000\"; node.strokeColour = \"#000000\";\r\n\t\t\t\t\t\t\t\t\tnode.label = {type: \"word\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null};\r\n\t\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal isNewWord={true} onNodeSubmit={addNode} node={node} type={\"cognate\"} collectionList={collectionList} collectionIndex={collectionList[0].collectionIndex} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Common to both\r\n\t\t\t\tcontextMenuItems.unshift(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttext: \"Add new node (journey)\", handler: (e) => {\r\n\t\t\t\t\t\t\tlet collectionList = collections.filter((collection, i) => {\r\n\t\t\t\t\t\t\t\tif(collection.type === \"journey\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcollection.collectionIndex = i;\r\n\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tif(collectionList.length <= 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\talert(\"You must first create a journey collection for the node to be added to.\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Open the AddEditNodeModal with initial node data\r\n\t\t\t\t\t\t\t\tlet node = {word: \"\", language: d.properties.languages[0], parents: []};\r\n\t\t\t\t\t\t\t\tnode.vertex = {type: \"word\", customText: \"\", fontColour: \"#000000\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\", edgeStrokeColour: \"#000000\", edgeStrokeWidth: \"2px\", edgeArrowheadEnabled: true, edgeArrowheadStrokeColour: \"#000000\", edgeArrowheadFillColour: \"#000000\"};\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal isNewWord={true} node={node} type={\"journey\"} onNodeSubmit={addNode} collectionList={collectionList} collectionIndex={collectionList[0].collectionIndex} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t);\r\n\t\t\t\topenContextMenu(e, <ContextMenu x={e.clientX} y={e.clientY} items={contextMenuItems} />);\r\n\t\t\t})\r\n\t\t\t.on(\"mouseover\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"white\") // White can't become transparent\r\n\t\t\t\t\telement.attr(\"fill\", \"rgb(230,230,230)\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"0.65\");\r\n\t\t\t})\r\n\t\t\t.on(\"mouseout\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\r\n\t\t\t\t\telement.attr(\"fill\", \"white\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"1\");\r\n\t\t\t});\r\n\r\n\t\t// Cognate labels, journey vertices\r\n\t\tconst vertexEdgesG = svg.append(\"g\").classed(\"vertex-edges\", true); // SVG group for edges\r\n\t\tconst verticesLabelsG = svg.append(\"g\").classed(\"vertices-labels\", true); // SVG group for vertices AND cognate labels\r\n\t\tcountryPaths.each(function(f, i) {\r\n\t\t\tlet cognateNodeObject = findNodes(f, \"cognate\");  // The first node in any cognate collection that belongs to this country/region\r\n\t\t\tlet journeyNodeObjects = findNodes(f, \"journey\"); // All nodes across all journey collections belonging to this country/region\r\n\t\t\tif(cognateNodeObject)\r\n\t\t\t{\r\n\t\t\t\t/* Cognate visualisations */\r\n\t\t\t\tlet node = cognateNodeObject.node;\r\n\t\t\t\tlet boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\r\n\t\t\t\tlet fontSize = node.label.fontSize;                 // Font size of the label\r\n\t\t\t\tlet labelText = node.word;                          // Word by default\r\n\t\t\t\tif(node.label.type === \"Country/region\") labelText = f.properties.name_long;\r\n\t\t\t\telse if(node.label.type === \"Custom text\") labelText = node.label.customText;\r\n\t\t\t\telse if(node.label.type === \"Language\") labelText = node.language;\r\n\r\n\t\t\t\t// TODO: Initial scale factor depending on size of country (to stop oversized text from escaping country)\r\n\t\t\t\tif(labelText.length !== 0 && !node.label.fontSize) // Only scale if font size hasn't been set by user\r\n\t\t\t\t{\r\n\t\t\t\t\tif(boundingBox.width < (labelText.length * 16))\r\n\t\t\t\t\t\tfontSize = boundingBox.width/8 + \"px\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Append labels to paths, with co-ordinates according to feature's position on map\r\n\t\t\t\tlet x = (node.label.x === null) ? (boundingBox.x + boundingBox.width/4) : node.label.x;\r\n\t\t\t\tlet y = (node.label.y === null) ? (boundingBox.y + boundingBox.height/2) : node.label.y;\r\n\t\t\t\tlet label = verticesLabelsG.append(\"text\")\r\n\t\t\t\t\t.attr(\"x\", x).attr(\"y\", y)\r\n\t\t\t\t\t.attr(\"fill\", node.label.fontColour)\r\n\t\t\t\t\t.style(\"font-size\", fontSize)\r\n\t\t\t\t\t.text(labelText);\r\n\r\n\t\t\t\t// Dragging/resizing handlers\r\n\t\t\t\tlet startXOffset, startYOffset, resizing = false, startX, startY, startSize, newSize;\r\n\t\t\t\tlabel\r\n\t\t\t\t\t.on(\"mousemove\", (e) => {\r\n\t\t\t\t\t\tlet labelX = parseFloat(label.attr(\"x\")), labelY = parseFloat(label.attr(\"y\"));\r\n\t\t\t\t\t\tlet mouseX = e.layerX, mouseY = e.layerY;\r\n\r\n\t\t\t\t\t\t// Determine corner of text's box\r\n\t\t\t\t\t\tconst southEastCorner = {\r\n\t\t\t\t\t\t\txStart: labelX + label.node().getBBox().width - 5,\r\n\t\t\t\t\t\t\txEnd: labelX + label.node().getBBox().width + 15,\r\n\t\t\t\t\t\t\tyStart: labelY,\r\n\t\t\t\t\t\t\tyEnd: labelY + 10\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Check corner\r\n\t\t\t\t\t\tif(mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd\r\n\t\t\t\t\t\t\t&& mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlabel.style(\"cursor\", \"se-resize\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tlabel.style(\"cursor\", \"grab\");\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.call(d3.drag()\r\n\t\t\t\t\t\t.on(\"start\", (e) => {\r\n\t\t\t\t\t\t\tlet labelX = parseFloat(label.attr(\"x\")), labelY = parseFloat(label.attr(\"y\"));\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tstartXOffset = mouseX - labelX;\r\n\t\t\t\t\t\t\tstartYOffset = mouseY - labelY;\r\n\r\n\t\t\t\t\t\t\t// Determine corner of text's box\r\n\t\t\t\t\t\t\tconst southEastCorner = {\r\n\t\t\t\t\t\t\t\txStart: labelX + label.node().getBBox().width - 5,\r\n\t\t\t\t\t\t\t\txEnd: labelX + label.node().getBBox().width + 15,\r\n\t\t\t\t\t\t\t\tyStart: labelY,\r\n\t\t\t\t\t\t\t\tyEnd: labelY + 10\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Check corner\r\n\t\t\t\t\t\t\tif(mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd\r\n\t\t\t\t\t\t\t\t&& mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tresizing = true;\r\n\t\t\t\t\t\t\t\tstartX = mouseX;\r\n\t\t\t\t\t\t\t\tstartY = mouseY;\r\n\t\t\t\t\t\t\t\tstartSize = parseFloat(label.style(\"font-size\"));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"drag\", (e) => {\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tif(resizing)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Resize the label\r\n\t\t\t\t\t\t\t\tif(mouseX >= startX && mouseY >= startY || mouseX <= startX && mouseY <= startY)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tlet deltaX = mouseX - startX;\r\n\t\t\t\t\t\t\t\t\tnewSize = startSize + (deltaX / 10);\r\n\t\t\t\t\t\t\t\t\tif(newSize < 5) newSize = 5; // Floor of 5px to prevent it shrinking into nothingness\r\n\t\t\t\t\t\t\t\t\tlabel.style(\"font-size\", newSize + \"px\"); // Only visually, not updating state itself\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Move the label\r\n\t\t\t\t\t\t\t\tx = mouseX - startXOffset;\r\n\t\t\t\t\t\t\t\ty = mouseY - startYOffset;\r\n\t\t\t\t\t\t\t\tnewSize = node.label.fontSize;\r\n\t\t\t\t\t\t\t\tlabel.attr(\"x\", x).attr(\"y\", y); // Only visually\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"end\", () => {\r\n\t\t\t\t\t\t\tresizing = false;\r\n\t\t\t\t\t\t\tnode.label.x = x; node.label.y = y; node.label.fontSize = newSize;\r\n\t\t\t\t\t\t\teditNode(null, cognateNodeObject.collectionIndex, node);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tif(journeyNodeObjects)\r\n\t\t\t{\r\n\t\t\t\t/* Journey visualisations */\r\n\r\n\t\t\t\t// Loop through all journey nodes inside this country/region\r\n\t\t\t\tlet xOffset = 0, yOffset = 0, prevDiameter = 0;\r\n\t\t\t\tlet startEdgeXOffset = 0, startEdgeYOffset = 0, endEdgeXOffset = 0, endEdgeYOffset = 0; // Centre by default\r\n\t\t\t\tfor(let i = 0; i < journeyNodeObjects.length; ++i)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet journeyNodeObject = journeyNodeObjects[i];\r\n\t\t\t\t\tlet node = journeyNodeObject.node;\r\n\t\t\t\t\tlet languageProp = getLanguageProp(node);\r\n\t\t\t\t\tlet boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\r\n\t\t\t\t\tlet radius = node.vertex.radius || 50;              // Inherit radius (determined later if null)\r\n\t\t\t\t\tlet fontSize = node.vertex.fontSize;\r\n\t\t\t\t\tlet vertexText = node.word;                         // Word by default\r\n\t\t\t\t\tif(node.vertex.type === \"Country region\") vertexText = f.properties.name_long;\r\n\t\t\t\t\telse if(node.vertex.type === \"Custom text\") vertexText = node.vertex.customText;\r\n\t\t\t\t\telse if(node.vertex.type === \"Language\") vertexText = node.language;\r\n\r\n\t\t\t\t\tconsole.group(\"Node\");\r\n\t\t\t\t\tconsole.log(node.language);\r\n\t\t\t\t\tconsole.log(languageProp);\r\n\t\t\t\t\tconsole.log(node.vertex);\r\n\t\t\t\t\tconsole.groupEnd();\r\n\r\n\t\t\t\t\t// Initial co-ordinates\r\n\t\t\t\t\t// TODO: Vertex xOffset, yOffset attributes in country/region data\r\n\t\t\t\t\tlet vertexX = (node.vertex.x === null) ? (languageProp.x + 612) : node.vertex.x;\r\n\t\t\t\t\tlet vertexY = (node.vertex.y === null) ? (languageProp.y + 528) : node.vertex.y;\r\n\r\n\t\t\t\t\t// Set initial vertex position // TODO: Do it for label, too\r\n\t\t\t\t\tif(!node.vertex.x || !node.vertex.y)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnode.vertex.x = vertexX; node.vertex.y = vertexY;\r\n\t\t\t\t\t\t//return editNode(null, journeyNodeObject.collectionIndex, node);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Prepare text element. This is required to calculate circle radius based on text element's width\r\n\t\t\t\t\tlet vertexG = verticesLabelsG.append(\"g\"); // Group required to have circle and text together\r\n\t\t\t\t\tlet preparedText = vertexG.append(\"text\")\r\n\t\t\t\t\t\t.attr(\"x\", vertexX).attr(\"y\", vertexY)\r\n\t\t\t\t\t\t.attr(\"fill\", node.vertex.fontColour)\r\n\t\t\t\t\t\t.attr(\"text-anchor\", \"middle\")        // Centre of circle\r\n\t\t\t\t\t\t.attr(\"alignment-baseline\", \"middle\") // Centre of circle\r\n\t\t\t\t\t\t.style(\"font-size\", \"16px\")\r\n\t\t\t\t\t\t.text(vertexText);\r\n\r\n\t\t\t\t\t// Determine initial radius of circle\r\n\t\t\t\t\t// TODO: Initial scale factor depending on size of country (to stop oversized text from escaping country)\r\n\t\t\t\t\tlet innerTextWidth = preparedText.node().getBBox().width;\r\n\t\t\t\t\tif(vertexText.length !== 0 && !node.vertex.radius) // Only scale if font size hasn't been set by user\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tradius = boundingBox.width/8;\r\n\t\t\t\t\t\tif(radius < innerTextWidth) radius = innerTextWidth/2 + 5; // Convert text \"diameter\" to radius, add padding\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpreparedText.remove(); // Remove prepared text element. It will not show if appended before the circle\r\n\r\n\t\t\t\t\t// Place edge between this node and its parents\r\n\t\t\t\t\tlet markerSelectString = \"\"; // String to select markers so they can move whilst being resized\r\n\t\t\t\t\tif(node.parents)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Create edge for each parent, originating from this node\r\n\t\t\t\t\t\tfor(let i = 0; i < node.parents.length; ++i)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet parentNode = node.parents[i];\r\n\r\n\t\t\t\t\t\t\t// Fingerprint references for marker IDs and data-start/data-end attributes\r\n\t\t\t\t\t\t\tconst parentRef = journeyNodeObject.collectionIndex + \"|\" + parentNode.arrayIndex;\r\n\t\t\t\t\t\t\tconst nodeRef = journeyNodeObject.collectionIndex + \"|\" + node.arrayIndex;\r\n\r\n\t\t\t\t\t\t\t// Compute arrowheads\r\n\t\t\t\t\t\t\tif(node.vertex.edgeArrowheadEnabled)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvertexEdgesG.append(\"defs\")\r\n\t\t\t\t\t\t\t\t\t.append(\"marker\")\r\n\t\t\t\t\t\t\t\t\t.attr(\"id\", \"arrow\" + parentRef + nodeRef)\r\n\t\t\t\t\t\t\t\t\t.attr(\"markerWidth\", 5).attr(\"markerHeight\", 4)\r\n\t\t\t\t\t\t\t\t\t.attr(\"refX\", radius/2 + 5).attr(\"refY\", 2)\r\n\t\t\t\t\t\t\t\t\t.attr(\"orient\", \"auto\")\r\n\t\t\t\t\t\t\t\t\t.append(\"polygon\")\r\n\t\t\t\t\t\t\t\t\t.attr(\"points\", \"0 0, 5 2, 0 4\")\r\n\t\t\t\t\t\t\t\t\t.attr(\"fill\", node.vertex.edgeArrowheadFillColour)\r\n\t\t\t\t\t\t\t\t\t.attr(\"stroke\", node.vertex.edgeArrowheadStrokeColour)\r\n\t\t\t\t\t\t\t\t\t.attr(\"id\", nodeRef);\r\n\t\t\t\t\t\t\t\tmarkerSelectString += \"marker[id=\\\"arrow\"+parentRef+nodeRef+\"\\\"], \";\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Determine edge start position\r\n\t\t\t\t\t\t\tif(node.vertex.edgeStart === \"top\") startEdgeYOffset = -(radius);\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeStart === \"right\") startEdgeXOffset = radius;\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeStart === \"bottom\") startEdgeYOffset = radius;\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeStart === \"left\") startEdgeXOffset = -(radius);\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeStart === \"centre\") {\r\n\t\t\t\t\t\t\t\tstartEdgeXOffset = 0; startEdgeYOffset = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Determine edge end position\r\n\t\t\t\t\t\t\tif(node.vertex.edgeEnd === \"top\") endEdgeYOffset = -(radius);\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeEnd === \"right\") endEdgeXOffset = radius;\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeEnd === \"bottom\") endEdgeYOffset = radius;\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeEnd === \"left\") endEdgeXOffset = -(radius);\r\n\t\t\t\t\t\t\telse if(node.vertex.edgeStart === \"centre\") {\r\n\t\t\t\t\t\t\t\tendEdgeXOffset = 0; endEdgeYOffset = 0;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Place edge\r\n\t\t\t\t\t\t\tconst edge = vertexEdgesG.append(\"line\")\r\n\t\t\t\t\t\t\t\t.attr(\"x1\", parentNode.vertex.x + startEdgeXOffset)\r\n\t\t\t\t\t\t\t\t.attr(\"y1\", parentNode.vertex.y + startEdgeYOffset)\r\n\t\t\t\t\t\t\t\t.attr(\"x2\", node.vertex.x + endEdgeXOffset)\r\n\t\t\t\t\t\t\t\t.attr(\"y2\", node.vertex.y + endEdgeYOffset)\r\n\t\t\t\t\t\t\t\t.attr(\"stroke\", node.vertex.edgeStrokeColour)\r\n\t\t\t\t\t\t\t\t.attr(\"stroke-width\", node.vertex.edgeStrokeWidth)\r\n\t\t\t\t\t\t\t\t.attr(\"data-start\", parentRef) // For finding attached edges later\r\n\t\t\t\t\t\t\t\t.attr(\"data-end\", nodeRef);\r\n\r\n\t\t\t\t\t\t\tif(node.vertex.edgeArrowheadEnabled)\r\n\t\t\t\t\t\t\t\tedge.attr(\"marker-end\", \"url(#arrow\"+parentRef+nodeRef+\")\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet vertex = vertexG.append(\"circle\")\r\n\t\t\t\t\t\t.attr(\"cx\", vertexX).attr(\"cy\", vertexY)\r\n\t\t\t\t\t\t.attr(\"r\", radius + \"px\")\r\n\t\t\t\t\t\t.attr(\"stroke\", node.vertex.strokeColour)\r\n\t\t\t\t\t\t.attr(\"fill\", node.vertex.fillColour);\r\n\t\t\t\t\tlet text = vertexG.append(\"text\")\r\n\t\t\t\t\t\t.attr(\"x\", vertexX).attr(\"y\", vertexY)\r\n\t\t\t\t\t\t.attr(\"fill\", node.vertex.fontColour)\r\n\t\t\t\t\t\t.attr(\"text-anchor\", \"middle\")        // Centre of circle\r\n\t\t\t\t\t\t.attr(\"alignment-baseline\", \"middle\") // Centre of circle\r\n\t\t\t\t\t\t.style(\"font-size\", fontSize)\r\n\t\t\t\t\t\t.text(vertexText);\r\n\t\t\t\t\tprevDiameter = radius*2;\r\n\r\n\t\t\t\t\t// Dragging/resizing/clicking handlers\r\n\t\t\t\t\tlet startXOffset, startYOffset, resizing = false, startX, startY, startRadius, newVertexRadius, newLabelSize;\r\n\r\n\t\t\t\t\tlet on = text.on(\"contextmenu\", (e) => {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tlet contextMenuItems = [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttext: \"Edit node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\t\tlet collectionList = collections.filter((collection, i) => {\r\n\t\t\t\t\t\t\t\t\t\tif(collection.type === \"journey\")\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tcollection.collectionIndex = i;\r\n\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={editNode} node={node} collectionList={collectionList}\r\n\t\t\t\t\t\t\t\t\t                               collectionIndex={journeyNodeObject.collectionIndex}\r\n\t\t\t\t\t\t\t\t\t                               type={\"cognate\"} language={node.language} />);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttext: \"Remove node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\t\tremoveNode(e, journeyNodeObject.collectionIndex, node.arrayIndex);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\t\topenContextMenu(e, <ContextMenu x={e.clientX} y={e.clientY} items={contextMenuItems} />);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tvertex.on(\"mousemove\", (e) => {\r\n\t\t\t\t\t\tlet vertexX = parseFloat(vertex.attr(\"cx\")), vertexY = parseFloat(vertex.attr(\"cy\"));\r\n\t\t\t\t\t\tlet mouseX = e.layerX, mouseY = e.layerY;\r\n\r\n\t\t\t\t\t\t// Dimensions of bottom-right corner\r\n\t\t\t\t\t\tlet squareArea = vertex.node().getBBox().width * vertex.node().getBBox().height;\r\n\t\t\t\t\t\tlet circleArea = Math.PI * Math.pow(parseFloat(vertex.attr(\"r\")),2);\r\n\t\t\t\t\t\tlet cornerWidth = ((squareArea - circleArea) / 4) / 2; // Extract corners, divide by four, width and height are equal length (/2)\r\n\r\n\t\t\t\t\t\t// Determine corner of circle's box\r\n\t\t\t\t\t\tconst southEastCorner = {\r\n\t\t\t\t\t\t\txStart: vertexX,\r\n\t\t\t\t\t\t\txEnd: vertexX + cornerWidth,\r\n\t\t\t\t\t\t\tyStart: vertexY,\r\n\t\t\t\t\t\t\tyEnd: vertexY + cornerWidth\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t// Check corner\r\n\t\t\t\t\t\tif(mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd\r\n\t\t\t\t\t\t\t&& mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvertex.style(\"cursor\", \"se-resize\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvertex.style(\"cursor\", \"grab\");\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.on(\"contextmenu\", (e) => {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tlet contextMenuItems = [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttext: \"Edit node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\t\tlet collectionList = collections.filter((collection, i) => {\r\n\t\t\t\t\t\t\t\t\t\tif(collection.type === \"journey\")\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tcollection.collectionIndex = i;\r\n\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={editNode} node={node} collectionList={collectionList}\r\n\t\t\t\t\t\t\t\t\t                               collectionIndex={journeyNodeObject.collectionIndex}\r\n\t\t\t\t\t\t\t\t\t                               type={\"cognate\"} language={node.language} />);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttext: \"Remove node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\t\tremoveNode(e, journeyNodeObject.collectionIndex, node.arrayIndex);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\t\topenContextMenu(e, <ContextMenu x={e.clientX} y={e.clientY} items={contextMenuItems} />);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.call(d3.drag()\r\n\t\t\t\t\t\t.on(\"start\", (e) => {\r\n\t\t\t\t\t\t\tlet vertexX = parseFloat(vertex.attr(\"cx\")), vertexY = parseFloat(vertex.attr(\"cy\"));\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tstartX = vertexX;\r\n\t\t\t\t\t\t\tstartY = vertexY;\r\n\t\t\t\t\t\t\tstartXOffset = mouseX - vertexX;\r\n\t\t\t\t\t\t\tstartYOffset = mouseY - vertexY;\r\n\r\n\t\t\t\t\t\t\t// Dimensions of bottom-right corner\r\n\t\t\t\t\t\t\tlet squareArea = vertex.node().getBBox().width * vertex.node().getBBox().height;\r\n\t\t\t\t\t\t\tlet circleArea = Math.PI * Math.pow(parseFloat(vertex.attr(\"r\")),2);\r\n\t\t\t\t\t\t\tlet cornerWidth = ((squareArea - circleArea) / 4) / 2; // Extract corners, divide by four, width and height are equal length (/2)\r\n\r\n\t\t\t\t\t\t\t// Determine corner of circle's box\r\n\t\t\t\t\t\t\tconst southEastCorner = {\r\n\t\t\t\t\t\t\t\txStart: vertexX,\r\n\t\t\t\t\t\t\t\txEnd: vertexX + cornerWidth,\r\n\t\t\t\t\t\t\t\tyStart: vertexY,\r\n\t\t\t\t\t\t\t\tyEnd: vertexY + cornerWidth\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Check corner\r\n\t\t\t\t\t\t\tif(mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd\r\n\t\t\t\t\t\t\t\t&& mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tresizing = true;\r\n\t\t\t\t\t\t\t\tstartX = mouseX;\r\n\t\t\t\t\t\t\t\tstartY = mouseY;\r\n\t\t\t\t\t\t\t\tstartRadius = parseFloat(vertex.attr(\"r\"));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"drag\", (e) => {\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tif(resizing)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(mouseX >= startX && mouseY >= startY || mouseX <= startX && mouseY <= startY)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Resize the vertex\r\n\t\t\t\t\t\t\t\t\tlet deltaX = mouseX - startX;\r\n\t\t\t\t\t\t\t\t\tnewVertexRadius = startRadius + (deltaX / 10);\r\n\t\t\t\t\t\t\t\t\tif(newVertexRadius < 10) newVertexRadius = 10; // Floor of 10px to prevent it shrinking into nothingness\r\n\t\t\t\t\t\t\t\t\tvertex.attr(\"r\", newVertexRadius + \"px\"); // Only visually, not updating state itself\r\n\r\n\t\t\t\t\t\t\t\t\t// Resize the vertex's text\r\n\t\t\t\t\t\t\t\t\tconst paddingOffset = 10;\r\n\t\t\t\t\t\t\t\t\tnewLabelSize = ((((newVertexRadius*2) - paddingOffset) / innerTextWidth) * 100) + \"%\";\r\n\t\t\t\t\t\t\t\t\ttext.style(\"font-size\", newLabelSize);\r\n\r\n\t\t\t\t\t\t\t\t\t// Move arrowheads as it is resized\r\n\t\t\t\t\t\t\t\t\tif(markerSelectString)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tlet selectString = markerSelectString.slice(0, markerSelectString.length-2); // Trim \", \" at the end of string\r\n\t\t\t\t\t\t\t\t\t\td3.selectAll(selectString).attr(\"refX\", newVertexRadius/2+5);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Move the vertex\r\n\t\t\t\t\t\t\t\tvertexX = mouseX - startXOffset;\r\n\t\t\t\t\t\t\t\tvertexY = mouseY - startYOffset;\r\n\t\t\t\t\t\t\t\tvertex.attr(\"cx\", vertexX).attr(\"cy\", vertexY); // Only visually\r\n\t\t\t\t\t\t\t\ttext.attr(\"x\", vertexX).attr(\"y\", vertexY); // Only visually\r\n\r\n\t\t\t\t\t\t\t\t// Move the edges\r\n\t\t\t\t\t\t\t\tlet dataEnd = journeyNodeObject.collectionIndex + \"|\" + journeyNodeObject.node.arrayIndex;\r\n\t\t\t\t\t\t\t\tlet attachedEdges = d3.selectAll(\"line[data-start=\\\"\"+dataEnd+\"\\\"]\"); // Find all edges that start on this node\r\n\t\t\t\t\t\t\t\tlet attachedEdges2 = d3.selectAll(\"line[data-end=\\\"\"+dataEnd+\"\\\"]\");  // Find all edges that end on this node\r\n\t\t\t\t\t\t\t\tif(attachedEdges)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tattachedEdges.attr(\"x1\", vertexX + startEdgeXOffset)\r\n\t\t\t\t\t\t\t\t\t\t\t\t .attr(\"y1\", vertexY + startEdgeYOffset);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(attachedEdges2)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tattachedEdges2.attr(\"x2\", vertexX + startEdgeXOffset)\r\n\t\t\t\t\t\t\t\t\t\t\t\t  .attr(\"y2\", vertexY + startEdgeYOffset);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"end\", () => {\r\n\t\t\t\t\t\t\tresizing = false;\r\n\t\t\t\t\t\t\tnode.vertex.x = vertexX; node.vertex.y = vertexY; node.vertex.radius = newVertexRadius || node.vertex.radius; node.vertex.fontSize = newLabelSize || node.vertex.fontSize;\r\n\t\t\t\t\t\t\teditNode(null, journeyNodeObject.collectionIndex, node);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Graticules (lines on the map)\r\n\t\tconst g = svg.append(\"g\");\r\n\t\tconst graticules = g.classed(\"graticules\", true)\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\")\r\n\t\t\t.attr(\"d\", path(d3.geoGraticule()()));\r\n\r\n\t\t/*\r\n\t\tsvg.call(d3.zoom().on(\"zoom\", function () {\r\n\t\t\tz = d3.event.transform.k;\r\n\t\t\tdraw(); // TODO: Contain above render code into draw() function\r\n\t\t}));\r\n\t\t */\r\n\r\n\t\t// Clean-up function (kills all SVG elements upon unmounting)\r\n\t\treturn function cleanup()\r\n\t\t{\r\n\t\t\tsvg.selectAll(\"g\").remove();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\tfunction getLanguageProp(node)\r\n\t{\r\n\t\tfor(let l in languageProperties)\r\n\t\t{\r\n\t\t\tconst languageProp = languageProperties[l];\r\n\t\t\tif(languageProp.language === node.language)\r\n\t\t\t\treturn languageProp;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds all nodes in all collections of specified type where the node's language is within the feature's language array\r\n\t * @param {*} d The dataset feature (country/region) currently being rendered\r\n\t * @param {string} type The type of collection to search for (\"journey\" or \"cognate\")\r\n\t */\r\n\tfunction findNodes(d, type)\r\n\t{\r\n\t\t// Search collections\r\n\t\tif(type === \"cognate\")\r\n\t\t{\r\n\t\t\tfor(let c = 0; c < collections.length; ++c)\r\n\t\t\t{\r\n\t\t\t\tlet collection = collections[c];\r\n\t\t\t\tif(collection.type === \"cognate\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let n = 0; n < collection.words.length; ++n)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet childNode = collection.words[n];\r\n\r\n\t\t\t\t\t\tif(d.properties.languages.includes(childNode.language))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {node: childNode, collectionIndex: c, arrayIndex: n}; // TODO: Currently only returns first cognate\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(type === \"journey\")\r\n\t\t{\r\n\t\t\tlet countryNodes = [];\r\n\t\t\tfor(let c = 0; c < collections.length; ++c) // Search for all nodes in all collections for this country/region\r\n\t\t\t{\r\n\t\t\t\tlet collection = collections[c];\r\n\t\t\t\tif(collection.type === \"journey\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let n = 0; n < collection.words.length; ++n)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet childNode = collection.words[n];\r\n\r\n\t\t\t\t\t\tif(d.properties.languages.includes(childNode.language))\r\n\t\t\t\t\t\t\tcountryNodes.push({node: childNode, collectionIndex: c});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn countryNodes;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Determines country SVG fill colour according to countries' language(s) and the specified colour of that language's cognate node(s).\r\n\t * @param d Data attached to DOM element via D3 (i.e. the country).\r\n\t * @returns {string} The fill colour, as specified by user in Collection.jsx.\r\n\t */\r\n\tfunction determineFillColour(d)\r\n\t{\r\n\t\tconst nodeObject = findNodes(d, \"cognate\"); // Find node in collections\r\n\t\tif(nodeObject) return nodeObject.node.fillColour;    // Country has associated collection node? Return the colour\r\n\t\telse return \"white\";                             // Otherwise, return white by default for all countries with no associated data\r\n\t}\r\n\t/**\r\n\t * Determines country SVG stroke colour according to countries' language(s) and the specified colour of that language's cognate node(s).\r\n\t * @param d Data attached to DOM element via D3 (i.e. the country).\r\n\t * @returns {string} The fill colour, as specified by user in Collection.jsx.\r\n\t */\r\n\tfunction determineStrokeColour(d)\r\n\t{\r\n\t\tconst nodeObject = findNodes(d, \"cognate\");       // Find node in collections\r\n\t\tif(nodeObject) return nodeObject.node.strokeColour;    // Country has associated collection node? Return the colour\r\n\t\telse return \"black\";                                   // Otherwise, return black by default for all countries with no associated data\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div className={\"map-container\"}>\r\n\t\t\t<svg\r\n\t\t\t\t/*ref={ref}*/\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\tbackgroundColor: \"#3d73ab\" /* The sea */\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}