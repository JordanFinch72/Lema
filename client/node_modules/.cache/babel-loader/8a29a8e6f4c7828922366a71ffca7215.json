{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Map.jsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport { useD3 } from \"../hooks/useD3\";\nimport world from \"../world.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Map(_ref) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  let {\n    data\n  } = _ref;\n  useEffect(_s(function () {\n    _s();\n\n    const ref = useD3(svg => {\n      let width = svg._groups[0][0].clientWidth;\n      let height = svg._groups[0][0].clientHeight;\n      let areas = world.features // select only countries in europe\n      .filter(o => o.properties.continent == \"Europe\" || o.properties.name == \"Turkey\" || o.properties.name == \"Iceland\") // flatten multipolygons into polygons\n      .reduce((countries2, feature) => {\n        if (feature.geometry.type == \"Polygon\") {\n          countries2.push(feature);\n        } else {\n          // MultiPolygon\n          feature.geometry.coordinates.forEach(coordinates => {\n            countries2.push({\n              type: \"Feature\",\n              properties: feature.properties,\n              geometry: {\n                type: \"Polygon\",\n                coordinates\n              }\n            });\n          });\n        }\n\n        return countries2;\n      }, []); // TODO: Adjust dimensions so it displays better; have it auto-scale as window is dragged\n\n      const W = 1000;\n      const H = W * height / width;\n      /*const svg = d3.select(DOM.svg(W, H))\r\n       .style(\"border\", \"1px solid #000\")\r\n       .style(\"background\", \"#eee\");*/\n\n      const g = svg.append(\"g\");\n      const g_countries = g.append(\"g\");\n      const graticules = g.append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(0,0,0,.2)\");\n      let x = 0;\n      let z = 1;\n\n      function draw() {\n        const projection = d3.geoConicConformal().parallels([40, 68]).rotate([-10 + x / z / 15, 0]).center([8 - 10, 53.823]).scale(900 * z).translate([W / 2, H / 2]);\n        const path = d3.geoPath().projection(projection);\n        const countries = g_countries.selectAll(\"path\").data(areas);\n        countries.exit().remove();\n        countries.enter().append(\"path\").attr(\"fill\", \"white\").attr(\"stroke\", \"black\").attr(\"stroke-linejoin\", \"round\").merge(countries).attr(\"d\", path);\n        graticules.attr(\"d\", path(d3.geoGraticule().step([20, 20])()));\n      }\n      /*\r\n       svg.call(d3.zoom().on(\"zoom\", function () {\r\n       z = d3.event.transform.k;\r\n       draw();\r\n       }));\r\n       */\n\n\n      draw();\n      return svg.node();\n    }, [data.length]);\n  }, \"r127xTdrGuIqcYXTmMbvPxoKAyo=\", false, function () {\n    return [useD3];\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: ref,\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        margin: 0\n      },\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"map-area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 3\n  }, this);\n}\n\n_s2(Map, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Map.jsx"],"names":["React","useEffect","d3","useD3","world","Map","data","ref","svg","width","_groups","clientWidth","height","clientHeight","areas","features","filter","o","properties","continent","name","reduce","countries2","feature","geometry","type","push","coordinates","forEach","W","H","g","append","g_countries","graticules","attr","x","z","draw","projection","geoConicConformal","parallels","rotate","center","scale","translate","path","geoPath","countries","selectAll","exit","remove","enter","merge","geoGraticule","step","node","length","margin"],"mappings":"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","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {useD3} from \"../hooks/useD3\";\r\nimport world from \"../world.json\";\r\n\r\nexport function Map({data})\r\n{\r\n\tuseEffect(function(){\r\n\t\tconst ref = useD3(\r\n\t\t\t(svg) => {\r\n\r\n\t\t\t\tlet width = svg._groups[0][0].clientWidth;\r\n\t\t\t\tlet height = svg._groups[0][0].clientHeight;\r\n\r\n\t\t\t\tlet areas = world.features\r\n\r\n\t\t\t\t\t// select only countries in europe\r\n\t\t\t\t\t.filter(o => o.properties.continent == \"Europe\"\r\n\t\t\t\t\t\t|| o.properties.name == \"Turkey\"\r\n\t\t\t\t\t\t|| o.properties.name == \"Iceland\"\r\n\t\t\t\t\t)\r\n\r\n\t\t\t\t\t// flatten multipolygons into polygons\r\n\t\t\t\t\t.reduce((countries2, feature) => {\r\n\t\t\t\t\t\tif (feature.geometry.type == \"Polygon\") {\r\n\t\t\t\t\t\t\tcountries2.push(feature);\r\n\t\t\t\t\t\t} else { // MultiPolygon\r\n\t\t\t\t\t\t\tfeature.geometry.coordinates.forEach(coordinates => {\r\n\t\t\t\t\t\t\t\tcountries2.push({\r\n\t\t\t\t\t\t\t\t\ttype: \"Feature\",\r\n\t\t\t\t\t\t\t\t\tproperties: feature.properties,\r\n\t\t\t\t\t\t\t\t\tgeometry: { type: \"Polygon\", coordinates },\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn countries2;\r\n\t\t\t\t\t}, [])\r\n\r\n\t\t\t\t// TODO: Adjust dimensions so it displays better; have it auto-scale as window is dragged\r\n\t\t\t\tconst W = 1000;\r\n\t\t\t\tconst H = W * height/width;\r\n\t\t\t\t/*const svg = d3.select(DOM.svg(W, H))\r\n\t\t\t\t .style(\"border\", \"1px solid #000\")\r\n\t\t\t\t .style(\"background\", \"#eee\");*/\r\n\t\t\t\tconst g = svg.append(\"g\");\r\n\t\t\t\tconst g_countries = g.append(\"g\");\r\n\r\n\t\t\t\tconst graticules = g.append(\"path\")\r\n\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\");\r\n\r\n\t\t\t\tlet x = 0;\r\n\t\t\t\tlet z = 1;\r\n\r\n\t\t\t\tfunction draw () {\r\n\t\t\t\t\tconst projection = d3.geoConicConformal()\r\n\t\t\t\t\t\t.parallels([40, 68])\r\n\t\t\t\t\t\t.rotate([-10 + x/z/15, 0])\r\n\t\t\t\t\t\t.center([8 - 10, 53.823])\r\n\t\t\t\t\t\t.scale(900 * z)\r\n\t\t\t\t\t\t.translate([W/2, H/2]);\r\n\r\n\r\n\t\t\t\t\tconst path = d3.geoPath().projection(projection);\r\n\r\n\t\t\t\t\tconst countries = g_countries.selectAll(\"path\").data(areas);\r\n\t\t\t\t\tcountries.exit().remove();\r\n\t\t\t\t\tcountries\r\n\t\t\t\t\t\t.enter().append(\"path\")\r\n\t\t\t\t\t\t.attr(\"fill\", \"white\")\r\n\t\t\t\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t\t\t\t.attr(\"stroke-linejoin\", \"round\")\r\n\t\t\t\t\t\t.merge(countries)\r\n\t\t\t\t\t\t.attr(\"d\", path);\r\n\r\n\t\t\t\t\tgraticules.attr(\"d\", path(d3.geoGraticule().step([20,20])()));\r\n\t\t\t\t}\r\n\r\n\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t svg.call(d3.zoom().on(\"zoom\", function () {\r\n\t\t\t\t z = d3.event.transform.k;\r\n\t\t\t\t draw();\r\n\t\t\t\t }));\r\n\t\t\t\t */\r\n\r\n\t\t\t\tdraw();\r\n\r\n\t\t\t\treturn svg.node();\r\n\r\n\t\t\t},\r\n\t\t\t[data.length]\r\n\t\t);\r\n\t});\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div className={\"map-container\"}>\r\n\t\t\t<svg\r\n\t\t\t\tref={ref}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmargin: 0\r\n\t\t\t\t}}>\r\n\t\t\t\t<g className={\"map-area\"} />\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}