{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\client\\\\src\\\\components\\\\modals\\\\SaveModal.jsx\";\nimport { Component } from \"react\";\nimport { Textbox } from \"../controls/Textbox\";\nimport { Button } from \"../controls/Button\";\nimport { LabeledControl } from \"../controls/LabeledControl\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class SaveModal extends Component {\n  constructor(props) {\n    super(props);\n    this.validSaveModes = [\"Save to profile\", \"Share link\", \"Export to JSON file\", \"Export to SVG\", \"Export to PNG\"];\n    this.state = {\n      id: this.props.activeMap ? this.props.activeMap.mapID : null,\n      title: this.props.activeMap ? this.props.activeMap.title : \"\",\n      description: this.props.activeMap ? this.props.activeMap.description : \"\",\n      isShared: this.props.activeMap ? this.props.activeMap.isShared : false,\n      saveMode: this.validSaveModes[0],\n      isNewMap: false\n    };\n    this.onFieldChange = this.onFieldChange.bind(this);\n  }\n\n  onFieldChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n  /**\r\n   * Validates form data.\r\n   * @param mode Whether to validate login or register data\r\n   * @returns {boolean}\r\n   */\n\n\n  validate() {\n    let errorCollector = \"\";\n    if (this.state.title === \"\") errorCollector += \"Maps must have a title.\\n\";\n    if (!this.validSaveModes.includes(this.state.saveMode)) errorCollector += \"Invalid save mode.\\n\";\n\n    if (errorCollector !== \"\") {\n      this.props.createToast(null, errorCollector, 5000, \"error\");\n      return false;\n    } else return true;\n  }\n\n  render() {\n    const saveModes = [];\n    this.validSaveModes.forEach(m => saveModes.push( /*#__PURE__*/_jsxDEV(\"option\", {\n      children: m\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 53\n    }, this))); // Allow them to save as new map if a map is already active (loaded)\n\n    const saveChangesLabel = this.state.saveMode === \"Save to profile\" ? \"Save Changes\" : \"Export...\";\n    const saveAsNewMap = this.props.activeMap !== null && this.props.activeMap.mapID !== null && this.state.saveMode === \"Save to profile\" ? /*#__PURE__*/_jsxDEV(Button, {\n      value: \"Save As New Map\",\n      onClick: e => {\n        if (this.validate()) {\n          this.setState({\n            isNewMap: true\n          }, () => {\n            this.props.handler(e, this.state);\n          });\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this) : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left login\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Save Map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-data\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form\",\n                children: [/*#__PURE__*/_jsxDEV(LabeledControl, {\n                  label: \"Title: \",\n                  hint: \"e.g. \\\"Cool map\\\"\",\n                  separateLine: true,\n                  children: /*#__PURE__*/_jsxDEV(Textbox, {\n                    name: \"title\",\n                    value: this.state.title,\n                    hint: \"\",\n                    autoFocus: true,\n                    onFieldChange: this.onFieldChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 86,\n                    columnNumber: 11\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 10\n                }, this), /*#__PURE__*/_jsxDEV(LabeledControl, {\n                  label: \"Description: \",\n                  hint: \"e.g. \\\"Map of cool connections\\\"\",\n                  separateLine: true,\n                  children: /*#__PURE__*/_jsxDEV(Textbox, {\n                    name: \"description\",\n                    value: this.state.description,\n                    hint: \"\",\n                    onFieldChange: this.onFieldChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 89,\n                    columnNumber: 11\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 10\n                }, this), /*#__PURE__*/_jsxDEV(LabeledControl, {\n                  label: \"Save mode: \",\n                  separateLine: true,\n                  children: /*#__PURE__*/_jsxDEV(\"select\", {\n                    name: \"saveMode\",\n                    value: this.state.saveMode,\n                    onChange: this.onFieldChange,\n                    children: saveModes\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 92,\n                    columnNumber: 11\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 10\n                }, this), /*#__PURE__*/_jsxDEV(LabeledControl, {\n                  label: \"Share to showcase:\",\n                  tooltip: \"This will make your map visible to others on the Community Showcase page.\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    name: \"isShared\",\n                    checked: this.state.isShared,\n                    disabled: this.state.saveMode !== \"Save to profile\",\n                    onChange: this.onFieldChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 11\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 10\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons-container\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            value: saveChangesLabel,\n            onClick: e => {\n              if (this.validate()) {\n                this.props.handler(e, this.state);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 7\n          }, this), saveAsNewMap]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/client/src/components/modals/SaveModal.jsx"],"names":["Component","Textbox","Button","LabeledControl","SaveModal","constructor","props","validSaveModes","state","id","activeMap","mapID","title","description","isShared","saveMode","isNewMap","onFieldChange","bind","event","target","name","value","type","checked","setState","validate","errorCollector","includes","createToast","render","saveModes","forEach","m","push","saveChangesLabel","saveAsNewMap","e","handler"],"mappings":"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","sourcesContent":["import {Component} from \"react\";\r\nimport {Textbox} from \"../controls/Textbox\";\r\nimport {Button} from \"../controls/Button\";\r\nimport {LabeledControl} from \"../controls/LabeledControl\";\r\n\r\nexport class SaveModal extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\r\n\t\tthis.validSaveModes = [\"Save to profile\", \"Share link\", \"Export to JSON file\", \"Export to SVG\", \"Export to PNG\"];\r\n\r\n\t\tthis.state = {\r\n\t\t\tid: (this.props.activeMap) ? this.props.activeMap.mapID : null,\r\n\t\t\ttitle: (this.props.activeMap) ? this.props.activeMap.title : \"\",\r\n\t\t\tdescription: (this.props.activeMap) ? this.props.activeMap.description : \"\",\r\n\t\t\tisShared: (this.props.activeMap) ? this.props.activeMap.isShared : false,\r\n\t\t\tsaveMode: this.validSaveModes[0],\r\n\t\t\tisNewMap: false\r\n\t\t};\r\n\r\n\t\tthis.onFieldChange = this.onFieldChange.bind(this);\r\n\t}\r\n\r\n\tonFieldChange(event)\r\n\t{\r\n\t\tconst target = event.target;\r\n\t\tconst name = target.name;\r\n\t\tconst value = (target.type === \"checkbox\") ? target.checked : target.value;\r\n\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates form data.\r\n\t * @param mode Whether to validate login or register data\r\n\t * @returns {boolean}\r\n\t */\r\n\tvalidate()\r\n\t{\r\n\t\tlet errorCollector = \"\";\r\n\t\tif(this.state.title === \"\")\r\n\t\t\terrorCollector += \"Maps must have a title.\\n\";\r\n\t\tif(!this.validSaveModes.includes(this.state.saveMode))\r\n\t\t\terrorCollector += \"Invalid save mode.\\n\";\r\n\r\n\t\tif(errorCollector !== \"\")\r\n\t\t{\r\n\t\t\tthis.props.createToast(null, errorCollector, 5000, \"error\");\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse return true;\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst saveModes = [];\r\n\t\tthis.validSaveModes.forEach((m) => saveModes.push(<option>{m}</option>));\r\n\r\n\t\t// Allow them to save as new map if a map is already active (loaded)\r\n\t\tconst saveChangesLabel = (this.state.saveMode === \"Save to profile\") ? \"Save Changes\" : \"Export...\"\r\n\t\tconst saveAsNewMap = (this.props.activeMap !== null && this.props.activeMap.mapID !== null && this.state.saveMode === \"Save to profile\") ?\r\n\t\t\t<Button value={\"Save As New Map\"} onClick={(e) =>\r\n\t\t\t{\r\n\t\t\t\tif(this.validate())\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.setState({isNewMap: true}, () => {\r\n\t\t\t\t\t\tthis.props.handler(e, this.state);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}}/>\r\n\t\t\t: null;\r\n\r\n\t\treturn (\r\n\t\t\t<div className={\"modal\"}>\r\n\t\t\t\t<div className={\"top\"}>\r\n\t\t\t\t\t<div className={\"left login\"}>\r\n\t\t\t\t\t\t<h2>Save Map</h2>\r\n\t\t\t\t\t\t<div className={\"map-data\"}>\r\n\t\t\t\t\t\t\t<div className={\"section\"}>\r\n\t\t\t\t\t\t\t\t<div className={\"form\"}>\r\n\t\t\t\t\t\t\t\t\t<LabeledControl label={\"Title: \"} hint={\"e.g. \\\"Cool map\\\"\"} separateLine={true}>\r\n\t\t\t\t\t\t\t\t\t\t<Textbox name={\"title\"} value={this.state.title} hint={\"\"} autoFocus={true} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t\t<LabeledControl label={\"Description: \"} hint={\"e.g. \\\"Map of cool connections\\\"\"} separateLine={true}>\r\n\t\t\t\t\t\t\t\t\t\t<Textbox name={\"description\"} value={this.state.description} hint={\"\"} onFieldChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t\t<LabeledControl label={\"Save mode: \"} separateLine={true}>\r\n\t\t\t\t\t\t\t\t\t\t<select name={\"saveMode\"} value={this.state.saveMode} onChange={this.onFieldChange}>\r\n\t\t\t\t\t\t\t\t\t\t\t{saveModes}\r\n\t\t\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t\t<LabeledControl label={\"Share to showcase:\"} tooltip={\"This will make your map visible to others on the Community Showcase page.\"}>\r\n\t\t\t\t\t\t\t\t\t\t<input type={\"checkbox\"} name={\"isShared\"} checked={this.state.isShared} disabled={(this.state.saveMode !== \"Save to profile\")} onChange={this.onFieldChange} />\r\n\t\t\t\t\t\t\t\t\t</LabeledControl>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"bottom\"}>\r\n\t\t\t\t\t<div className={\"buttons-container\"}>\r\n\t\t\t\t\t\t<Button value={saveChangesLabel} onClick={(e) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(this.validate())\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.props.handler(e, this.state);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}/>\r\n\t\t\t\t\t\t{saveAsNewMap}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}