{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\client\\\\src\\\\Lema.js\";\nimport \"./css/Lema.css\";\nimport { Component } from \"react\";\nimport { Banner } from \"./components/Banner\";\nimport { LeftBar } from \"./components/LeftBar\";\nimport { Map } from \"./components/Map\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Lema extends Component {\n  constructor(props) {\n    super(props);\n\n    this.apiTest = async () => {\n      const response = await fetch('/users');\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.state = {\n      activeModal: null,\n      // Either null or a React component\n      activeContextMenu: null,\n      // Either null or a React component\n      mapRef: null,\n      collections: [],\n      journeyCount: 0,\n      activeUser: null\n    };\n    this.defaultJourneyColours = [\"#ff0000\", \"#00ff00\", \"#0000ff\", \"#da35aa\", \"#ffcc00\"]; // TODO: Better colours\n\n    this.flattenTree = this.flattenTree.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.openContextMenu = this.openContextMenu.bind(this);\n    this.closeContextMenu = this.closeContextMenu.bind(this);\n    this.addCollection = this.addCollection.bind(this);\n    this.editCollection = this.editCollection.bind(this);\n    this.addJourneyFromDatabase = this.addJourneyFromDatabase.bind(this);\n    this.addNode = this.addNode.bind(this);\n    this.editNode = this.editNode.bind(this);\n    this.removeNode = this.removeNode.bind(this);\n    this.removeCollection = this.removeCollection.bind(this);\n  }\n\n  componentDidMount() {\n    // TODO: Check if user is already logged in (cookies)\n    this.apiTest().then(res => console.log(res)).catch(err => console.error(err));\n  }\n\n  authenticateUser(e, data) {// Check the user\n  }\n\n  registerUser(e, data) {// Register the user\n  }\n  /**\n   * A recursive function that flattens the nested data structure returned from the etymological database into an\n   * array of word nodes.\n   * @param wordArray Flat array of words (initially empty)\n   * @param edWords Object of words returned by the etymological database\n   * @param edStructure Original data structure returned by the etymological database\n   * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n   * @param wordID The ID of the word currently being operated on in the recursive function\n   * @returns {array} The wordArray object, which has nodes pushed to it throughout the function\n   */\n\n\n  flattenTree(wordArray, edWords, edStructure, wordID) {\n    let edAffixes = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let parents = [],\n        wordNode = {}; // Parents\n\n    if (Object.keys(edStructure).length > 0) {\n      // Loop through parents\n      for (let wordID in edStructure) {\n        if (edAffixes !== null && !edAffixes.includes(Number(wordID)) || edAffixes == null) {\n          parents.push(wordID);\n          wordArray = this.flattenTree(wordArray, edWords, edStructure[wordID], wordID, edAffixes);\n        }\n      }\n    } // Retrieve word from ED and convert to Lema-compatible object\n\n\n    if (wordID !== null) {\n      wordNode = edWords[wordID];\n      wordNode = {\n        id: Number(wordID),\n        arrayIndex: wordArray.length,\n        word: wordNode.word,\n        language: wordNode.language_name,\n        parents: [],\n        vertex: {\n          type: \"word\",\n          customText: \"\",\n          fontColour: \"#000000\",\n          strokeColour: \"#000000\",\n          fillColour: this.defaultJourneyColours[this.state.journeyCount],\n          radius: null,\n          fontSize: null,\n          x: null,\n          y: null,\n          edgeStart: \"centre\",\n          edgeEnd: \"centre\",\n          edgeStrokeColour: \"#000000\",\n          edgeStrokeWidth: \"2px\",\n          edgeArrowheadEnabled: true,\n          edgeArrowheadStrokeColour: \"#000000\",\n          edgeArrowheadFillColour: \"#000000\"\n        }\n      };\n\n      for (let i = 0; i < parents.length; ++i) {\n        let parentID = Number(parents[i]);\n        let parent = wordArray.find(_ref => {\n          let {\n            id\n          } = _ref;\n          return id === parentID;\n        });\n\n        if (edAffixes !== null && !edAffixes.includes(parentID) || edAffixes === null) {\n          wordNode.parents.push(parent);\n        }\n      }\n\n      wordArray.push(wordNode);\n    }\n\n    return wordArray;\n  }\n  /**\n   * Creates a journey collection from words returned by the etymological database and automatically adds them to the existing journey collections array\n   * @param edWords Object of words returned by the etymological database\n   * @param edStructure Original data structure returned by the etymological database\n   * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n   */\n\n\n  addJourneyFromDatabase(edWords, edStructure) {\n    let edAffixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let newCollections = this.state.collections,\n        newJourneyCount = this.state.journeyCount; // Flatten the data structure\n\n    let journeyWords = [];\n    journeyWords = this.flattenTree(journeyWords, edWords, edStructure, null, edAffixes);\n    console.log(journeyWords); // Create the new journey and add it to collections\n\n    let newJourney = {\n      type: \"journey\",\n      header: {\n        word: journeyWords[journeyWords.length - 1].word,\n        language: journeyWords[journeyWords.length - 1].language\n      },\n      words: journeyWords\n    };\n    newCollections.push(newJourney);\n    this.setState({\n      collections: newCollections,\n      journeyCount: newJourneyCount + 1\n    });\n  }\n  /**\n   * Opens a modal if one is not already open.\n   * @param e SyntheticEvent\n   * @param modalComponent React component of the modal that is to be opened.\n   */\n\n\n  openModal(e, modalComponent) {\n    if (!this.state.activeModal) this.setState({\n      activeModal: modalComponent\n    });\n  }\n  /**\n   * Closes any currently-open modal.\n   */\n\n\n  closeModal() {\n    if (this.state.activeModal) this.setState({\n      activeModal: null\n    });\n  }\n  /**\n   * Opens a context menu if one is not already open.\n   * Note: currently, only one context menu can be active at a time. This means context menus' items must not attempt to open a context menu on themselves.\n   * @param e\n   * @param menuComponent A React component of the context menu that is to be opened.\n   */\n\n\n  openContextMenu(e, menuComponent) {\n    if (!this.state.activeContextMenu) this.setState({\n      activeContextMenu: menuComponent\n    });\n  }\n  /**\n   * Closes any currently-open context menu.\n   */\n\n\n  closeContextMenu() {\n    if (this.state.activeContextMenu) this.setState({\n      activeContextMenu: null\n    });\n  }\n  /**\n   * Adds a node to the specified collection in the state's collection array.\n   * @param e SyntheticEvent\n   * @param collectionIndex The index of the collection to which the new node will belong.\n   * @param newNode The new node.\n   */\n\n\n  addNode(e, collectionIndex, newNode) {\n    let newCollectionIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let collectionIndexActual = newCollectionIndex !== null ? newCollectionIndex : collectionIndex; // Validation (note: node data validation exists in the AddEditNodeModal)\n\n    let errorCollector = \"\";\n\n    if (this.state.collections[collectionIndexActual].type === \"cognate\") {\n      // Check for existing language\n      for (let i = 0; i < this.state.collections[collectionIndexActual].words.length; ++i) {\n        let childNode = this.state.collections[collectionIndexActual].words[i];\n\n        if (childNode.language === newNode.language) {\n          errorCollector += \"A language can only appear in a cognate collection once.\\n\" + \"Additional cognate collections may contain a language used in another cognate collection.\";\n          break;\n        }\n      }\n    }\n\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error message with toast\n    else {\n      // Insert new node\n      let newCollections = this.state.collections;\n      newNode.arrayIndex = newCollections[collectionIndexActual].words.length;\n      newCollections[collectionIndexActual].words.push(newNode);\n      this.setState({\n        collections: newCollections\n      }, this.closeModal);\n    }\n  }\n  /**\n   * Updates a node in the specified collection in the state's collections array with updated data.\n   * @param e React SyntheticEvent\n   * @param collectionIndex Index of collection to which the node belongs.\n   * @param updatedNode The updated node to be set in the collections array.\n   */\n\n\n  editNode(e, collectionIndex, updatedNode) {\n    let newCollectionIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let newCollections = this.state.collections;\n    console.log(e);\n    console.log(collectionIndex);\n    console.log(updatedNode); // Find node\n\n    let node = newCollections[collectionIndex].words[updatedNode.arrayIndex]; // Update node by reference\n\n    for (let index in updatedNode) if (node[index]) node[index] = updatedNode[index]; // Additional operations if node was moved from one collection to another\n\n\n    if (newCollectionIndex !== null) {\n      node.arrayIndex = newCollections[newCollectionIndex].words.length; // Update arrayIndex to reflect new collection\n\n      node.parents.splice(0, node.parents.length); // Clear parents\n\n      newCollections[newCollectionIndex].words.push(node); // Add node to new collection\n\n      this.removeNode(e, collectionIndex, updatedNode.arrayIndex); // Delete node from original collection\n    }\n\n    this.setState({\n      collections: newCollections\n    }, () => {\n      console.log(\"Post-edit collections: \");\n      console.log(this.state.collections);\n      this.closeModal();\n    });\n  }\n  /**\n   * Removes a specified node from a specified collection in the state's collections array.\n   * The user will be warned before deletion occurs (and will be notified of any existing parents, lest they have to add them all again).\n   * @param e SyntheticEvent\n   * @param collectionIndex Index of the collection to which the node belongs.\n   * @param arrayIndex Index of the node inside the specified collection.\n   */\n\n\n  removeNode(e, collectionIndex, arrayIndex) {\n    let newCollections = this.state.collections; // Find node\n\n    let node = newCollections[collectionIndex].words[arrayIndex];\n    let confirmed = false;\n    if (node.parents.length > 0) confirmed = window.confirm(\"Warning: this node is connected to \" + node.parents.length + \" parent nodes. The nodes will be unaffected by the deletion/move. Do you still wish to delete/move?\");else confirmed = window.confirm(\"Are you sure you wish to delete/move this node?\");\n\n    if (confirmed) {\n      newCollections[collectionIndex].words.splice(arrayIndex, 1); // Delete node\n\n      for (let i = 0; i < newCollections[collectionIndex].words.length; ++i) {\n        let word = newCollections[collectionIndex].words[i];\n        if (word.arrayIndex > arrayIndex) word.arrayIndex = word.arrayIndex - 1; // Shift down after splice\n        // Delete node in parents array of others (as splice() does not delete by reference)\n\n        for (let j = 0; j < word.parents.length; ++j) {\n          if (word.parents[j].id === node.id) {\n            alert(\"Found a parent! Get ready to splice!\");\n            word.parents.splice(j, 1);\n          }\n        }\n      }\n    }\n\n    this.setState({\n      collections: newCollections\n    }, this.closeModal);\n  }\n  /**\n   * Adds a new collection to the state's collection array.\n   * @param e SyntheticEvent\n   * @param data An object containing the data required to build the new collection (collection object).\n   */\n\n\n  addCollection(e, data) {\n    let newCollections = this.state.collections; // Only one cognate allowed, for now // TODO\n\n    if (data.type === \"cognate\" && newCollections.find(e => e.type === \"cognate\") !== undefined) alert(\"Support for multiple cognate collections coming soon!\");else {\n      newCollections.push({\n        type: data.type,\n        header: data.header,\n        words: []\n      });\n      this.setState({\n        collections: newCollections\n      }, this.closeModal);\n    }\n  }\n  /**\n   * Updates an existing collection in the state's collection array with updated data.\n   * @param e SyntheticEvent\n   * @param data An object containing the data required to update the existing collection (collection object, collection index).\n   */\n\n\n  editCollection(e, data) {\n    let newCollections = this.state.collections;\n    newCollections[data.index].type = data.type;\n    newCollections[data.index].header = data.header;\n    this.setState({\n      collections: newCollections\n    }, this.closeModal);\n  }\n  /**\n   * Removes the specified collection from the state's collection array.\n   * @param e SyntheticEvent\n   * @param collectionIndex Index of the collection to be removed.\n   */\n\n\n  removeCollection(e, collectionIndex) {\n    let newCollections = this.state.collections;\n    newCollections.splice(collectionIndex, 1);\n    this.setState({\n      collections: newCollections\n    });\n  }\n\n  render() {\n    // Render any active modals and context menus\n    let modalContainer = null,\n        contextMenuContainer = null;\n\n    if (this.state.activeModal !== null) {\n      let activeModal = this.state.activeModal;\n      modalContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-container\",\n        onClick: e => {\n          if (e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n        },\n        children: activeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 5\n      }, this);\n    }\n\n    if (this.state.activeContextMenu !== null) {\n      let activeContextMenu = this.state.activeContextMenu;\n      contextMenuContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"context-menu-container\",\n        onClick: this.closeContextMenu,\n        children: activeContextMenu\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 5\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Lema\",\n      children: [/*#__PURE__*/_jsxDEV(Banner, {\n        activeUser: this.state.activeUser,\n        openModal: this.openModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-view-container\",\n        children: [/*#__PURE__*/_jsxDEV(LeftBar, {\n          collections: this.state.collections,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          addNode: this.addNode,\n          editNode: this.editNode,\n          removeNode: this.removeNode,\n          addCollection: this.addCollection,\n          editCollection: this.editCollection,\n          removeCollection: this.removeCollection,\n          addJourneyFromDatabase: this.addJourneyFromDatabase\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Map, {\n          collections: this.state.collections,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          addNode: this.addNode,\n          editNode: this.editNode,\n          removeNode: this.removeNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 5\n      }, this), modalContainer, contextMenuContainer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Lema;","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/client/src/Lema.js"],"names":["Component","Banner","LeftBar","Map","Lema","constructor","props","apiTest","response","fetch","body","json","status","Error","message","state","activeModal","activeContextMenu","mapRef","collections","journeyCount","activeUser","defaultJourneyColours","flattenTree","bind","openModal","closeModal","openContextMenu","closeContextMenu","addCollection","editCollection","addJourneyFromDatabase","addNode","editNode","removeNode","removeCollection","componentDidMount","then","res","console","log","catch","err","error","authenticateUser","e","data","registerUser","wordArray","edWords","edStructure","wordID","edAffixes","parents","wordNode","Object","keys","length","includes","Number","push","id","arrayIndex","word","language","language_name","vertex","type","customText","fontColour","strokeColour","fillColour","radius","fontSize","x","y","edgeStart","edgeEnd","edgeStrokeColour","edgeStrokeWidth","edgeArrowheadEnabled","edgeArrowheadStrokeColour","edgeArrowheadFillColour","i","parentID","parent","find","newCollections","newJourneyCount","journeyWords","newJourney","header","words","setState","modalComponent","menuComponent","collectionIndex","newNode","newCollectionIndex","collectionIndexActual","errorCollector","childNode","alert","updatedNode","node","index","splice","confirmed","window","confirm","j","undefined","render","modalContainer","contextMenuContainer","nativeEvent","target","className"],"mappings":"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","sourcesContent":["import \"./css/Lema.css\";\nimport {Component} from \"react\";\nimport {Banner} from \"./components/Banner\";\nimport {LeftBar} from \"./components/LeftBar\";\nimport {Map} from \"./components/Map\";\n\nclass Lema extends Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tactiveModal: null, // Either null or a React component\n\t\t\tactiveContextMenu: null, // Either null or a React component\n\t\t\tmapRef: null,\n\t\t\tcollections: [],\n\t\t\tjourneyCount: 0,\n\t\t\tactiveUser: null\n\t\t};\n\n\t\tthis.defaultJourneyColours = [\"#ff0000\", \"#00ff00\", \"#0000ff\", \"#da35aa\", \"#ffcc00\"] // TODO: Better colours\n\n\t\tthis.flattenTree = this.flattenTree.bind(this);\n\t\tthis.openModal = this.openModal.bind(this);\n\t\tthis.closeModal = this.closeModal.bind(this);\n\t\tthis.openContextMenu = this.openContextMenu.bind(this);\n\t\tthis.closeContextMenu = this.closeContextMenu.bind(this);\n\t\tthis.addCollection = this.addCollection.bind(this);\n\t\tthis.editCollection = this.editCollection.bind(this);\n\t\tthis.addJourneyFromDatabase = this.addJourneyFromDatabase.bind(this);\n\t\tthis.addNode = this.addNode.bind(this);\n\t\tthis.editNode = this.editNode.bind(this);\n\t\tthis.removeNode = this.removeNode.bind(this);\n\t\tthis.removeCollection = this.removeCollection.bind(this);\n\t}\n\n\tcomponentDidMount()\n\t{\n\t\t// TODO: Check if user is already logged in (cookies)\n\n\t\tthis.apiTest()\n\t\t\t.then(res => console.log(res))\n\t\t\t.catch(err => console.error(err));\n\t}\n\n\tapiTest = async() => {\n\t\tconst response = await fetch('/users');\n\t\tconst body = await response.json();\n\t\tif(response.status !== 200)\n\t\t{\n\t\t\tthrow Error(body.message);\n\t\t}\n\t\treturn body;\n\t}\n\n\tauthenticateUser(e, data)\n\t{\n\t\t// Check the user\n\t}\n\tregisterUser(e, data)\n\t{\n\t\t// Register the user\n\t}\n\n\t/**\n\t * A recursive function that flattens the nested data structure returned from the etymological database into an\n\t * array of word nodes.\n\t * @param wordArray Flat array of words (initially empty)\n\t * @param edWords Object of words returned by the etymological database\n\t * @param edStructure Original data structure returned by the etymological database\n\t * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n\t * @param wordID The ID of the word currently being operated on in the recursive function\n\t * @returns {array} The wordArray object, which has nodes pushed to it throughout the function\n\t */\n\tflattenTree(wordArray, edWords, edStructure, wordID, edAffixes = null)\n\t{\n\t\tlet parents = [], wordNode = {};\n\t\t// Parents\n\t\tif(Object.keys(edStructure).length > 0)\n\t\t{\n\t\t\t// Loop through parents\n\t\t\tfor(let wordID in edStructure)\n\t\t\t{\n\t\t\t\tif((edAffixes !== null && !edAffixes.includes(Number(wordID)))\n\t\t\t\t\t|| edAffixes == null)\n\t\t\t\t{\n\t\t\t\t\tparents.push(wordID);\n\t\t\t\t\twordArray = this.flattenTree(wordArray, edWords, edStructure[wordID], wordID, edAffixes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Retrieve word from ED and convert to Lema-compatible object\n\t\tif(wordID !== null)\n\t\t{\n\t\t\twordNode = edWords[wordID];\n\t\t\twordNode = {\n\t\t\t\tid: Number(wordID),\n\t\t\t\tarrayIndex: wordArray.length,\n\t\t\t\tword: wordNode.word,\n\t\t\t\tlanguage: wordNode.language_name,\n\t\t\t\tparents: [],\n\t\t\t\tvertex: {type: \"word\", customText: \"\", fontColour: \"#000000\", strokeColour: \"#000000\", fillColour: this.defaultJourneyColours[this.state.journeyCount], radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\", edgeStrokeColour: \"#000000\", edgeStrokeWidth: \"2px\", edgeArrowheadEnabled: true, edgeArrowheadStrokeColour: \"#000000\", edgeArrowheadFillColour: \"#000000\"}\n\t\t\t}\n\t\t\tfor(let i = 0; i < parents.length; ++i)\n\t\t\t{\n\t\t\t\tlet parentID = Number(parents[i]);\n\t\t\t\tlet parent = wordArray.find(({id}) => id === parentID);\n\t\t\t\tif((edAffixes !== null && !edAffixes.includes(parentID))\n\t\t\t\t\t|| edAffixes === null)\n\t\t\t\t{\n\t\t\t\t\twordNode.parents.push(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\twordArray.push(wordNode);\n\t\t}\n\t\treturn wordArray;\n\t}\n\n\t/**\n\t * Creates a journey collection from words returned by the etymological database and automatically adds them to the existing journey collections array\n\t * @param edWords Object of words returned by the etymological database\n\t * @param edStructure Original data structure returned by the etymological database\n\t * @param edAffixes Array of affixed returned by the etymological database (used to filter out affixes)\n\t */\n\taddJourneyFromDatabase(edWords, edStructure, edAffixes = null)\n\t{\n\t\tlet newCollections = this.state.collections, newJourneyCount = this.state.journeyCount;\n\n\t\t// Flatten the data structure\n\t\tlet journeyWords = [];\n\t\tjourneyWords = this.flattenTree(journeyWords, edWords, edStructure, null, edAffixes);\n\t\tconsole.log(journeyWords);\n\n\t\t// Create the new journey and add it to collections\n\t\tlet newJourney = {type: \"journey\", header: {word: journeyWords[journeyWords.length-1].word, language: journeyWords[journeyWords.length-1].language}, words: journeyWords};\n\t\tnewCollections.push(newJourney);\n\n\t\tthis.setState({collections: newCollections, journeyCount: newJourneyCount+1});\n\t}\n\n\t/**\n\t * Opens a modal if one is not already open.\n\t * @param e SyntheticEvent\n\t * @param modalComponent React component of the modal that is to be opened.\n\t */\n\topenModal(e, modalComponent)\n\t{\n\t\tif(!this.state.activeModal)\n\t\t\tthis.setState({activeModal: modalComponent});\n\t}\n\n\t/**\n\t * Closes any currently-open modal.\n\t */\n\tcloseModal()\n\t{\n\t\tif(this.state.activeModal)\n\t\t\tthis.setState({activeModal: null});\n\t}\n\n\t/**\n\t * Opens a context menu if one is not already open.\n\t * Note: currently, only one context menu can be active at a time. This means context menus' items must not attempt to open a context menu on themselves.\n\t * @param e\n\t * @param menuComponent A React component of the context menu that is to be opened.\n\t */\n\topenContextMenu(e, menuComponent)\n\t{\n\t\tif(!this.state.activeContextMenu)\n\t\t\tthis.setState({activeContextMenu: menuComponent});\n\t}\n\n\t/**\n\t * Closes any currently-open context menu.\n\t */\n\tcloseContextMenu()\n\t{\n\t\tif(this.state.activeContextMenu)\n\t\t\tthis.setState({activeContextMenu: null});\n\t}\n\n\t/**\n\t * Adds a node to the specified collection in the state's collection array.\n\t * @param e SyntheticEvent\n\t * @param collectionIndex The index of the collection to which the new node will belong.\n\t * @param newNode The new node.\n\t */\n\taddNode(e, collectionIndex, newNode, newCollectionIndex = null)\n\t{\n\t\tlet collectionIndexActual = (newCollectionIndex !== null) ? newCollectionIndex : collectionIndex;\n\n\t\t// Validation (note: node data validation exists in the AddEditNodeModal)\n\t\tlet errorCollector = \"\";\n\t\tif(this.state.collections[collectionIndexActual].type === \"cognate\")\n\t\t{\n\t\t\t// Check for existing language\n\t\t\tfor(let i = 0; i < this.state.collections[collectionIndexActual].words.length; ++i)\n\t\t\t{\n\t\t\t\tlet childNode = this.state.collections[collectionIndexActual].words[i];\n\t\t\t\tif(childNode.language === newNode.language)\n\t\t\t\t{\n\t\t\t\t\terrorCollector += \"A language can only appear in a cognate collection once.\\n\" +\n\t\t\t\t\t\t\t\t\t  \"Additional cognate collections may contain a language used in another cognate collection.\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error message with toast\n\t\telse\n\t\t{\n\t\t\t// Insert new node\n\t\t\tlet newCollections = this.state.collections;\n\t\t\tnewNode.arrayIndex = newCollections[collectionIndexActual].words.length;\n\t\t\tnewCollections[collectionIndexActual].words.push(newNode);\n\n\t\t\tthis.setState({collections: newCollections}, this.closeModal);\n\t\t}\n\t}\n\n\t/**\n\t * Updates a node in the specified collection in the state's collections array with updated data.\n\t * @param e React SyntheticEvent\n\t * @param collectionIndex Index of collection to which the node belongs.\n\t * @param updatedNode The updated node to be set in the collections array.\n\t */\n\teditNode(e, collectionIndex, updatedNode, newCollectionIndex = null)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tconsole.log(e);\n\t\tconsole.log(collectionIndex);\n\t\tconsole.log(updatedNode);\n\n\t\t// Find node\n\t\tlet node = newCollections[collectionIndex].words[updatedNode.arrayIndex];\n\n\t\t// Update node by reference\n\t\tfor(let index in updatedNode)\n\t\t\tif(node[index]) node[index] = updatedNode[index];\n\n\t\t// Additional operations if node was moved from one collection to another\n\t\tif(newCollectionIndex !== null)\n\t\t{\n\t\t\tnode.arrayIndex = newCollections[newCollectionIndex].words.length; // Update arrayIndex to reflect new collection\n\t\t\tnode.parents.splice(0, node.parents.length);                  // Clear parents\n\t\t\tnewCollections[newCollectionIndex].words.push(node);               // Add node to new collection\n\t\t\tthis.removeNode(e, collectionIndex, updatedNode.arrayIndex);       // Delete node from original collection\n\t\t}\n\n\t\tthis.setState({collections: newCollections}, () => {\n\t\t\tconsole.log(\"Post-edit collections: \");\n\t\t\tconsole.log(this.state.collections);\n\t\t\tthis.closeModal();\n\t\t});\n\t}\n\n\t/**\n\t * Removes a specified node from a specified collection in the state's collections array.\n\t * The user will be warned before deletion occurs (and will be notified of any existing parents, lest they have to add them all again).\n\t * @param e SyntheticEvent\n\t * @param collectionIndex Index of the collection to which the node belongs.\n\t * @param arrayIndex Index of the node inside the specified collection.\n\t */\n\tremoveNode(e, collectionIndex, arrayIndex)\n\t{\n\t\tlet newCollections = this.state.collections;\n\n\t\t// Find node\n\t\tlet node = newCollections[collectionIndex].words[arrayIndex];\n\t\tlet confirmed = false;\n\t\tif(node.parents.length > 0)\n\t\t\tconfirmed = window.confirm(\"Warning: this node is connected to \"+node.parents.length+\" parent nodes. The nodes will be unaffected by the deletion/move. Do you still wish to delete/move?\");\n\t\telse\n\t\t\tconfirmed = window.confirm(\"Are you sure you wish to delete/move this node?\");\n\n\t\tif(confirmed)\n\t\t{\n\t\t\tnewCollections[collectionIndex].words.splice(arrayIndex, 1); // Delete node\n\n\t\t\tfor(let i = 0; i < newCollections[collectionIndex].words.length; ++i)\n\t\t\t{\n\t\t\t\tlet word = newCollections[collectionIndex].words[i];\n\t\t\t\tif(word.arrayIndex > arrayIndex) word.arrayIndex = word.arrayIndex-1; // Shift down after splice\n\n\t\t\t\t// Delete node in parents array of others (as splice() does not delete by reference)\n\t\t\t\tfor(let j = 0; j < word.parents.length; ++j)\n\t\t\t\t{\n\t\t\t\t\tif(word.parents[j].id === node.id)\n\t\t\t\t\t{\n\t\t\t\t\t\talert(\"Found a parent! Get ready to splice!\")\n\t\t\t\t\t\tword.parents.splice(j, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tthis.setState({collections: newCollections}, this.closeModal);\n\t}\n\n\t/**\n\t * Adds a new collection to the state's collection array.\n\t * @param e SyntheticEvent\n\t * @param data An object containing the data required to build the new collection (collection object).\n\t */\n\taddCollection(e, data)\n\t{\n\t\tlet newCollections = this.state.collections;\n\n\t\t// Only one cognate allowed, for now // TODO\n\t\tif(data.type === \"cognate\" && newCollections.find(e => e.type === \"cognate\") !== undefined)\n\t\t\talert(\"Support for multiple cognate collections coming soon!\");\n\t\telse\n\t\t{\n\t\t\tnewCollections.push({type: data.type, header: data.header, words: []});\n\t\t\tthis.setState( {collections: newCollections}, this.closeModal);\n\t\t}\n\t}\n\n\t/**\n\t * Updates an existing collection in the state's collection array with updated data.\n\t * @param e SyntheticEvent\n\t * @param data An object containing the data required to update the existing collection (collection object, collection index).\n\t */\n\teditCollection(e, data)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tnewCollections[data.index].type = data.type;\n\t\tnewCollections[data.index].header = data.header;\n\t\tthis.setState({collections: newCollections}, this.closeModal);\n\t}\n\n\t/**\n\t * Removes the specified collection from the state's collection array.\n\t * @param e SyntheticEvent\n\t * @param collectionIndex Index of the collection to be removed.\n\t */\n\tremoveCollection(e, collectionIndex)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tnewCollections.splice(collectionIndex, 1);\n\t\tthis.setState({collections: newCollections});\n\t}\n\n\trender()\n\t{\n\t\t// Render any active modals and context menus\n\t\tlet modalContainer = null, contextMenuContainer = null;\n\t\tif(this.state.activeModal !== null)\n\t\t{\n\t\t\tlet activeModal = this.state.activeModal;\n\t\t\tmodalContainer =\n\t\t\t\t<div className={\"modal-container\"} onClick={(e) =>{\n\t\t\t\t\tif(e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n\t\t\t\t}}>\n\t\t\t\t\t{activeModal}\n\t\t\t\t</div>;\n\t\t}\n\t\tif(this.state.activeContextMenu !== null)\n\t\t{\n\t\t\tlet activeContextMenu = this.state.activeContextMenu;\n\t\t\tcontextMenuContainer =\n\t\t\t\t<div className={\"context-menu-container\"} onClick={this.closeContextMenu}>{activeContextMenu}</div>;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"Lema\">\n\t\t\t\t<Banner activeUser={this.state.activeUser} openModal={this.openModal} />\n\t\t\t\t<div className={\"main-view-container\"}>\n\t\t\t\t\t<LeftBar collections={this.state.collections}\n\t\t\t\t\t         openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t         openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t         addNode={this.addNode} editNode={this.editNode} removeNode={this.removeNode}\n\t\t\t\t\t         addCollection={this.addCollection} editCollection={this.editCollection} removeCollection={this.removeCollection}\n\t\t\t\t\t         addJourneyFromDatabase={this.addJourneyFromDatabase}\n\t\t\t\t\t/>\n\t\t\t\t\t<Map collections={this.state.collections}\n\t\t\t\t\t     openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t     openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t\t addNode={this.addNode} editNode={this.editNode} removeNode={this.removeNode}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{modalContainer}\n\t\t\t\t{contextMenuContainer}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Lema;\n"]},"metadata":{},"sourceType":"module"}