{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\Lema.js\";\nimport \"./css/Lema.css\";\nimport { Component } from \"react\";\nimport { Banner } from \"./components/Banner\";\nimport { LeftBar } from \"./components/LeftBar\";\nimport { Map } from \"./components/Map\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Lema extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeModal: null,\n      // Either null or a React component\n      activeContextMenu: null,\n      // Either null or a React component\n      mapRef: null,\n      collections: [\n        /*{\n        \ttype: \"journey\",\n        \theader: {word: \"horse\", language: \"English (GB)\"},\n        \twords: [\n        \t\t{word: \"kers\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n        \t\t{word: \"krsos\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n        \t\t{word: \"hrussa\", language: \"Proto-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n        \t\t{word: \"hross\", language: \"Proto-West-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n        \t\t{word: \"horse\", language: \"English (GB)\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n        \t]\n        },*/\n\n        /*{   /!* One word, all cognates (same ancestor). TODO: Legend should detail the ancestors *!/\n        \ttype: \"cognate\",\n        \theader: {word: \"palfrey\", language: \"English (GB)\"},\n        \twords: [\n        \t\t{word: \"palfrey\", language: \"English (GB)\", colour: \"#f5b60d\"},\n        \t\t{word: \"paard\", language: \"Dutch\", colour: \"#f5b60d\"},\n        \t\t{word: \"Pferd\", language: \"German\", colour: \"#f5b60d\"},\n        \t\t{word: \"Päerd\", language: \"Luxembourgish\", colour: \"#f5b60d\"},\n        \t\t{word: \"פערד\", language: \"Yiddish\", colour: \"#f5b60d\"}\n        \t]\n        },*/\n        // TODO: Multiple cognate collections at once (separate layers/patterned colours)\n\n        /*{   /!* Multiple words, no shared countries. Demonstrates cognates of same English word across different families/languages. *!/\n        \ttype: \"cognate\",\n        \theader: {word: \"smith\", language: \"English (GB)\"},\n        \twords: [\n        \t\t{word: \"smith\", language: \"English (GB)\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smid\", language: \"Dutch\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"Schmidt\", language: \"German\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smed\", language: \"Danish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smed\", language: \"Norwegian\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smed\", language: \"Swedish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"smiður\", language: \"Icelandic\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"forgeron\", language: \"French\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"fabbro\", language: \"Italian\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"Kovář\", language: \"Czech\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"kováč\", language: \"Slovak\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n        \t\t{word: \"kowal\", language: \"Polish\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}}\n        \t]\n        }*/\n      ],\n      mapRenderCounter: 0\n    };\n    this.flattenTree = this.flattenTree.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.openContextMenu = this.openContextMenu.bind(this);\n    this.closeContextMenu = this.closeContextMenu.bind(this);\n    this.addCollection = this.addCollection.bind(this);\n    this.editCollection = this.editCollection.bind(this);\n    this.addNode = this.addNode.bind(this);\n    this.addNodeDefault = this.addNodeDefault.bind(this);\n    this.editNode = this.editNode.bind(this);\n    this.removeNode = this.removeNode.bind(this);\n    this.removeCollection = this.removeCollection.bind(this);\n  }\n\n  flattenTree(wordArray, node) {\n    if (node.parents) {\n      for (let j = 0; j < node.parents.length; ++j) {\n        wordArray = this.flattenTree(wordArray, node.parents[j]);\n      }\n    }\n\n    node.arrayIndex = wordArray.length;\n    wordArray.push(node);\n    return wordArray;\n  }\n\n  componentDidMount() {\n    // TODO: Temporary; same operation will be performed on incoming data from API\n    let testJourney = {\n      type: \"journey\",\n      header: {\n        word: \"Pferd\",\n        language: \"German\"\n      },\n      words: [{\n        id: 1,\n        word: \"Pferd\",\n        language: \"German\",\n        colour: \"#000000\",\n        vertex: {\n          type: \"word\",\n          strokeColour: \"#000000\",\n          fillColour: \"#FFFFFF\",\n          radius: null,\n          fontSize: null,\n          x: null,\n          y: null,\n          edgeStart: \"centre\",\n          edgeEnd: \"centre\"\n        },\n        parents: [{\n          id: 2,\n          word: \"pfarifrit\",\n          language: \"Old High German\",\n          colour: \"#000000\",\n          vertex: {\n            type: \"word\",\n            strokeColour: \"#000000\",\n            fillColour: \"#FFFFFF\",\n            radius: null,\n            fontSize: null,\n            x: null,\n            y: null,\n            edgeStart: \"centre\",\n            edgeEnd: \"centre\"\n          },\n          parents: [{\n            id: 4,\n            word: \"paraveredus\",\n            language: \"Latin\",\n            colour: \"#000000\",\n            vertex: {\n              type: \"word\",\n              strokeColour: \"#000000\",\n              fillColour: \"#FFFFFF\",\n              radius: null,\n              fontSize: null,\n              x: null,\n              y: null,\n              edgeStart: \"centre\",\n              edgeEnd: \"centre\"\n            },\n            parents: [{\n              id: 6,\n              word: \"veredus\",\n              language: \"Latin\",\n              colour: \"#000000\",\n              vertex: {\n                type: \"word\",\n                strokeColour: \"#000000\",\n                fillColour: \"#FFFFFF\",\n                radius: null,\n                fontSize: null,\n                x: null,\n                y: null,\n                edgeStart: \"centre\",\n                edgeEnd: \"centre\"\n              },\n              parents: [{\n                id: 8,\n                word: \"werēdos\",\n                language: \"Gaulish\",\n                colour: \"#000000\",\n                vertex: {\n                  type: \"word\",\n                  strokeColour: \"#000000\",\n                  fillColour: \"#FFFFFF\",\n                  radius: null,\n                  fontSize: null,\n                  x: null,\n                  y: null,\n                  edgeStart: \"centre\",\n                  edgeEnd: \"centre\"\n                },\n                parents: [{\n                  id: 10,\n                  word: \"uɸorēdos\",\n                  language: \"Proto-Celtic\",\n                  colour: \"#000000\",\n                  vertex: {\n                    type: \"word\",\n                    strokeColour: \"#000000\",\n                    fillColour: \"#FFFFFF\",\n                    radius: null,\n                    fontSize: null,\n                    x: null,\n                    y: null,\n                    edgeStart: \"centre\",\n                    edgeEnd: \"centre\"\n                  },\n                  parents: [{\n                    id: 12,\n                    word: \"uɸo\",\n                    language: \"Proto-Celtic\",\n                    colour: \"#000000\",\n                    vertex: {\n                      type: \"word\",\n                      strokeColour: \"#000000\",\n                      fillColour: \"#FFFFFF\",\n                      radius: null,\n                      fontSize: null,\n                      x: null,\n                      y: null,\n                      edgeStart: \"centre\",\n                      edgeEnd: \"centre\"\n                    },\n                    parents: [{\n                      id: 14,\n                      word: \"upo\",\n                      language: \"Proto-Indo-European\",\n                      colour: \"#000000\",\n                      vertex: {\n                        type: \"word\",\n                        strokeColour: \"#000000\",\n                        fillColour: \"#FFFFFF\",\n                        radius: null,\n                        fontSize: null,\n                        x: null,\n                        y: null,\n                        edgeStart: \"centre\",\n                        edgeEnd: \"centre\"\n                      },\n                      parents: []\n                    }]\n                  }, {\n                    id: 13,\n                    word: \"rēdos\",\n                    language: \"Proto-Celtic\",\n                    colour: \"#000000\",\n                    vertex: {\n                      type: \"word\",\n                      strokeColour: \"#000000\",\n                      fillColour: \"#FFFFFF\",\n                      radius: null,\n                      fontSize: null,\n                      x: null,\n                      y: null,\n                      edgeStart: \"centre\",\n                      edgeEnd: \"centre\"\n                    }\n                  }]\n                }]\n              }]\n            }]\n          }, {\n            id: 5,\n            word: \"paraveredus\",\n            language: \"Late Latin\",\n            colour: \"#000000\",\n            vertex: {\n              type: \"word\",\n              strokeColour: \"#000000\",\n              fillColour: \"#FFFFFF\",\n              radius: null,\n              fontSize: null,\n              x: null,\n              y: null,\n              edgeStart: \"centre\",\n              edgeEnd: \"centre\"\n            },\n            parents: [{\n              id: 7,\n              word: \"παρά\",\n              language: \"Ancient Greek\",\n              colour: \"#000000\",\n              vertex: {\n                type: \"word\",\n                strokeColour: \"#000000\",\n                fillColour: \"#FFFFFF\",\n                radius: null,\n                fontSize: null,\n                x: null,\n                y: null,\n                edgeStart: \"centre\",\n                edgeEnd: \"centre\"\n              },\n              parents: [{\n                id: 9,\n                word: \"preh₂-\",\n                language: \"Proto-Indo-European\",\n                colour: \"#000000\",\n                vertex: {\n                  type: \"word\",\n                  strokeColour: \"#000000\",\n                  fillColour: \"#FFFFFF\",\n                  radius: null,\n                  fontSize: null,\n                  x: null,\n                  y: null,\n                  edgeStart: \"centre\",\n                  edgeEnd: \"centre\"\n                },\n                parents: [{\n                  id: 11,\n                  word: \"per-\",\n                  language: \"Proto-Indo-European\",\n                  colour: \"#000000\",\n                  vertex: {\n                    type: \"word\",\n                    strokeColour: \"#000000\",\n                    fillColour: \"#FFFFFF\",\n                    radius: null,\n                    fontSize: null,\n                    x: null,\n                    y: null,\n                    edgeStart: \"centre\",\n                    edgeEnd: \"centre\"\n                  }\n                }]\n              }]\n            }]\n          }]\n        }, {\n          id: 3,\n          word: \"pferift\",\n          language: \"Middle High German\",\n          colour: \"#000000\",\n          vertex: {\n            type: \"word\",\n            strokeColour: \"#000000\",\n            fillColour: \"#FFFFFF\",\n            radius: null,\n            fontSize: null,\n            x: null,\n            y: null,\n            edgeStart: \"centre\",\n            edgeEnd: \"centre\"\n          }\n        }]\n      }]\n    };\n\n    if (this.state.collections.length <= 0) {\n      let newCollections = [];\n      let journeyWords = [];\n      journeyWords = this.flattenTree(journeyWords, testJourney.words[0]);\n      testJourney.words = journeyWords;\n      newCollections.push(testJourney);\n      this.setState({\n        collections: newCollections\n      }, e => {\n        console.log(this.state.collections);\n      });\n    }\n  }\n\n  openModal(e, modalComponent) {\n    this.setState({\n      activeModal: modalComponent\n    });\n  }\n\n  closeModal() {\n    if (this.state.activeModal) {\n      this.setState({\n        activeModal: null\n      });\n    }\n  }\n\n  openContextMenu(e, menuComponent) {\n    this.setState({\n      activeContextMenu: menuComponent\n    });\n  }\n\n  closeContextMenu() {\n    this.setState({\n      activeContextMenu: null\n    });\n  }\n\n  addNode(e, collectionIndex, indexChain, newNode) {\n    // Data validation\n    let errorCollector = \"\";\n\n    if (this.state.collections[collectionIndex].type === \"cognate\") {\n      // Check for existing language\n      for (let i = 0; i < this.state.collections[collectionIndex].words.length; ++i) {\n        let childNode = this.state.collections[collectionIndex].words[i];\n\n        if (childNode.language === newNode.language) {\n          errorCollector += \"A language may only have one word per cognate collection.\\n\" + \"Additional cognate collections may re-use languages in other cognate collections.\";\n          break;\n        }\n      }\n    }\n\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error message with toast\n    else {\n      // Insert new node\n      let newCollections = this.state.collections;\n      indexChain = indexChain.split(\"->\"); // Note: indexes are returned as strings, but JS doesn't seem to mind\n      // Find node via index chain\n\n      let node = newCollections[collectionIndex].words[indexChain[0]]; // Beginning of chain is always 0\n\n      for (let i = 1; i < indexChain.length; ++i) {\n        node = node.parents[indexChain[i]];\n      }\n\n      this.setState({\n        collections: newCollections\n      }, this.closeModal);\n    }\n  }\n\n  addNodeDefault(e, data) {\n    // Create new child node\n    let newChildNode;\n\n    if (data.type === \"journey\") {\n      newChildNode = {\n        word: \"word\",\n        language: \"language\",\n        colour: \"#000000\",\n        vertex: {\n          type: \"word\",\n          strokeColour: \"#000000\",\n          fillColour: \"#FFFFFF\",\n          radius: null,\n          fontSize: null,\n          x: null,\n          y: null,\n          edgeStart: \"centre\",\n          edgeEnd: \"centre\"\n        }\n      };\n    } else if (data.type === \"cognate\") {\n      newChildNode = {\n        word: \"word\",\n        language: \"language\",\n        colour: \"#000000\",\n        label: {\n          type: \"language\",\n          customText: \"\",\n          fontColour: \"#000000\",\n          fontSize: null,\n          x: null,\n          y: null\n        }\n      };\n    }\n\n    let newCollections = this.state.collections;\n    newCollections[data.collectionIndex].words.push(newChildNode); // Data contains parent Journey component's index (its location in this.state.collections array)\n\n    this.setState({\n      collections: newCollections\n    }, this.closeModal);\n  }\n  /**\n   * Updates the state's collections array with updated node\n   * @param e React SyntheticEvent\n   * @param collectionIndex Index of collection to which the node belongs\n   * @param indexChain Index chain to find node within the specified collection\n   * @param updatedNode The updated node to be set in the collections array\n   */\n\n\n  editNode(e, collectionIndex, updatedNode) {\n    let newCollections = this.state.collections; // Find node via index chain\n\n    let node = newCollections[collectionIndex].words[updatedNode.arrayIndex]; // Update node by reference\n\n    for (let index in updatedNode) if (node[index]) node[index] = updatedNode[index];\n\n    this.setState({\n      collections: newCollections\n    }, () => {\n      console.log(\"Post-edit collections: \");\n      console.log(this.state.collections);\n      this.closeModal();\n    });\n  }\n\n  removeNode(e, collectionIndex, indexChain) {\n    let newCollections = this.state.collections;\n    indexChain = indexChain.split(\"->\"); // Note: indexes are returned as strings, but JS doesn't seem to mind\n    // Find node via index chain\n\n    let node = newCollections[collectionIndex].words[indexChain[0]]; // Beginning of chain is always 0\n\n    for (let i = 1; i < indexChain.length; ++i) {\n      if (i + 1 === indexChain.length) // End of chain == node to delete\n        {\n          let confirmed = false;\n          if (node.parents[indexChain[i]].parents) confirmed = window.confirm(\"Warning: this node has \" + node.parents[indexChain[i]].parents.length + \" parent nodes that will be deleted as well. Do you still wish to delete?\");else confirmed = window.confirm(\"Are you sure you wish to delete this node?\");\n          if (confirmed) node.parents.splice(indexChain[i], 1); // Delete by reference\n        } else node = node.parents[indexChain[i]];\n    }\n\n    this.setState({\n      collections: newCollections\n    }, this.closeModal);\n  }\n\n  addCollection(e, data) {\n    if (data.type === \"Cognates\") data.type = \"cognate\";else if (data.type === \"Historical journey\") data.type = \"journey\"; // Data validation\n    // TODO: For cognates, only one cognate per language should be allowed\n    //  - Future feature: for additional cognate collections, change solid colours to patterns of the specified colours instead (e.g. stripes; checks)\n\n    let errorCollector = \"\";\n    if (data.header.word === null || data.header.word.length <= 0) errorCollector += \"You must enter a word.\\n\";\n    if (data.header.language === null || data.header.language.length <= 0) errorCollector += \"You must enter a language.\\n\";\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error handling with toast\n    else {\n      let newCollections = this.state.collections;\n      newCollections.push({\n        type: data.type,\n        header: data.header,\n        words: []\n      });\n      this.setState({\n        collections: newCollections\n      }, this.closeModal);\n    }\n  }\n\n  editCollection(e, data) {\n    if (data.type === \"Cognates\") data.type = \"cognate\";else if (data.type === \"Historical journey\") data.type = \"journey\"; // Data validation\n\n    let errorCollector = \"\";\n    if (data.header.word === null || data.header.word.length <= 0) errorCollector += \"You must enter a word.\\n\";\n    if (data.header.language === null || data.header.language.length <= 0) errorCollector += \"You must enter a language.\\n\";\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error handling with toast\n    else {\n      let newCollections = this.state.collections;\n      newCollections[data.index].type = data.type;\n      newCollections[data.index].header = data.header;\n      this.setState({\n        collections: newCollections,\n        mapRenderCounter: this.state.mapRenderCounter + 1\n      }, this.closeModal);\n    }\n  }\n\n  removeCollection(e, collectionIndex) {\n    let newCollections = this.state.collections;\n    newCollections.splice(collectionIndex, 1);\n    this.setState({\n      collections: newCollections\n    }, function () {\n      console.log(this.state);\n    });\n  }\n\n  render() {\n    let modalContainer = null,\n        contextMenuContainer = null;\n\n    if (this.state.activeModal !== null) {\n      let activeModal = this.state.activeModal;\n      modalContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-container\",\n        onClick: e => {\n          if (e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n        },\n        children: activeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 21\n      }, this);\n    }\n\n    if (this.state.activeContextMenu !== null) {\n      let activeContextMenu = this.state.activeContextMenu;\n      contextMenuContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"context-menu-container\",\n        onClick: this.closeContextMenu,\n        children: activeContextMenu\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 5\n      }, this);\n    } //console.log(this.state.collections);\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Lema\",\n      children: [/*#__PURE__*/_jsxDEV(Banner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-view-container\",\n        children: [/*#__PURE__*/_jsxDEV(LeftBar, {\n          collections: this.state.collections,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          addNode: this.addNode,\n          addNodeDefault: this.addNodeDefault,\n          editNode: this.editNode,\n          editNodeColour: this.editNodeColour,\n          removeNode: this.removeNode,\n          addCollection: this.addCollection,\n          editCollection: this.editCollection,\n          removeCollection: this.removeCollection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Map, {\n          collections: this.state.collections,\n          mapRenderCounter: this.state.mapRenderCounter,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          addNode: this.addNode,\n          editNode: this.editNode,\n          editNodeColour: this.editNodeColour,\n          removeNode: this.removeNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 5\n      }, this), modalContainer, contextMenuContainer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Lema;","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/Lema.js"],"names":["Component","Banner","LeftBar","Map","Lema","constructor","props","state","activeModal","activeContextMenu","mapRef","collections","mapRenderCounter","flattenTree","bind","openModal","closeModal","openContextMenu","closeContextMenu","addCollection","editCollection","addNode","addNodeDefault","editNode","removeNode","removeCollection","wordArray","node","parents","j","length","arrayIndex","push","componentDidMount","testJourney","type","header","word","language","words","id","colour","vertex","strokeColour","fillColour","radius","fontSize","x","y","edgeStart","edgeEnd","newCollections","journeyWords","setState","e","console","log","modalComponent","menuComponent","collectionIndex","indexChain","newNode","errorCollector","i","childNode","alert","split","data","newChildNode","label","customText","fontColour","updatedNode","index","confirmed","window","confirm","splice","render","modalContainer","contextMenuContainer","nativeEvent","target","className","editNodeColour"],"mappings":"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","sourcesContent":["import \"./css/Lema.css\";\nimport {Component} from \"react\";\nimport {Banner} from \"./components/Banner\";\nimport {LeftBar} from \"./components/LeftBar\";\nimport {Map} from \"./components/Map\";\n\nclass Lema extends Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tactiveModal: null, // Either null or a React component\n\t\t\tactiveContextMenu: null, // Either null or a React component\n\t\t\tmapRef: null,\n\t\t\tcollections: [\n\n\t\t\t\t/*{\n\t\t\t\t\ttype: \"journey\",\n\t\t\t\t\theader: {word: \"horse\", language: \"English (GB)\"},\n\t\t\t\t\twords: [\n\t\t\t\t\t\t{word: \"kers\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"krsos\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"hrussa\", language: \"Proto-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"hross\", language: \"Proto-West-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"horse\", language: \"English (GB)\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n\t\t\t\t\t]\n\t\t\t\t},*/\n\t\t\t\t/*{   /!* One word, all cognates (same ancestor). TODO: Legend should detail the ancestors *!/\n\t\t\t\t\ttype: \"cognate\",\n\t\t\t\t\theader: {word: \"palfrey\", language: \"English (GB)\"},\n\t\t\t\t\twords: [\n\t\t\t\t\t\t{word: \"palfrey\", language: \"English (GB)\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"paard\", language: \"Dutch\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"Pferd\", language: \"German\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"Päerd\", language: \"Luxembourgish\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"פערד\", language: \"Yiddish\", colour: \"#f5b60d\"}\n\t\t\t\t\t]\n\t\t\t\t},*/\n\t\t\t\t\t// TODO: Multiple cognate collections at once (separate layers/patterned colours)\n\t\t\t\t/*{   /!* Multiple words, no shared countries. Demonstrates cognates of same English word across different families/languages. *!/\n\t\t\t\t\ttype: \"cognate\",\n\t\t\t\t\theader: {word: \"smith\", language: \"English (GB)\"},\n\t\t\t\t\twords: [\n\t\t\t\t\t\t{word: \"smith\", language: \"English (GB)\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smid\", language: \"Dutch\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"Schmidt\", language: \"German\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smed\", language: \"Danish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smed\", language: \"Norwegian\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smed\", language: \"Swedish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smiður\", language: \"Icelandic\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"forgeron\", language: \"French\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"fabbro\", language: \"Italian\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"Kovář\", language: \"Czech\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"kováč\", language: \"Slovak\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"kowal\", language: \"Polish\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}}\n\t\t\t\t\t]\n\t\t\t\t}*/\n\t\t\t],\n\t\t\tmapRenderCounter: 0\n\t\t};\n\n\t\tthis.flattenTree = this.flattenTree.bind(this);\n\t\tthis.openModal = this.openModal.bind(this);\n\t\tthis.closeModal = this.closeModal.bind(this);\n\t\tthis.openContextMenu = this.openContextMenu.bind(this);\n\t\tthis.closeContextMenu = this.closeContextMenu.bind(this);\n\t\tthis.addCollection = this.addCollection.bind(this);\n\t\tthis.editCollection = this.editCollection.bind(this);\n\t\tthis.addNode = this.addNode.bind(this);\n\t\tthis.addNodeDefault = this.addNodeDefault.bind(this);\n\t\tthis.editNode = this.editNode.bind(this);\n\t\tthis.removeNode = this.removeNode.bind(this);\n\t\tthis.removeCollection = this.removeCollection.bind(this);\n\t}\n\n\tflattenTree(wordArray, node)\n\t{\n\t\tif(node.parents)\n\t\t{\n\t\t\tfor(let j = 0; j < node.parents.length; ++j)\n\t\t\t{\n\t\t\t\twordArray = this.flattenTree(wordArray, node.parents[j]);\n\t\t\t}\n\t\t}\n\n\t\tnode.arrayIndex = wordArray.length;\n\t\twordArray.push(node);\n\t\treturn wordArray;\n\t}\n\n\tcomponentDidMount()\n\t{\n\t\t// TODO: Temporary; same operation will be performed on incoming data from API\n\n\t\tlet testJourney =\n\t\t\t{\n\t\t\t\ttype: \"journey\",\n\t\t\t\theader: {word: \"Pferd\", language: \"German\"},\n\t\t\t\twords: [\n\t\t\t\t\t{id: 1, word: \"Pferd\", language: \"German\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t{id: 2, word: \"pfarifrit\", language: \"Old High German\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t{id: 4, word: \"paraveredus\", language: \"Latin\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t{id: 6, word: \"veredus\", language: \"Latin\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 8, word: \"werēdos\", language: \"Gaulish\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 10, word: \"uɸorēdos\", language: \"Proto-Celtic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 12, word: \"uɸo\", language: \"Proto-Celtic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 14, word: \"upo\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: []}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 13, word: \"rēdos\", language: \"Proto-Celtic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t\t\t{id: 5, word: \"paraveredus\", language: \"Late Latin\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t{id: 7, word: \"παρά\", language: \"Ancient Greek\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 9, word: \"preh₂-\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 11, word: \"per-\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t{id: 3, word: \"pferift\", language: \"Middle High German\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n\t\t\t\t\t\t]}\n\t\t\t\t]\n\t\t\t};\n\n\t\tif(this.state.collections.length <= 0)\n\t\t{\n\t\t\tlet newCollections = [];\n\t\t\tlet journeyWords = [];\n\t\t\tjourneyWords = this.flattenTree(journeyWords, testJourney.words[0]);\n\t\t\ttestJourney.words = journeyWords;\n\t\t\tnewCollections.push(testJourney);\n\t\t\tthis.setState({collections: newCollections}, (e) => {console.log(this.state.collections)});\n\t\t}\n\t}\n\n\topenModal(e, modalComponent)\n\t{\n\t\tthis.setState({\n\t\t\tactiveModal: modalComponent\n\t\t});\n\t}\n\tcloseModal()\n\t{\n\t\tif(this.state.activeModal)\n\t\t{\n\t\t\tthis.setState({\n\t\t\t\tactiveModal: null\n\t\t\t});\n\t\t}\n\t}\n\topenContextMenu(e, menuComponent)\n\t{\n\t\tthis.setState({\n\t\t\tactiveContextMenu: menuComponent\n\t\t});\n\t}\n\tcloseContextMenu()\n\t{\n\t\tthis.setState({\n\t\t\tactiveContextMenu: null\n\t\t});\n\t}\n\n\taddNode(e, collectionIndex, indexChain, newNode)\n\t{\n\t\t// Data validation\n\t\tlet errorCollector = \"\";\n\t\tif(this.state.collections[collectionIndex].type === \"cognate\")\n\t\t{\n\t\t\t// Check for existing language\n\t\t\tfor(let i = 0; i < this.state.collections[collectionIndex].words.length; ++i)\n\t\t\t{\n\t\t\t\tlet childNode = this.state.collections[collectionIndex].words[i];\n\t\t\t\tif(childNode.language === newNode.language)\n\t\t\t\t{\n\t\t\t\t\terrorCollector += \"A language may only have one word per cognate collection.\\n\" +\n\t\t\t\t\t\t\t\t\t  \"Additional cognate collections may re-use languages in other cognate collections.\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error message with toast\n\t\telse\n\t\t{\n\t\t\t// Insert new node\n\t\t\tlet newCollections = this.state.collections;\n\t\t\tindexChain = indexChain.split(\"->\"); // Note: indexes are returned as strings, but JS doesn't seem to mind\n\n\t\t\t// Find node via index chain\n\t\t\tlet node = newCollections[collectionIndex].words[indexChain[0]]; // Beginning of chain is always 0\n\t\t\tfor(let i = 1; i < indexChain.length; ++i)\n\t\t\t{\n\t\t\t\tnode = node.parents[indexChain[i]];\n\t\t\t}\n\n\t\t\tthis.setState({collections: newCollections}, this.closeModal);\n\t\t}\n\t}\n\taddNodeDefault(e, data)\n\t{\n\t\t// Create new child node\n\t\tlet newChildNode;\n\t\tif(data.type === \"journey\")\n\t\t{\n\t\t\tnewChildNode = {word: \"word\", language: \"language\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}};\n\t\t}\n\t\telse if(data.type === \"cognate\")\n\t\t{\n\t\t\tnewChildNode = {word: \"word\", language: \"language\", colour: \"#000000\", label: {type: \"language\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}};\n\t\t}\n\t\tlet newCollections = this.state.collections;\n\t\tnewCollections[data.collectionIndex].words.push(newChildNode); // Data contains parent Journey component's index (its location in this.state.collections array)\n\n\t\tthis.setState({collections: newCollections}, this.closeModal);\n\t}\n\n\t/**\n\t * Updates the state's collections array with updated node\n\t * @param e React SyntheticEvent\n\t * @param collectionIndex Index of collection to which the node belongs\n\t * @param indexChain Index chain to find node within the specified collection\n\t * @param updatedNode The updated node to be set in the collections array\n\t */\n\teditNode(e, collectionIndex, updatedNode)\n\t{\n\t\tlet newCollections = this.state.collections;\n\n\t\t// Find node via index chain\n\t\tlet node = newCollections[collectionIndex].words[updatedNode.arrayIndex];\n\n\t\t// Update node by reference\n\t\tfor(let index in updatedNode)\n\t\t\tif(node[index]) node[index] = updatedNode[index];\n\n\t\tthis.setState({collections: newCollections}, () => {\n\t\t\tconsole.log(\"Post-edit collections: \");\n\t\t\tconsole.log(this.state.collections);\n\t\t\tthis.closeModal();\n\t\t});\n\t}\n\tremoveNode(e, collectionIndex, indexChain)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tindexChain = indexChain.split(\"->\"); // Note: indexes are returned as strings, but JS doesn't seem to mind\n\n\t\t// Find node via index chain\n\t\tlet node = newCollections[collectionIndex].words[indexChain[0]]; // Beginning of chain is always 0\n\t\tfor(let i = 1; i < indexChain.length; ++i)\n\t\t{\n\t\t\tif(i+1 === indexChain.length) // End of chain == node to delete\n\t\t\t{\n\t\t\t\tlet confirmed = false;\n\t\t\t\tif(node.parents[indexChain[i]].parents)\n\t\t\t\t\tconfirmed = window.confirm(\"Warning: this node has \"+node.parents[indexChain[i]].parents.length+\" parent nodes that will be deleted as well. Do you still wish to delete?\");\n\t\t\t\telse\n\t\t\t\t\tconfirmed = window.confirm(\"Are you sure you wish to delete this node?\")\n\n\t\t\t\tif(confirmed)\n\t\t\t\t\tnode.parents.splice(indexChain[i], 1); // Delete by reference\n\t\t\t}\n\t\t\telse\n\t\t\t\tnode = node.parents[indexChain[i]];\n\t\t}\n\n\t\tthis.setState({collections: newCollections}, this.closeModal);\n\t}\n\n\taddCollection(e, data)\n\t{\n\t\tif(data.type === \"Cognates\") data.type = \"cognate\";\n\t\telse if(data.type === \"Historical journey\") data.type = \"journey\";\n\n\t\t// Data validation\n\t\t// TODO: For cognates, only one cognate per language should be allowed\n\t\t//  - Future feature: for additional cognate collections, change solid colours to patterns of the specified colours instead (e.g. stripes; checks)\n\t\tlet errorCollector = \"\";\n\t\tif(data.header.word === null || data.header.word.length <= 0)\n\t\t\terrorCollector += \"You must enter a word.\\n\";\n\t\tif(data.header.language === null || data.header.language.length <= 0)\n\t\t\terrorCollector += \"You must enter a language.\\n\";\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error handling with toast\n\t\telse\n\t\t{\n\t\t\tlet newCollections = this.state.collections;\n\t\t\tnewCollections.push({type: data.type, header: data.header, words: []});\n\t\t\tthis.setState( {collections: newCollections}, this.closeModal);\n\t\t}\n\t}\n\teditCollection(e, data)\n\t{\n\t\tif(data.type === \"Cognates\") data.type = \"cognate\";\n\t\telse if(data.type === \"Historical journey\") data.type = \"journey\";\n\n\t\t// Data validation\n\t\tlet errorCollector = \"\";\n\t\tif(data.header.word === null || data.header.word.length <= 0)\n\t\t\terrorCollector += \"You must enter a word.\\n\";\n\t\tif(data.header.language === null || data.header.language.length <= 0)\n\t\t\terrorCollector += \"You must enter a language.\\n\";\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error handling with toast\n\t\telse\n\t\t{\n\t\t\tlet newCollections = this.state.collections;\n\t\t\tnewCollections[data.index].type = data.type;\n\t\t\tnewCollections[data.index].header = data.header;\n\t\t\tthis.setState({collections: newCollections, mapRenderCounter: this.state.mapRenderCounter+1}, this.closeModal);\n\t\t}\n\t}\n\tremoveCollection(e, collectionIndex)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tnewCollections.splice(collectionIndex, 1);\n\t\tthis.setState({collections: newCollections}, function()\n\t\t{\n\t\t\tconsole.log(this.state);\n\t\t});\n\t}\n\n\n\trender()\n\t{\n\t\tlet modalContainer = null, contextMenuContainer = null;\n\t\tif(this.state.activeModal !== null)\n\t\t{\n\t\t\tlet activeModal = this.state.activeModal;\n\t\t\tmodalContainer = <div className={\"modal-container\"} onClick={(e) =>\n\t\t\t{\n\t\t\t\tif(e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n\t\t\t}}>{activeModal}</div>;\n\t\t}\n\t\tif(this.state.activeContextMenu !== null)\n\t\t{\n\t\t\tlet activeContextMenu = this.state.activeContextMenu;\n\t\t\tcontextMenuContainer =\n\t\t\t\t<div className={\"context-menu-container\"} onClick={this.closeContextMenu}>{activeContextMenu}</div>;\n\t\t}\n\n\t\t//console.log(this.state.collections);\n\n\t\treturn (\n\t\t\t<div className=\"Lema\">\n\t\t\t\t<Banner/>\n\t\t\t\t<div className={\"main-view-container\"}>\n\t\t\t\t\t<LeftBar collections={this.state.collections}\n\t\t\t\t\t         openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t         openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t         addNode={this.addNode} addNodeDefault={this.addNodeDefault} editNode={this.editNode} editNodeColour={this.editNodeColour} removeNode={this.removeNode}\n\t\t\t\t\t         addCollection={this.addCollection} editCollection={this.editCollection} removeCollection={this.removeCollection}\n\t\t\t\t\t/>\n\t\t\t\t\t<Map collections={this.state.collections} mapRenderCounter={this.state.mapRenderCounter}\n\t\t\t\t\t     openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t     openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t\t addNode={this.addNode} editNode={this.editNode} editNodeColour={this.editNodeColour} removeNode={this.removeNode}  />\n\t\t\t\t</div>\n\t\t\t\t{modalContainer}\n\t\t\t\t{contextMenuContainer}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Lema;\n"]},"metadata":{},"sourceType":"module"}