{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\Lema.js\";\nimport \"./css/Lema.css\";\nimport { Component } from \"react\";\nimport { Banner } from \"./components/Banner\";\nimport { LeftBar } from \"./components/LeftBar\";\nimport { Map } from \"./components/Map\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Lema extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeModal: null,\n      // Either null or a React component\n      activeContextMenu: null,\n      // Either null or a React component\n      mapRef: null,\n      collections: [\n      /*{\n      \ttype: \"journey\",\n      \theader: {word: \"horse\", language: \"English (GB)\"},\n      \twords: [\n      \t\t{word: \"kers\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n      \t\t{word: \"krsos\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n      \t\t{word: \"hrussa\", language: \"Proto-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n      \t\t{word: \"hross\", language: \"Proto-West-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n      \t\t{word: \"horse\", language: \"English (GB)\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n      \t]\n      },*/\n      {\n        type: \"journey\",\n        header: {\n          word: \"Pferd\",\n          language: \"German\"\n        },\n        words: [{\n          id: 1,\n          word: \"Pferd\",\n          language: \"German\",\n          colour: \"#000000\",\n          vertex: {\n            type: \"word\",\n            strokeColour: \"#000000\",\n            fillColour: \"#FFFFFF\",\n            radius: null,\n            fontSize: null,\n            x: null,\n            y: null,\n            edgeStart: \"centre\",\n            edgeEnd: \"centre\"\n          },\n          parents: [{\n            id: 2,\n            word: \"pfarifrit\",\n            language: \"Old High German\",\n            colour: \"#000000\",\n            vertex: {\n              type: \"word\",\n              strokeColour: \"#000000\",\n              fillColour: \"#FFFFFF\",\n              radius: null,\n              fontSize: null,\n              x: null,\n              y: null,\n              edgeStart: \"centre\",\n              edgeEnd: \"centre\"\n            },\n            parents: [{\n              id: 4,\n              word: \"paraveredus\",\n              language: \"Latin\",\n              colour: \"#000000\",\n              vertex: {\n                type: \"word\",\n                strokeColour: \"#000000\",\n                fillColour: \"#FFFFFF\",\n                radius: null,\n                fontSize: null,\n                x: null,\n                y: null,\n                edgeStart: \"centre\",\n                edgeEnd: \"centre\"\n              },\n              parents: [{\n                id: 6,\n                word: \"veredus\",\n                language: \"Latin\",\n                colour: \"#000000\",\n                vertex: {\n                  type: \"word\",\n                  strokeColour: \"#000000\",\n                  fillColour: \"#FFFFFF\",\n                  radius: null,\n                  fontSize: null,\n                  x: null,\n                  y: null,\n                  edgeStart: \"centre\",\n                  edgeEnd: \"centre\"\n                },\n                parents: [{\n                  id: 8,\n                  word: \"werēdos\",\n                  language: \"Gaulish\",\n                  colour: \"#000000\",\n                  vertex: {\n                    type: \"word\",\n                    strokeColour: \"#000000\",\n                    fillColour: \"#FFFFFF\",\n                    radius: null,\n                    fontSize: null,\n                    x: null,\n                    y: null,\n                    edgeStart: \"centre\",\n                    edgeEnd: \"centre\"\n                  },\n                  parents: [{\n                    id: 10,\n                    word: \"uɸorēdos\",\n                    language: \"Proto-Celtic\",\n                    colour: \"#000000\",\n                    vertex: {\n                      type: \"word\",\n                      strokeColour: \"#000000\",\n                      fillColour: \"#FFFFFF\",\n                      radius: null,\n                      fontSize: null,\n                      x: null,\n                      y: null,\n                      edgeStart: \"centre\",\n                      edgeEnd: \"centre\"\n                    },\n                    parents: [{\n                      id: 12,\n                      word: \"uɸo\",\n                      language: \"Proto-Celtic\",\n                      colour: \"#000000\",\n                      vertex: {\n                        type: \"word\",\n                        strokeColour: \"#000000\",\n                        fillColour: \"#FFFFFF\",\n                        radius: null,\n                        fontSize: null,\n                        x: null,\n                        y: null,\n                        edgeStart: \"centre\",\n                        edgeEnd: \"centre\"\n                      },\n                      parents: [{\n                        id: 14,\n                        word: \"upo\",\n                        language: \"Proto-Indo-European\",\n                        colour: \"#000000\",\n                        vertex: {\n                          type: \"word\",\n                          strokeColour: \"#000000\",\n                          fillColour: \"#FFFFFF\",\n                          radius: null,\n                          fontSize: null,\n                          x: null,\n                          y: null,\n                          edgeStart: \"centre\",\n                          edgeEnd: \"centre\"\n                        }\n                      }]\n                    }, {\n                      id: 13,\n                      word: \"rēdos\",\n                      language: \"Proto-Celtic\",\n                      colour: \"#000000\",\n                      vertex: {\n                        type: \"word\",\n                        strokeColour: \"#000000\",\n                        fillColour: \"#FFFFFF\",\n                        radius: null,\n                        fontSize: null,\n                        x: null,\n                        y: null,\n                        edgeStart: \"centre\",\n                        edgeEnd: \"centre\"\n                      }\n                    }]\n                  }]\n                }]\n              }]\n            }, {\n              id: 5,\n              word: \"paraveredus\",\n              language: \"Late Latin\",\n              colour: \"#000000\",\n              vertex: {\n                type: \"word\",\n                strokeColour: \"#000000\",\n                fillColour: \"#FFFFFF\",\n                radius: null,\n                fontSize: null,\n                x: null,\n                y: null,\n                edgeStart: \"centre\",\n                edgeEnd: \"centre\"\n              },\n              parents: [{\n                id: 7,\n                word: \"παρά\",\n                language: \"Ancient Greek\",\n                colour: \"#000000\",\n                vertex: {\n                  type: \"word\",\n                  strokeColour: \"#000000\",\n                  fillColour: \"#FFFFFF\",\n                  radius: null,\n                  fontSize: null,\n                  x: null,\n                  y: null,\n                  edgeStart: \"centre\",\n                  edgeEnd: \"centre\"\n                },\n                parents: [{\n                  id: 9,\n                  word: \"preh₂-\",\n                  language: \"Proto-Indo-European\",\n                  colour: \"#000000\",\n                  vertex: {\n                    type: \"word\",\n                    strokeColour: \"#000000\",\n                    fillColour: \"#FFFFFF\",\n                    radius: null,\n                    fontSize: null,\n                    x: null,\n                    y: null,\n                    edgeStart: \"centre\",\n                    edgeEnd: \"centre\"\n                  },\n                  parents: [{\n                    id: 11,\n                    word: \"per-\",\n                    language: \"Proto-Indo-European\",\n                    colour: \"#000000\",\n                    vertex: {\n                      type: \"word\",\n                      strokeColour: \"#000000\",\n                      fillColour: \"#FFFFFF\",\n                      radius: null,\n                      fontSize: null,\n                      x: null,\n                      y: null,\n                      edgeStart: \"centre\",\n                      edgeEnd: \"centre\"\n                    }\n                  }]\n                }]\n              }]\n            }]\n          }, {\n            id: 3,\n            word: \"pferift\",\n            language: \"Middle High German\",\n            colour: \"#000000\",\n            vertex: {\n              type: \"word\",\n              strokeColour: \"#000000\",\n              fillColour: \"#FFFFFF\",\n              radius: null,\n              fontSize: null,\n              x: null,\n              y: null,\n              edgeStart: \"centre\",\n              edgeEnd: \"centre\"\n            }\n          }]\n        }]\n      }\n      /*{   /!* One word, all cognates (same ancestor). TODO: Legend should detail the ancestors *!/\n      \ttype: \"cognate\",\n      \theader: {word: \"palfrey\", language: \"English (GB)\"},\n      \twords: [\n      \t\t{word: \"palfrey\", language: \"English (GB)\", colour: \"#f5b60d\"},\n      \t\t{word: \"paard\", language: \"Dutch\", colour: \"#f5b60d\"},\n      \t\t{word: \"Pferd\", language: \"German\", colour: \"#f5b60d\"},\n      \t\t{word: \"Päerd\", language: \"Luxembourgish\", colour: \"#f5b60d\"},\n      \t\t{word: \"פערד\", language: \"Yiddish\", colour: \"#f5b60d\"}\n      \t]\n      },*/\n      // TODO: Multiple cognate collections at once (separate layers/patterned colours)\n\n      /*{   /!* Multiple words, no shared countries. Demonstrates cognates of same English word across different families/languages. *!/\n      \ttype: \"cognate\",\n      \theader: {word: \"smith\", language: \"English (GB)\"},\n      \twords: [\n      \t\t{word: \"smith\", language: \"English (GB)\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n      \t\t{word: \"smid\", language: \"Dutch\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n      \t\t{word: \"Schmidt\", language: \"German\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n      \t\t{word: \"smed\", language: \"Danish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n      \t\t{word: \"smed\", language: \"Norwegian\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n      \t\t{word: \"smed\", language: \"Swedish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n      \t\t{word: \"smiður\", language: \"Icelandic\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n      \t\t{word: \"forgeron\", language: \"French\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n      \t\t{word: \"fabbro\", language: \"Italian\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n      \t\t{word: \"Kovář\", language: \"Czech\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n      \t\t{word: \"kováč\", language: \"Slovak\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n      \t\t{word: \"kowal\", language: \"Polish\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}}\n      \t]\n      }*/\n      ],\n      mapRenderCounter: 0\n    };\n    this.assignIndexChains = this.assignIndexChains.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.openContextMenu = this.openContextMenu.bind(this);\n    this.closeContextMenu = this.closeContextMenu.bind(this);\n    this.addCollection = this.addCollection.bind(this);\n    this.editCollection = this.editCollection.bind(this);\n    this.addNode = this.addNode.bind(this);\n    this.addNodeDefault = this.addNodeDefault.bind(this);\n    this.editNode = this.editNode.bind(this);\n    this.removeNode = this.removeNode.bind(this);\n    this.moveLabel = this.moveLabel.bind(this);\n    this.moveVertex = this.moveVertex.bind(this);\n    this.removeCollection = this.removeCollection.bind(this);\n  }\n\n  componentWillMount() {\n    console.log(this.state);\n    let newCollections = this.state.collections;\n\n    for (let i = 0; i < newCollections.length; ++i) this.assignIndexChains(newCollections[i].words[0], 0, \"\", i);\n\n    this.setState({\n      collections: newCollections\n    }, e => {\n      console.log(this.state.collections);\n    });\n  }\n\n  openModal(e, modalComponent) {\n    this.setState({\n      activeModal: modalComponent\n    });\n  }\n\n  closeModal() {\n    this.setState({\n      activeModal: null\n    });\n  }\n\n  openContextMenu(e, menuComponent) {\n    this.setState({\n      activeContextMenu: menuComponent\n    });\n  }\n\n  closeContextMenu() {\n    this.setState({\n      activeContextMenu: null\n    });\n  }\n\n  addNode(e, data) {\n    // Data validation\n    let errorCollector = \"\";\n    if (data.word === null || data.word.length <= 0) errorCollector += \"You must enter a word.\\n\";\n    if (data.language === null || data.language.length <= 0) errorCollector += \"You must enter a language.\\n\";\n\n    if (this.state.collections[data.collectionIndex].type === \"cognate\") {\n      // Check for existing language\n      for (let i = 0; i < this.state.collections[data.collectionIndex].words.length; ++i) {\n        let childNode = this.state.collections[data.collectionIndex].words[i];\n\n        if (childNode.language === data.language) {\n          errorCollector += \"A language may only have one word per cognate collection.\\n\" + \"Additional cognate collections may re-use languages in other cognate collections.\";\n          break;\n        }\n      }\n    }\n\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error message with toast\n    else {\n      // Create new child node\n      let newChildNode = {\n        word: data.word,\n        language: data.language\n      };\n      let newCollections = this.state.collections;\n      newCollections[data.collectionIndex].words.push(newChildNode); // Data contains parent Journey component's index (its location in this.state.collections array)\n\n      this.setState({\n        collections: newCollections\n      }, this.closeModal);\n    }\n  }\n\n  addNodeDefault(e, data) {\n    // Create new child node\n    let newChildNode;\n\n    if (data.type === \"journey\") {\n      newChildNode = {\n        word: \"word\",\n        language: \"language\",\n        colour: \"#000000\",\n        vertex: {\n          type: \"word\",\n          strokeColour: \"#000000\",\n          fillColour: \"#FFFFFF\",\n          radius: null,\n          fontSize: null,\n          x: null,\n          y: null,\n          edgeStart: \"centre\",\n          edgeEnd: \"centre\"\n        }\n      };\n    } else if (data.type === \"cognate\") {\n      newChildNode = {\n        word: \"word\",\n        language: \"language\",\n        colour: \"#000000\",\n        label: {\n          type: \"language\",\n          customText: \"\",\n          fontColour: \"#000000\",\n          fontSize: null,\n          x: null,\n          y: null\n        }\n      };\n    }\n\n    let newCollections = this.state.collections;\n    newCollections[data.collectionIndex].words.push(newChildNode); // Data contains parent Journey component's index (its location in this.state.collections array)\n\n    this.setState({\n      collections: newCollections\n    }, this.closeModal);\n  }\n  /**\n   * Updates the state's collections array with updated node\n   * @param e React SyntheticEvent\n   * @param collectionIndex Index of collection to which the node belongs\n   * @param indexChain Index chain to find node within the specified collection\n   * @param updatedNode The updated node to be set in the collections array\n   */\n\n\n  editNode(e, collectionIndex, indexChain, updatedNode) {\n    let newCollections = this.state.collections;\n    indexChain = indexChain.split(\"->\"); // Note: indexes are returned as strings, but JS doesn't seem to mind\n    // Find node via index chain\n\n    let node = newCollections[collectionIndex].words[indexChain[0]]; // Beginning of chain is always 0\n\n    for (let i = 1; i < indexChain.length; ++i) {\n      if (i + 1 === indexChain.length) // End of chain == node to update\n        node.parents[indexChain[i]] = updatedNode; // Update node by reference\n      else node = node.parents[indexChain[i]];\n    }\n\n    this.setState({\n      collections: newCollections\n    }, () => {\n      console.log(this.state.collections);\n      this.closeModal();\n    });\n  }\n\n  removeNode(e, collectionIndex, indexChain) {\n    let newCollections = this.state.collections;\n    indexChain = indexChain.split(\"->\"); // Note: indexes are returned as strings, but JS doesn't seem to mind\n    // Find node via index chain\n\n    let node = newCollections[collectionIndex].words[indexChain[0]]; // Beginning of chain is always 0\n\n    for (let i = 1; i < indexChain.length; ++i) {\n      if (i + 1 === indexChain.length) // End of chain == node to delete\n        {\n          let confirmed = false;\n          if (node.parents[indexChain[i]].parents) confirmed = window.confirm(\"Warning: this node has \" + node.parents[indexChain[i]].parents.length + \" parent nodes that will be deleted as well. Do you still wish to delete?\");else confirmed = window.confirm(\"Are you sure you wish to delete this node?\");\n          if (confirmed) node.parents.splice(indexChain[i], 1); // Delete by reference\n        } else node = node.parents[indexChain[i]];\n    }\n\n    this.setState({\n      collections: newCollections\n    }, this.closeModal);\n  }\n\n  moveLabel(collectionIndex, indexChain, x, y) {\n    let fontSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let newCollections = this.state.collections;\n    indexChain = indexChain.split(\"->\"); // Note: indexes are returned as strings, but JS doesn't seem to mind\n    // Find node via index chain\n\n    let node = newCollections[collectionIndex].words[indexChain[0]]; // Beginning of chain is always 0\n\n    for (let i = 1; i < indexChain.length; ++i) {\n      if (i + 1 === indexChain.length) node.parents[indexChain[i]] = node;else node = node.parents[indexChain[i]];\n    }\n\n    this.setState({\n      collections: newCollections\n    });\n  }\n\n  moveVertex(collectionIndex, indexChain, x, y) {\n    let radius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let fontSize = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    let newCollections = this.state.collections;\n    indexChain = indexChain.split(\"->\"); // Note: indexes are returned as strings, but JS doesn't seem to mind\n    // Find node via index chain\n\n    let node = newCollections[collectionIndex].words[indexChain[0]]; // Beginning of chain is always 0\n\n    for (let i = 1; i < indexChain.length; ++i) {\n      if (i + 1 === indexChain.length) node.parents[indexChain[i]] = node;else node = node.parents[indexChain[i]];\n    }\n\n    this.setState({\n      collections: newCollections\n    });\n  }\n\n  addCollection(e, data) {\n    if (data.type === \"Cognates\") data.type = \"cognate\";else if (data.type === \"Historical journey\") data.type = \"journey\"; // Data validation\n    // TODO: For cognates, only one cognate per language should be allowed\n    //  - Future feature: for additional cognate collections, change solid colours to patterns of the specified colours instead (e.g. stripes; checks)\n\n    let errorCollector = \"\";\n    if (data.header.word === null || data.header.word.length <= 0) errorCollector += \"You must enter a word.\\n\";\n    if (data.header.language === null || data.header.language.length <= 0) errorCollector += \"You must enter a language.\\n\";\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error handling with toast\n    else {\n      let newCollections = this.state.collections;\n      newCollections.push({\n        type: data.type,\n        header: data.header,\n        words: []\n      });\n      this.setState({\n        collections: newCollections\n      }, this.closeModal);\n    }\n  }\n\n  editCollection(e, data) {\n    if (data.type === \"Cognates\") data.type = \"cognate\";else if (data.type === \"Historical journey\") data.type = \"journey\"; // Data validation\n\n    let errorCollector = \"\";\n    if (data.header.word === null || data.header.word.length <= 0) errorCollector += \"You must enter a word.\\n\";\n    if (data.header.language === null || data.header.language.length <= 0) errorCollector += \"You must enter a language.\\n\";\n    if (errorCollector.length > 0) alert(errorCollector); // TODO: Proper error handling with toast\n    else {\n      let newCollections = this.state.collections;\n      newCollections[data.index].type = data.type;\n      newCollections[data.index].header = data.header;\n      this.setState({\n        collections: newCollections,\n        mapRenderCounter: this.state.mapRenderCounter + 1\n      }, this.closeModal);\n    }\n  }\n\n  removeCollection(e, collectionIndex) {\n    let newCollections = this.state.collections;\n    newCollections.splice(collectionIndex, 1);\n    this.setState({\n      collections: newCollections\n    }, function () {\n      console.log(this.state);\n    });\n  }\n  /**\n   * Recursive algorithm that adds an index chain to each node in a collection\n   * @param {*} node The currently worked-on node for this depth level\n   * @param {number} i The index of the currently worked-on node\n   * @param {string} indexChain The chain of indexes required to get to the node (e.g. this.props.words[0].parents[1].parents[4] would have a chain of 0,1,4)\n   * @param {number} collectionIndex The index of the collection that the node belongs to\n   */\n\n\n  assignIndexChains(node, i, indexChain, collectionIndex) {\n    indexChain += String(i);\n\n    if (node.parents) {\n      for (let j = 0; j < node.parents.length; ++j) {\n        this.assignIndexChains(node.parents[j], j, indexChain + \"->\", collectionIndex);\n      }\n    }\n\n    node.indexChain = indexChain;\n  }\n\n  render() {\n    let modalContainer = null,\n        contextMenuContainer = null;\n\n    if (this.state.activeModal !== null) {\n      let activeModal = this.state.activeModal;\n      modalContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-container\",\n        onClick: e => {\n          if (e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n        },\n        children: activeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 21\n      }, this);\n    }\n\n    if (this.state.activeContextMenu !== null) {\n      let activeContextMenu = this.state.activeContextMenu;\n      contextMenuContainer = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"context-menu-container\",\n        onClick: this.closeContextMenu,\n        children: activeContextMenu\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 5\n      }, this);\n    }\n\n    console.log(this.state.collections);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Lema\",\n      children: [/*#__PURE__*/_jsxDEV(Banner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-view-container\",\n        children: [/*#__PURE__*/_jsxDEV(LeftBar, {\n          collections: this.state.collections,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          addNode: this.addNode,\n          addNodeDefault: this.addNodeDefault,\n          editNode: this.editNode,\n          editNodeColour: this.editNodeColour,\n          removeNode: this.removeNode,\n          addCollection: this.addCollection,\n          editCollection: this.editCollection,\n          removeCollection: this.removeCollection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Map, {\n          collections: this.state.collections,\n          mapRenderCounter: this.state.mapRenderCounter,\n          openContextMenu: this.openContextMenu,\n          closeContextMenu: this.closeContextMenu,\n          openModal: this.openModal,\n          closeModal: this.closeModal,\n          moveLabel: this.moveLabel,\n          moveVertex: this.moveVertex,\n          addNode: this.addNode,\n          editNode: this.editNode,\n          editNodeColour: this.editNodeColour,\n          removeNode: this.removeNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 5\n      }, this), modalContainer, contextMenuContainer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Lema;","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/Lema.js"],"names":["Component","Banner","LeftBar","Map","Lema","constructor","props","state","activeModal","activeContextMenu","mapRef","collections","type","header","word","language","words","id","colour","vertex","strokeColour","fillColour","radius","fontSize","x","y","edgeStart","edgeEnd","parents","mapRenderCounter","assignIndexChains","bind","openModal","closeModal","openContextMenu","closeContextMenu","addCollection","editCollection","addNode","addNodeDefault","editNode","removeNode","moveLabel","moveVertex","removeCollection","componentWillMount","console","log","newCollections","i","length","setState","e","modalComponent","menuComponent","data","errorCollector","collectionIndex","childNode","alert","newChildNode","push","label","customText","fontColour","indexChain","updatedNode","split","node","confirmed","window","confirm","splice","index","String","j","render","modalContainer","contextMenuContainer","nativeEvent","target","className","editNodeColour"],"mappings":"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","sourcesContent":["import \"./css/Lema.css\";\nimport {Component} from \"react\";\nimport {Banner} from \"./components/Banner\";\nimport {LeftBar} from \"./components/LeftBar\";\nimport {Map} from \"./components/Map\";\n\nclass Lema extends Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tactiveModal: null, // Either null or a React component\n\t\t\tactiveContextMenu: null, // Either null or a React component\n\t\t\tmapRef: null,\n\t\t\tcollections: [\n\n\t\t\t\t/*{\n\t\t\t\t\ttype: \"journey\",\n\t\t\t\t\theader: {word: \"horse\", language: \"English (GB)\"},\n\t\t\t\t\twords: [\n\t\t\t\t\t\t{word: \"kers\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"krsos\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"hrussa\", language: \"Proto-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"hross\", language: \"Proto-West-Germanic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}},\n\t\t\t\t\t\t{word: \"horse\", language: \"English (GB)\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n\t\t\t\t\t]\n\t\t\t\t},*/\n\t\t\t\t{\n\t\t\t\t\ttype: \"journey\",\n\t\t\t\t\theader: {word: \"Pferd\", language: \"German\"},\n\t\t\t\t\twords: [\n\t\t\t\t\t\t{id: 1, word: \"Pferd\", language: \"German\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t{id: 2, word: \"pfarifrit\", language: \"Old High German\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t{id: 4, word: \"paraveredus\", language: \"Latin\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t{id: 6, word: \"veredus\", language: \"Latin\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 8, word: \"werēdos\", language: \"Gaulish\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 10, word: \"uɸorēdos\", language: \"Proto-Celtic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 12, word: \"uɸo\", language: \"Proto-Celtic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 14, word: \"upo\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 13, word: \"rēdos\", language: \"Proto-Celtic\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t\t\t\t{id: 5, word: \"paraveredus\", language: \"Late Latin\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t{id: 7, word: \"παρά\", language: \"Ancient Greek\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 9, word: \"preh₂-\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}, parents: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{id: 11, word: \"per-\", language: \"Proto-Indo-European\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\t]},\n\t\t\t\t\t\t\t\t{id: 3, word: \"pferift\", language: \"Middle High German\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}}\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t/*{   /!* One word, all cognates (same ancestor). TODO: Legend should detail the ancestors *!/\n\t\t\t\t\ttype: \"cognate\",\n\t\t\t\t\theader: {word: \"palfrey\", language: \"English (GB)\"},\n\t\t\t\t\twords: [\n\t\t\t\t\t\t{word: \"palfrey\", language: \"English (GB)\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"paard\", language: \"Dutch\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"Pferd\", language: \"German\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"Päerd\", language: \"Luxembourgish\", colour: \"#f5b60d\"},\n\t\t\t\t\t\t{word: \"פערד\", language: \"Yiddish\", colour: \"#f5b60d\"}\n\t\t\t\t\t]\n\t\t\t\t},*/\n\t\t\t\t\t// TODO: Multiple cognate collections at once (separate layers/patterned colours)\n\t\t\t\t/*{   /!* Multiple words, no shared countries. Demonstrates cognates of same English word across different families/languages. *!/\n\t\t\t\t\ttype: \"cognate\",\n\t\t\t\t\theader: {word: \"smith\", language: \"English (GB)\"},\n\t\t\t\t\twords: [\n\t\t\t\t\t\t{word: \"smith\", language: \"English (GB)\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smid\", language: \"Dutch\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"Schmidt\", language: \"German\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smed\", language: \"Danish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smed\", language: \"Norwegian\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smed\", language: \"Swedish\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"smiður\", language: \"Icelandic\", colour: \"#f5b60d\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"forgeron\", language: \"French\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"fabbro\", language: \"Italian\", colour: \"#0000ff\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"Kovář\", language: \"Czech\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"kováč\", language: \"Slovak\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}},\n\t\t\t\t\t\t{word: \"kowal\", language: \"Polish\", colour: \"#ff0000\", label: {type: \"country\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}}\n\t\t\t\t\t]\n\t\t\t\t}*/\n\t\t\t],\n\t\t\tmapRenderCounter: 0\n\t\t};\n\n\t\tthis.assignIndexChains = this.assignIndexChains.bind(this);\n\t\tthis.openModal = this.openModal.bind(this);\n\t\tthis.closeModal = this.closeModal.bind(this);\n\t\tthis.openContextMenu = this.openContextMenu.bind(this);\n\t\tthis.closeContextMenu = this.closeContextMenu.bind(this);\n\t\tthis.addCollection = this.addCollection.bind(this);\n\t\tthis.editCollection = this.editCollection.bind(this);\n\t\tthis.addNode = this.addNode.bind(this);\n\t\tthis.addNodeDefault = this.addNodeDefault.bind(this);\n\t\tthis.editNode = this.editNode.bind(this);\n\t\tthis.removeNode = this.removeNode.bind(this);\n\t\tthis.moveLabel = this.moveLabel.bind(this);\n\t\tthis.moveVertex = this.moveVertex.bind(this);\n\t\tthis.removeCollection = this.removeCollection.bind(this);\n\t}\n\n\tcomponentWillMount()\n\t{\n\t\tconsole.log(this.state);\n\t\tlet newCollections = this.state.collections;\n\t\tfor(let i = 0; i < newCollections.length; ++i)\n\t\t\tthis.assignIndexChains(newCollections[i].words[0], 0, \"\", i);\n\n\t\tthis.setState({collections: newCollections}, (e) => {\n\t\t\tconsole.log(this.state.collections);\n\t\t});\n\t}\n\n\topenModal(e, modalComponent)\n\t{\n\t\tthis.setState({\n\t\t\tactiveModal: modalComponent\n\t\t});\n\t}\n\tcloseModal()\n\t{\n\t\tthis.setState({\n\t\t\tactiveModal: null\n\t\t});\n\t}\n\topenContextMenu(e, menuComponent)\n\t{\n\t\tthis.setState({\n\t\t\tactiveContextMenu: menuComponent\n\t\t});\n\t}\n\tcloseContextMenu()\n\t{\n\t\tthis.setState({\n\t\t\tactiveContextMenu: null\n\t\t});\n\t}\n\n\taddNode(e, data)\n\t{\n\t\t// Data validation\n\t\tlet errorCollector = \"\";\n\t\tif(data.word === null || data.word.length <= 0)\n\t\t\terrorCollector += \"You must enter a word.\\n\";\n\t\tif(data.language === null || data.language.length <= 0)\n\t\t\terrorCollector += \"You must enter a language.\\n\";\n\t\tif(this.state.collections[data.collectionIndex].type === \"cognate\")\n\t\t{\n\t\t\t// Check for existing language\n\t\t\tfor(let i = 0; i < this.state.collections[data.collectionIndex].words.length; ++i)\n\t\t\t{\n\t\t\t\tlet childNode = this.state.collections[data.collectionIndex].words[i];\n\t\t\t\tif(childNode.language === data.language)\n\t\t\t\t{\n\t\t\t\t\terrorCollector += \"A language may only have one word per cognate collection.\\n\" +\n\t\t\t\t\t\t\t\t\t  \"Additional cognate collections may re-use languages in other cognate collections.\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error message with toast\n\t\telse\n\t\t{\n\t\t\t// Create new child node\n\t\t\tlet newChildNode = {word: data.word, language: data.language};\n\t\t\tlet newCollections = this.state.collections;\n\t\t\tnewCollections[data.collectionIndex].words.push(newChildNode); // Data contains parent Journey component's index (its location in this.state.collections array)\n\n\t\t\tthis.setState({collections: newCollections}, this.closeModal);\n\t\t}\n\t}\n\taddNodeDefault(e, data)\n\t{\n\t\t// Create new child node\n\t\tlet newChildNode;\n\t\tif(data.type === \"journey\")\n\t\t{\n\t\t\tnewChildNode = {word: \"word\", language: \"language\", colour: \"#000000\", vertex: {type: \"word\", strokeColour: \"#000000\", fillColour: \"#FFFFFF\", radius: null, fontSize: null, x: null, y: null, edgeStart: \"centre\", edgeEnd: \"centre\"}};\n\t\t}\n\t\telse if(data.type === \"cognate\")\n\t\t{\n\t\t\tnewChildNode = {word: \"word\", language: \"language\", colour: \"#000000\", label: {type: \"language\", customText: \"\", fontColour: \"#000000\", fontSize: null, x: null, y: null}};\n\t\t}\n\t\tlet newCollections = this.state.collections;\n\t\tnewCollections[data.collectionIndex].words.push(newChildNode); // Data contains parent Journey component's index (its location in this.state.collections array)\n\n\t\tthis.setState({collections: newCollections}, this.closeModal);\n\t}\n\n\t/**\n\t * Updates the state's collections array with updated node\n\t * @param e React SyntheticEvent\n\t * @param collectionIndex Index of collection to which the node belongs\n\t * @param indexChain Index chain to find node within the specified collection\n\t * @param updatedNode The updated node to be set in the collections array\n\t */\n\teditNode(e, collectionIndex, indexChain, updatedNode)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tindexChain = indexChain.split(\"->\"); // Note: indexes are returned as strings, but JS doesn't seem to mind\n\n\t\t// Find node via index chain\n\t\tlet node = newCollections[collectionIndex].words[indexChain[0]]; // Beginning of chain is always 0\n\t\tfor(let i = 1; i < indexChain.length; ++i)\n\t\t{\n\t\t\tif(i+1 === indexChain.length)                  // End of chain == node to update\n\t\t\t\tnode.parents[indexChain[i]] = updatedNode; // Update node by reference\n\t\t\telse\n\t\t\t\tnode = node.parents[indexChain[i]];\n\t\t}\n\n\t\tthis.setState({collections: newCollections}, () => {console.log(this.state.collections); this.closeModal();});\n\t}\n\tremoveNode(e, collectionIndex, indexChain)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tindexChain = indexChain.split(\"->\"); // Note: indexes are returned as strings, but JS doesn't seem to mind\n\n\t\t// Find node via index chain\n\t\tlet node = newCollections[collectionIndex].words[indexChain[0]]; // Beginning of chain is always 0\n\t\tfor(let i = 1; i < indexChain.length; ++i)\n\t\t{\n\t\t\tif(i+1 === indexChain.length) // End of chain == node to delete\n\t\t\t{\n\t\t\t\tlet confirmed = false;\n\t\t\t\tif(node.parents[indexChain[i]].parents)\n\t\t\t\t\tconfirmed = window.confirm(\"Warning: this node has \"+node.parents[indexChain[i]].parents.length+\" parent nodes that will be deleted as well. Do you still wish to delete?\");\n\t\t\t\telse\n\t\t\t\t\tconfirmed = window.confirm(\"Are you sure you wish to delete this node?\")\n\n\t\t\t\tif(confirmed)\n\t\t\t\t\tnode.parents.splice(indexChain[i], 1); // Delete by reference\n\t\t\t}\n\t\t\telse\n\t\t\t\tnode = node.parents[indexChain[i]];\n\t\t}\n\n\t\tthis.setState({collections: newCollections}, this.closeModal);\n\t}\n\tmoveLabel(collectionIndex, indexChain, x, y, fontSize = null)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tindexChain = indexChain.split(\"->\"); // Note: indexes are returned as strings, but JS doesn't seem to mind\n\n\t\t// Find node via index chain\n\t\tlet node = newCollections[collectionIndex].words[indexChain[0]]; // Beginning of chain is always 0\n\t\tfor(let i = 1; i < indexChain.length; ++i)\n\t\t{\n\t\t\tif(i+1 === indexChain.length)\n\t\t\t\tnode.parents[indexChain[i]] = node;\n\t\t\telse\n\t\t\t\tnode = node.parents[indexChain[i]];\n\t\t}\n\n\t\tthis.setState({collections: newCollections});\n\t}\n\tmoveVertex(collectionIndex, indexChain, x, y, radius = null, fontSize = null)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tindexChain = indexChain.split(\"->\"); // Note: indexes are returned as strings, but JS doesn't seem to mind\n\n\t\t// Find node via index chain\n\t\tlet node = newCollections[collectionIndex].words[indexChain[0]]; // Beginning of chain is always 0\n\t\tfor(let i = 1; i < indexChain.length; ++i)\n\t\t{\n\t\t\tif(i+1 === indexChain.length)\n\t\t\t\tnode.parents[indexChain[i]] = node;\n\t\t\telse\n\t\t\t\tnode = node.parents[indexChain[i]];\n\t\t}\n\n\t\tthis.setState({collections: newCollections});\n\t}\n\n\taddCollection(e, data)\n\t{\n\t\tif(data.type === \"Cognates\") data.type = \"cognate\";\n\t\telse if(data.type === \"Historical journey\") data.type = \"journey\";\n\n\t\t// Data validation\n\t\t// TODO: For cognates, only one cognate per language should be allowed\n\t\t//  - Future feature: for additional cognate collections, change solid colours to patterns of the specified colours instead (e.g. stripes; checks)\n\t\tlet errorCollector = \"\";\n\t\tif(data.header.word === null || data.header.word.length <= 0)\n\t\t\terrorCollector += \"You must enter a word.\\n\";\n\t\tif(data.header.language === null || data.header.language.length <= 0)\n\t\t\terrorCollector += \"You must enter a language.\\n\";\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error handling with toast\n\t\telse\n\t\t{\n\t\t\tlet newCollections = this.state.collections;\n\t\t\tnewCollections.push({type: data.type, header: data.header, words: []});\n\t\t\tthis.setState( {collections: newCollections}, this.closeModal);\n\t\t}\n\t}\n\teditCollection(e, data)\n\t{\n\t\tif(data.type === \"Cognates\") data.type = \"cognate\";\n\t\telse if(data.type === \"Historical journey\") data.type = \"journey\";\n\n\t\t// Data validation\n\t\tlet errorCollector = \"\";\n\t\tif(data.header.word === null || data.header.word.length <= 0)\n\t\t\terrorCollector += \"You must enter a word.\\n\";\n\t\tif(data.header.language === null || data.header.language.length <= 0)\n\t\t\terrorCollector += \"You must enter a language.\\n\";\n\n\t\tif(errorCollector.length > 0)\n\t\t\talert(errorCollector); // TODO: Proper error handling with toast\n\t\telse\n\t\t{\n\t\t\tlet newCollections = this.state.collections;\n\t\t\tnewCollections[data.index].type = data.type;\n\t\t\tnewCollections[data.index].header = data.header;\n\t\t\tthis.setState({collections: newCollections, mapRenderCounter: this.state.mapRenderCounter+1}, this.closeModal);\n\t\t}\n\t}\n\tremoveCollection(e, collectionIndex)\n\t{\n\t\tlet newCollections = this.state.collections;\n\t\tnewCollections.splice(collectionIndex, 1);\n\t\tthis.setState({collections: newCollections}, function()\n\t\t{\n\t\t\tconsole.log(this.state);\n\t\t});\n\t}\n\n\t/**\n\t * Recursive algorithm that adds an index chain to each node in a collection\n\t * @param {*} node The currently worked-on node for this depth level\n\t * @param {number} i The index of the currently worked-on node\n\t * @param {string} indexChain The chain of indexes required to get to the node (e.g. this.props.words[0].parents[1].parents[4] would have a chain of 0,1,4)\n\t * @param {number} collectionIndex The index of the collection that the node belongs to\n\t */\n\tassignIndexChains(node, i, indexChain, collectionIndex)\n\t{\n\t\tindexChain += String(i);\n\t\tif(node.parents)\n\t\t{\n\t\t\tfor(let j = 0; j < node.parents.length; ++j)\n\t\t\t{\n\t\t\t\tthis.assignIndexChains(node.parents[j], j, indexChain + \"->\", collectionIndex);\n\t\t\t}\n\t\t}\n\t\tnode.indexChain = indexChain;\n\t}\n\n\trender()\n\t{\n\t\tlet modalContainer = null, contextMenuContainer = null;\n\t\tif(this.state.activeModal !== null)\n\t\t{\n\t\t\tlet activeModal = this.state.activeModal;\n\t\t\tmodalContainer = <div className={\"modal-container\"} onClick={(e) =>\n\t\t\t{\n\t\t\t\tif(e.nativeEvent.target.className === \"modal-container\") this.closeModal(); // Closes modal if they click off the modal\n\t\t\t}}>{activeModal}</div>;\n\t\t}\n\t\tif(this.state.activeContextMenu !== null)\n\t\t{\n\t\t\tlet activeContextMenu = this.state.activeContextMenu;\n\t\t\tcontextMenuContainer =\n\t\t\t\t<div className={\"context-menu-container\"} onClick={this.closeContextMenu}>{activeContextMenu}</div>;\n\t\t}\n\n\t\tconsole.log(this.state.collections);\n\n\t\treturn (\n\t\t\t<div className=\"Lema\">\n\t\t\t\t<Banner/>\n\t\t\t\t<div className={\"main-view-container\"}>\n\t\t\t\t\t<LeftBar collections={this.state.collections}\n\t\t\t\t\t         openModal={this.openModal} closeModal={this.closeModal}\n\t\t\t\t\t         openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t         addNode={this.addNode} addNodeDefault={this.addNodeDefault} editNode={this.editNode} editNodeColour={this.editNodeColour} removeNode={this.removeNode}\n\t\t\t\t\t         addCollection={this.addCollection} editCollection={this.editCollection} removeCollection={this.removeCollection}\n\t\t\t\t\t/>\n\t\t\t\t\t<Map collections={this.state.collections} mapRenderCounter={this.state.mapRenderCounter}\n\t\t\t\t\t     openContextMenu={this.openContextMenu} closeContextMenu={this.closeContextMenu}\n\t\t\t\t\t     openModal={this.openModal} closeModal={this.closeModal} moveLabel={this.moveLabel} moveVertex={this.moveVertex}\n\t\t\t\t\t\t addNode={this.addNode} editNode={this.editNode} editNodeColour={this.editNodeColour} removeNode={this.removeNode}  />\n\t\t\t\t</div>\n\t\t\t\t{modalContainer}\n\t\t\t\t{contextMenuContainer}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Lema;\n"]},"metadata":{},"sourceType":"module"}