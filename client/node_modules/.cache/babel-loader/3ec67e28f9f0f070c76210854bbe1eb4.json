{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { useD3 } from \"../hooks/useD3\";\nimport languageCountries from \"../supportedLanguages.json\";\nimport countries_data from \"../data/countries/countries.json\";\nimport { AddEditNodeModal } from \"./AddEditNodeModal\";\nimport { ContextMenu } from \"./ContextMenu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Map(props) {\n  _s();\n\n  // Prop functions\n  const openContextMenu = props.openContextMenu.bind(this);\n  const addNode = props.addNode.bind(this);\n  const editNode = props.editNode.bind(this);\n  const removeNode = props.removeNode.bind(this);\n  const moveLabel = props.moveLabel.bind(this);\n  const moveVertex = props.moveVertex.bind(this);\n  const openModal = props.openModal.bind(this);\n  const collections = props.collections;\n\n  let topojson = require(\"topojson\");\n\n  let countries_data = require(\"../data/countries/countries.json\"); // Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\n\n\n  useEffect(() => {\n    let svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\n    let countries = countries_data.features; // Create path (passed as svg attribute later to draw the countries)\n    // TODO: Have it auto-scale as window is dragged\n\n    const width = svg._groups[0][0].clientWidth;\n    const height = svg._groups[0][0].clientHeight;\n    const projection = d3.geoConicConformal().center([8, 52.823]) // Middle of Europe(ish)\n    .scale(1360).translate([width / 2, height / 2]);\n    const path = d3.geoPath().projection(projection); // Draw countries, bind data and handlers\n\n    let countryPaths = svg.append(\"g\").selectAll(\"path\") // svg->g->path\n    .data(countries) // svg->g->path\n    .enter() // svg->g->path (create new nodes per data)\n    .append(\"path\") // svg->g->path (create new nodes per data)\n    .attr(\"fill\", d => determineFillColour(d)).on(\"click\", function (e, d) {// TODO: Possibly same functions as context menu (see about calling this.onContextMenu() to keep things nice and DRY)\n    }).on(\"contextmenu\", function (e, d) {\n      e.preventDefault(); // Prevent browser context menu from opening\n\n      const nodeObject = findNodes(d, \"cognate\");\n\n      if (nodeObject) {\n        const contextMenuItems = [{\n          text: \"Add new node (journey)\",\n          handler: e => {\n            // Add new journey node within the country/region they right-clicked on (there may be multiple nodes in one country/region for journeys)\n            let collectionList = collections.filter(collection => collection.type === \"journey\"); // Journeys only\n\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: addNode,\n              collectionList: collectionList,\n              node: nodeObject.node,\n              language: d.properties.languages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Add sibling node (cognate)\",\n          handler: e => {\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: addNode,\n              collectionIndex: nodeObject.collectionIndex,\n              node: nodeObject.node,\n              language: d.properties.languages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Edit node (cognate)\",\n          handler: e => {\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: editNode,\n              collectionIndex: nodeObject.collectionIndex,\n              childNodeIndex: nodeObject.childNodeIndex,\n              node: nodeObject.node,\n              language: nodeObject.node.language\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Remove node (cognate)\",\n          handler: e => {\n            removeNode(e, nodeObject.collectionIndex, nodeObject.childNodeIndex);\n          }\n        }];\n        openContextMenu(e, /*#__PURE__*/_jsxDEV(ContextMenu, {\n          x: e.clientX,\n          y: e.clientY,\n          items: contextMenuItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this));\n      } else {\n        // TODO: Context menu for adding to new collection, adding to existing collection\n        const contextMenuItems = [{\n          text: \"Add new node (journey)\",\n          handler: e => {\n            let collectionList = collections.filter(collection => collection.type === \"journey\"); // Journeys only\n\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: addNode,\n              collectionList: collectionList,\n              language: d.properties.languages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 22\n            }, this));\n          }\n        }, {\n          text: \"Add to collection (cognate)\",\n          handler: e => {\n            let collectionList = collections.filter(collection => collection.type === \"cognate\"); // Cognates only\n\n            openModal(e, /*#__PURE__*/_jsxDEV(AddEditNodeModal, {\n              onNodeSubmit: addNode,\n              collectionList: collectionList,\n              language: d.properties.languages\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 22\n            }, this));\n          }\n        }];\n        openContextMenu(e, /*#__PURE__*/_jsxDEV(ContextMenu, {\n          x: e.clientX,\n          y: e.clientY,\n          items: contextMenuItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this));\n      }\n    }).on(\"mouseover\", function (e, d) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"white\") // White can't become transparent\n        element.attr(\"fill\", \"rgb(230,230,230)\");else element.attr(\"fill-opacity\", \"0.65\");\n    }).on(\"mouseout\", function (e, d) {\n      let element = d3.select(this);\n      if (element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\n        element.attr(\"fill\", \"white\");else element.attr(\"fill-opacity\", \"1\");\n    }).attr(\"stroke\", \"black\").attr(\"stroke-linejoin\", \"round\").attr(\"d\", path); // Cognate labels, journey vertices\n\n    const vertexEdgesG = svg.append(\"g\").classed(\"vertex-edges\", true); // SVG group for edges\n\n    const verticesLabelsG = svg.append(\"g\").classed(\"vertices-labels\", true); // SVG group for vertices AND cognate labels\n\n    countryPaths.each(function (f, i) {\n      // Only place labels of countries with associated cognate data\n      // TODO: Make this a setting\n      let cognateNodeObject = findNodes(f, \"cognate\");\n      let journeyNodeObjects = findNodes(f, \"journey\"); // All nodes across all journey collections belonging to this country/region\n\n      if (cognateNodeObject) {\n        /* Cognate visualisations */\n        let node = cognateNodeObject.node;\n        let boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\n\n        let fontSize = node.label.fontSize; // Font size of the label\n\n        let labelText = node.language; // Language by default\n\n        if (node.label.type === \"country\") labelText = f.properties.name_long;else if (node.label.type === \"customText\") labelText = node.label.customText;else if (node.label.type === \"word\") labelText = node.word; // TODO: Initial scale factor depending on size of country (to stop oversized text from escaping country)\n\n        if (labelText.length !== 0 && !node.label.fontSize) // Only scale if font size hasn't been set by user\n          {\n            if (boundingBox.width < labelText.length * 16) fontSize = boundingBox.width / 8 + \"px\";\n          } // Append labels to paths, with co-ordinates according to feature's position on map\n\n\n        let x = node.label.x === null ? boundingBox.x + boundingBox.width / 4 : node.label.x;\n        let y = node.label.y === null ? boundingBox.y + boundingBox.height / 2 : node.label.y;\n        let label = verticesLabelsG.append(\"text\").attr(\"x\", x).attr(\"y\", y).attr(\"fill\", node.label.fontColour).style(\"font-size\", fontSize).text(labelText); // Dragging/resizing handlers\n\n        let startXOffset,\n            startYOffset,\n            resizing = false,\n            startX,\n            startY,\n            startSize,\n            newSize;\n        label.on(\"mousemove\", e => {\n          let labelX = parseFloat(label.attr(\"x\")),\n              labelY = parseFloat(label.attr(\"y\"));\n          let mouseX = e.layerX,\n              mouseY = e.layerY; // Determine corner of text's box\n\n          const southEastCorner = {\n            xStart: labelX + label.node().getBBox().width - 5,\n            xEnd: labelX + label.node().getBBox().width + 15,\n            yStart: labelY,\n            yEnd: labelY + 10\n          }; // Check corner\n\n          if (mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd && mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd) {\n            label.style(\"cursor\", \"se-resize\");\n          } else label.style(\"cursor\", \"grab\");\n        }).call(d3.drag().on(\"start\", e => {\n          let labelX = parseFloat(label.attr(\"x\")),\n              labelY = parseFloat(label.attr(\"y\"));\n          let mouseX = e.x,\n              mouseY = e.y;\n          startXOffset = mouseX - labelX;\n          startYOffset = mouseY - labelY; // Determine corner of text's box\n\n          const southEastCorner = {\n            xStart: labelX + label.node().getBBox().width - 5,\n            xEnd: labelX + label.node().getBBox().width + 15,\n            yStart: labelY,\n            yEnd: labelY + 10\n          }; // Check corner\n\n          if (mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd && mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd) {\n            resizing = true;\n            startX = mouseX;\n            startY = mouseY;\n            startSize = parseFloat(label.style(\"font-size\"));\n          }\n        }).on(\"drag\", e => {\n          let mouseX = e.x,\n              mouseY = e.y;\n\n          if (resizing) {\n            // Resize the label\n            if (mouseX >= startX && mouseY >= startY || mouseX <= startX && mouseY <= startY) {\n              let deltaX = mouseX - startX;\n              newSize = startSize + deltaX / 10;\n              if (newSize < 5) newSize = 5; // Floor of 5px to prevent it shrinking into nothingness\n\n              label.style(\"font-size\", newSize + \"px\"); // Only visually, not updating state itself\n            }\n          } else {\n            // Move the label\n            x = mouseX - startXOffset;\n            y = mouseY - startYOffset;\n            label.attr(\"x\", x).attr(\"y\", y); // Only visually\n          }\n        }).on(\"end\", () => {\n          resizing = false;\n          moveLabel(cognateNodeObject.collectionIndex, cognateNodeObject.childNodeIndex, x, y, newSize); // Set final properties\n        }));\n      }\n\n      if (journeyNodeObjects) {\n        /* Journey visualisations */\n        // Loop through all journey nodes inside this country/region\n        let xOffset = 0,\n            yOffset = 0,\n            prevDiameter = 0;\n        let startEdgeXOffset = 0,\n            startEdgeYOffset = 0,\n            endEdgeXOffset = 0,\n            endEdgeYOffset = 0; // Centre by default\n\n        for (let i = 0; i < journeyNodeObjects.length; ++i) {\n          let journeyNodeObject = journeyNodeObjects[i];\n          let node = journeyNodeObject.node;\n          let nextNodeObject = findNextNode(journeyNodeObject.collectionIndex, journeyNodeObject.childNodeIndex);\n          let nextNode = nextNodeObject ? nextNodeObject.node : null;\n          let boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\n\n          let radius = node.vertex.radius || 50; // Inherit radius (determined later if null)\n\n          let vertexText = node.language; // Language by default\n\n          if (node.vertex.type === \"country\") vertexText = f.properties.name_long;else if (node.vertex.type === \"customText\") vertexText = node.vertex.customText;else if (node.vertex.type === \"word\") vertexText = node.word; // Initial co-ordinates\n          // TODO: Vertex xOffset, yOffset attributes in country/region data\n\n          let vertexX = node.vertex.x === null ? boundingBox.x : node.vertex.x;\n          let vertexY = node.vertex.y === null ? boundingBox.y : node.vertex.y; // If vertex's default position would exit country/regions' bounds, push it down\n\n          if (!node.vertex.x && !node.vertex.y) {\n            if (vertexX + xOffset * 2 > boundingBox.x + boundingBox.width) {\n              yOffset += prevDiameter;\n              xOffset = 0;\n            } else // Otherwise, increase the offset by the previous vertex's diameter\n              {\n                xOffset += prevDiameter;\n              }\n\n            vertexY += yOffset;\n            vertexX += xOffset;\n          } // Prepare text element. This is required to calculate circle radius based on text element's width\n\n\n          let vertexG = verticesLabelsG.append(\"g\"); // Group required to have circle and text together\n\n          let preparedText = vertexG.append(\"text\").attr(\"x\", vertexX).attr(\"y\", vertexY).attr(\"fill\", node.vertex.strokeColour).attr(\"text-anchor\", \"middle\") // Centre of circle\n          .attr(\"alignment-baseline\", \"middle\") // Centre of circle\n          .style(\"font-size\", \"16px\").text(vertexText); // Determine initial radius of circle\n          // TODO: Initial scale factor depending on size of country (to stop oversized text from escaping country)\n\n          let innerTextWidth = preparedText.node().getBBox().width;\n\n          if (vertexText.length !== 0 && !node.vertex.radius) // Only scale if font size hasn't been set by user\n            {\n              radius = boundingBox.width / 8;\n              if (radius < innerTextWidth) radius = innerTextWidth / 2 + 5; // Convert text \"diameter\" to radius, add padding\n            }\n\n          preparedText.remove(); // Remove prepared text element. It will not show if appended before the circle\n          // Set initial vertex position // TODO: Do it for label, too\n\n          if (!node.vertex.x || !node.vertex.y) moveVertex(journeyNodeObject.collectionIndex, journeyNodeObject.childNodeIndex, vertexX, vertexY, radius); // Place edge between this node and next node\n\n          let edge;\n\n          if (nextNode) {\n            // TODO: Arrowheads\n\n            /*\r\n             labelVertexG.append(\"defs\")\r\n             .append(\"marker\")\r\n             .attr(\"id\", \"arrow\")\r\n             .attr(\"markerWidth\", 5).attr(\"markerHeight\", 4)\r\n             .attr(\"refX\", 0).attr(\"refY\", 2)\r\n             .attr(\"orient\", \"auto\")\r\n             .append(\"polygon\")\r\n             .attr(\"points\", \"0 0, 5 2, 0 4\");\r\n             */\n            // Determine edge start position\n            if (node.vertex.edgeStart === \"top\") startEdgeYOffset = -node.vertex.radius;else if (node.vertex.edgeStart === \"right\") startEdgeXOffset = node.vertex.radius;else if (node.vertex.edgeStart === \"bottom\") startEdgeYOffset = node.vertex.radius;else if (node.vertex.edgeStart === \"left\") startEdgeXOffset = -node.vertex.radius; // Determine edge end position\n\n            if (node.vertex.edgeEnd === \"top\") endEdgeYOffset = -node.vertex.radius;else if (node.vertex.edgeEnd === \"right\") endEdgeXOffset = node.vertex.radius;else if (node.vertex.edgeEnd === \"bottom\") endEdgeYOffset = node.vertex.radius;else if (node.vertex.edgeEnd === \"left\") endEdgeXOffset = -node.vertex.radius; // Place edge\n\n            edge = vertexEdgesG.append(\"line\").attr(\"x1\", node.vertex.x + startEdgeXOffset).attr(\"y1\", node.vertex.y + startEdgeYOffset).attr(\"x2\", nextNode.vertex.x + endEdgeXOffset).attr(\"y2\", nextNode.vertex.y + endEdgeYOffset).attr(\"stroke\", \"black\") // TODO: User choice\n            .attr(\"stroke-width\", \"2px\") // TODO: User choice\n            .attr(\"data-start\", journeyNodeObject.collectionIndex + \"|\" + journeyNodeObject.childNodeIndex) // For finding attached edges later\n            .attr(\"data-end\", nextNodeObject.collectionIndex + \"|\" + nextNodeObject.childNodeIndex); //.attr(\"marker-end\", \"url(#arrow)\");\n          }\n\n          let vertex = vertexG.append(\"circle\").attr(\"cx\", vertexX).attr(\"cy\", vertexY).attr(\"r\", radius + \"px\").attr(\"stroke\", node.vertex.strokeColour).attr(\"fill\", node.vertex.fillColour);\n          let text = vertexG.append(\"text\").attr(\"x\", vertexX).attr(\"y\", vertexY).attr(\"fill\", node.vertex.strokeColour).attr(\"text-anchor\", \"middle\") // Centre of circle\n          .attr(\"alignment-baseline\", \"middle\") // Centre of circle\n          .style(\"font-size\", \"16px\").text(vertexText);\n          prevDiameter = radius * 2; // Dragging/resizing handlers\n\n          let startXOffset,\n              startYOffset,\n              resizing = false,\n              startX,\n              startY,\n              startSize,\n              newVertexSize,\n              newLabelSize;\n          vertex.on(\"mousemove\", e => {\n            let vertexX = parseFloat(vertex.attr(\"cx\")),\n                vertexY = parseFloat(vertex.attr(\"cy\"));\n            let mouseX = e.layerX,\n                mouseY = e.layerY; // Dimensions of bottom-right corner\n\n            let squareArea = vertex.node().getBBox().width * vertex.node().getBBox().height;\n            let circleArea = Math.PI * Math.pow(parseFloat(vertex.attr(\"r\")), 2);\n            let cornerWidth = (squareArea - circleArea) / 4 / 2; // Extract corners, divide by four, width and height are equal length (/2)\n            // Determine corner of circle's box\n\n            const southEastCorner = {\n              xStart: vertexX,\n              xEnd: vertexX + cornerWidth,\n              yStart: vertexY,\n              yEnd: vertexY + cornerWidth\n            }; // Check corner\n\n            if (mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd && mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd) {\n              vertex.style(\"cursor\", \"se-resize\");\n            } else vertex.style(\"cursor\", \"grab\");\n          }).call(d3.drag().on(\"start\", e => {\n            let vertexX = parseFloat(vertex.attr(\"cx\")),\n                vertexY = parseFloat(vertex.attr(\"cy\"));\n            let mouseX = e.x,\n                mouseY = e.y;\n            startX = vertexX;\n            startY = vertexY;\n            startXOffset = mouseX - vertexX;\n            startYOffset = mouseY - vertexY; // Dimensions of bottom-right corner\n\n            let squareArea = vertex.node().getBBox().width * vertex.node().getBBox().height;\n            let circleArea = Math.PI * Math.pow(parseFloat(vertex.attr(\"r\")), 2);\n            let cornerWidth = (squareArea - circleArea) / 4 / 2; // Extract corners, divide by four, width and height are equal length (/2)\n            // Determine corner of circle's box\n\n            const southEastCorner = {\n              xStart: vertexX,\n              xEnd: vertexX + cornerWidth,\n              yStart: vertexY,\n              yEnd: vertexY + cornerWidth\n            }; // Check corner\n\n            if (mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd && mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd) {\n              resizing = true;\n              startX = mouseX;\n              startY = mouseY;\n              startSize = parseFloat(vertex.attr(\"r\"));\n            }\n          }).on(\"drag\", e => {\n            let mouseX = e.x,\n                mouseY = e.y;\n\n            if (resizing) {\n              if (mouseX >= startX && mouseY >= startY || mouseX <= startX && mouseY <= startY) {\n                // Resize the vertex\n                let deltaX = mouseX - startX;\n                newVertexSize = startSize + deltaX / 10;\n                if (newVertexSize < 10) newVertexSize = 10; // Floor of 10px to prevent it shrinking into nothingness\n\n                vertex.attr(\"r\", newVertexSize + \"px\"); // Only visually, not updating state itself\n                // Resize the vertex's text\n\n                if (!newLabelSize) newLabelSize = parseFloat(text.style(\"font-size\"));\n                console.log(newVertexSize * 2 / innerTextWidth);\n\n                if (newVertexSize * 2 < innerTextWidth) {\n                  newLabelSize = newVertexSize * 2 / innerTextWidth * 100 + \"px\";\n                  console.log(newLabelSize);\n                }\n\n                text.style(\"font-size\", newLabelSize + \"px\");\n              }\n            } else {\n              // Move the vertex\n              vertexX = mouseX - startXOffset;\n              vertexY = mouseY - startYOffset;\n              vertex.attr(\"cx\", vertexX).attr(\"cy\", vertexY); // Only visually\n\n              text.attr(\"x\", vertexX).attr(\"y\", vertexY); // Only visually\n              // Move the edges\n\n              let dataEnd = journeyNodeObject.collectionIndex + \"|\" + journeyNodeObject.childNodeIndex;\n              let attachedEdges = d3.selectAll(\"line[data-end=\\\"\" + dataEnd + \"\\\"]\"); // Find all edges that end on this node\n\n              if (attachedEdges) {\n                attachedEdges.attr(\"x2\", vertexX + startEdgeXOffset).attr(\"y2\", vertexY + startEdgeYOffset);\n              }\n\n              if (edge) {\n                edge.attr(\"x1\", vertexX + startEdgeXOffset).attr(\"y1\", vertexY + startEdgeYOffset);\n              }\n            }\n          }).on(\"end\", () => {\n            resizing = false;\n            moveVertex(journeyNodeObject.collectionIndex, journeyNodeObject.childNodeIndex, vertexX, vertexY, newVertexSize); // Set final properties\n          }));\n        }\n      }\n    }); // Graticules (lines on the map)\n\n    const g = svg.append(\"g\");\n    const graticules = g.classed(\"graticules\", true).append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(0,0,0,.2)\").attr(\"d\", path(d3.geoGraticule()()));\n    /*\r\n    svg.call(d3.zoom().on(\"zoom\", function () {\r\n    \tz = d3.event.transform.k;\r\n    \tdraw(); // TODO: Contain above render code into draw() function\r\n    }));\r\n     */\n    // Clean-up function (kills all SVG elements upon unmounting)\n\n    return function cleanup() {\n      svg.selectAll(\"g\").remove();\n    };\n  });\n  /**\r\n   * Finds all nodes in all collections of specified type where the node's language is within the feature's language array\r\n   * @param {*} d The dataset feature (country/region) currently being rendered\r\n   * @param {string} type The type of collection to search for (\"journey\" or \"cognate\")\r\n   */\n\n  function findNodes(d, type) {\n    // Search collections\n    if (type === \"cognate\") {\n      for (let c = 0; c < collections.length; ++c) {\n        let collection = collections[c];\n\n        if (collection.type === \"cognate\") {\n          for (let n = 0; n < collection.childNodes.length; ++n) {\n            let childNode = collection.childNodes[n];\n\n            if (d.properties.languages.includes(childNode.language)) {\n              return {\n                node: childNode,\n                collectionIndex: c,\n                childNodeIndex: n\n              }; // TODO: Currently only returns first cognate\n            }\n          }\n        }\n      }\n    } else if (type === \"journey\") {\n      let countryNodes = [];\n\n      for (let c = 0; c < collections.length; ++c) // Search for all nodes in all collections for this country/region\n      {\n        let collection = collections[c];\n\n        if (collection.type === \"journey\") {\n          for (let n = 0; n < collection.childNodes.length; ++n) {\n            let childNode = collection.childNodes[n];\n            if (d.properties.languages.includes(childNode.language)) countryNodes.push({\n              node: childNode,\n              collectionIndex: c,\n              childNodeIndex: n\n            });\n          }\n        }\n      }\n\n      return countryNodes;\n    }\n  }\n\n  function findNextNode(collectionIndex, childIndex) {\n    let nextNode;\n    if (collections[collectionIndex].childNodes[childIndex + 1]) return {\n      node: collections[collectionIndex].childNodes[childIndex + 1],\n      collectionIndex: collectionIndex,\n      childNodeIndex: childIndex + 1\n    };else return null;\n  }\n  /**\r\n   * Determines country SVG fill colour according to countries' language(s) and the specified colour of that language's cognate node(s)\r\n   * @param d Data attached to DOM element via D3 (i.e. the country)\r\n   * @returns {string} The fill colour, as specified by user in Collection.jsx\r\n   */\n\n\n  function determineFillColour(d) {\n    const nodeObject = findNodes(d, \"cognate\"); // Find node in collections\n\n    if (nodeObject) return nodeObject.node.colour; // Country has associated collection node? Return the colour\n    else return \"white\"; // Otherwise, return white by default for all countries with no associated data\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      /*ref={ref}*/\n      style: {\n        height: \"100%\",\n        width: \"100%\",\n        margin: 0,\n        backgroundColor: \"#3d73ab\"\n        /* The sea */\n\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 563,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Map, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Map.jsx"],"names":["React","useEffect","useState","d3","useD3","languageCountries","countries_data","AddEditNodeModal","ContextMenu","Map","props","openContextMenu","bind","addNode","editNode","removeNode","moveLabel","moveVertex","openModal","collections","topojson","require","svg","selectAll","countries","features","width","_groups","clientWidth","height","clientHeight","projection","geoConicConformal","center","scale","translate","path","geoPath","countryPaths","append","data","enter","attr","d","determineFillColour","on","e","preventDefault","nodeObject","findNodes","contextMenuItems","text","handler","collectionList","filter","collection","type","node","properties","languages","collectionIndex","childNodeIndex","language","clientX","clientY","element","select","vertexEdgesG","classed","verticesLabelsG","each","f","i","cognateNodeObject","journeyNodeObjects","boundingBox","getBBox","fontSize","label","labelText","name_long","customText","word","length","x","y","fontColour","style","startXOffset","startYOffset","resizing","startX","startY","startSize","newSize","labelX","parseFloat","labelY","mouseX","layerX","mouseY","layerY","southEastCorner","xStart","xEnd","yStart","yEnd","call","drag","deltaX","xOffset","yOffset","prevDiameter","startEdgeXOffset","startEdgeYOffset","endEdgeXOffset","endEdgeYOffset","journeyNodeObject","nextNodeObject","findNextNode","nextNode","radius","vertex","vertexText","vertexX","vertexY","vertexG","preparedText","strokeColour","innerTextWidth","remove","edge","edgeStart","edgeEnd","fillColour","newVertexSize","newLabelSize","squareArea","circleArea","Math","PI","pow","cornerWidth","console","log","dataEnd","attachedEdges","g","graticules","geoGraticule","cleanup","c","n","childNodes","childNode","includes","countryNodes","push","childIndex","colour","margin","backgroundColor"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {useD3} from \"../hooks/useD3\";\r\nimport languageCountries from \"../supportedLanguages.json\";\r\nimport countries_data from \"../data/countries/countries.json\";\r\nimport {AddEditNodeModal} from \"./AddEditNodeModal\";\r\nimport {ContextMenu} from \"./ContextMenu\";\r\n\r\nexport function Map(props)\r\n{\r\n\t// Prop functions\r\n\tconst openContextMenu = props.openContextMenu.bind(this);\r\n\tconst addNode = props.addNode.bind(this);\r\n\tconst editNode = props.editNode.bind(this);\r\n\tconst removeNode = props.removeNode.bind(this);\r\n\tconst moveLabel = props.moveLabel.bind(this);\r\n\tconst moveVertex = props.moveVertex.bind(this);\r\n\tconst openModal = props.openModal.bind(this);\r\n\r\n\tconst collections = props.collections;\r\n\tlet topojson = require(\"topojson\");\r\n\tlet countries_data = require(\"../data/countries/countries.json\");\r\n\r\n\t// Note: Unfortunately, cannot append React components (then again, that's probably a good thing...)\r\n\tuseEffect(() => {\r\n\t\tlet svg = d3.selectAll(\".map-container\").selectAll(\"svg\");\r\n\t\tlet countries = countries_data.features;\r\n\r\n\t\t// Create path (passed as svg attribute later to draw the countries)\r\n\t\t// TODO: Have it auto-scale as window is dragged\r\n\t\tconst width = svg._groups[0][0].clientWidth;\r\n\t\tconst height = svg._groups[0][0].clientHeight;\r\n\t\tconst projection = d3.geoConicConformal()\r\n\t\t\t.center([8, 52.823]) // Middle of Europe(ish)\r\n\t\t\t.scale(1360)\r\n\t\t\t.translate([width/2, height/2]);\r\n\t\tconst path = d3.geoPath().projection(projection);\r\n\r\n\t\t// Draw countries, bind data and handlers\r\n\t\tlet countryPaths = svg.append(\"g\")\r\n\t\t\t.selectAll(\"path\") // svg->g->path\r\n\t\t\t.data(countries)         // svg->g->path\r\n\t\t\t.enter()                 // svg->g->path (create new nodes per data)\r\n\t\t\t.append(\"path\")          // svg->g->path (create new nodes per data)\r\n\t\t\t.attr(\"fill\", (d) => determineFillColour(d))\r\n\t\t\t.on(\"click\", function(e, d){\r\n\t\t\t\t// TODO: Possibly same functions as context menu (see about calling this.onContextMenu() to keep things nice and DRY)\r\n\t\t\t})\r\n\t\t\t.on(\"contextmenu\", function(e, d){\r\n\t\t\t\te.preventDefault(); // Prevent browser context menu from opening\r\n\t\t\t\tconst nodeObject = findNodes(d, \"cognate\");\r\n\r\n\t\t\t\tif(nodeObject)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst contextMenuItems = [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add new node (journey)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\t// Add new journey node within the country/region they right-clicked on (there may be multiple nodes in one country/region for journeys)\r\n\t\t\t\t\t\t\t\tlet collectionList = collections.filter(collection => collection.type === \"journey\"); // Journeys only\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={addNode} collectionList={collectionList} node={nodeObject.node} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add sibling node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={addNode} collectionIndex={nodeObject.collectionIndex} node={nodeObject.node} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Edit node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={editNode} collectionIndex={nodeObject.collectionIndex} childNodeIndex={nodeObject.childNodeIndex}\r\n\t\t\t\t\t\t\t\t                               node={nodeObject.node} language={nodeObject.node.language} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Remove node (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tremoveNode(e, nodeObject.collectionIndex, nodeObject.childNodeIndex);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t];\r\n\t\t\t\t\topenContextMenu(e, <ContextMenu x={e.clientX} y={e.clientY} items={contextMenuItems} />);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// TODO: Context menu for adding to new collection, adding to existing collection\r\n\t\t\t\t\tconst contextMenuItems = [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add new node (journey)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tlet collectionList = collections.filter(collection => collection.type === \"journey\"); // Journeys only\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={addNode} collectionList={collectionList} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttext: \"Add to collection (cognate)\", handler: (e) => {\r\n\t\t\t\t\t\t\t\tlet collectionList = collections.filter(collection => collection.type === \"cognate\"); // Cognates only\r\n\t\t\t\t\t\t\t\topenModal(e, <AddEditNodeModal onNodeSubmit={addNode} collectionList={collectionList} language={d.properties.languages} />);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t\topenContextMenu(e, <ContextMenu x={e.clientX} y={e.clientY} items={contextMenuItems} />);\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\t\t\t.on(\"mouseover\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"white\") // White can't become transparent\r\n\t\t\t\t\telement.attr(\"fill\", \"rgb(230,230,230)\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"0.65\");\r\n\t\t\t})\r\n\t\t\t.on(\"mouseout\", function(e, d){\r\n\t\t\t\tlet element = d3.select(this);\r\n\t\t\t\tif(element.attr(\"fill\") === \"rgb(230,230,230)\") // Reset white\r\n\t\t\t\t\telement.attr(\"fill\", \"white\")\r\n\t\t\t\telse\r\n\t\t\t\t\telement.attr(\"fill-opacity\", \"1\");\r\n\t\t\t})\r\n\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t.attr(\"stroke-linejoin\", \"round\")\r\n\t\t\t.attr(\"d\", path);\r\n\r\n\t\t// Cognate labels, journey vertices\r\n\t\tconst vertexEdgesG = svg.append(\"g\").classed(\"vertex-edges\", true); // SVG group for edges\r\n\t\tconst verticesLabelsG = svg.append(\"g\").classed(\"vertices-labels\", true); // SVG group for vertices AND cognate labels\r\n\t\tcountryPaths.each(function(f, i) {\r\n\t\t\t// Only place labels of countries with associated cognate data\r\n\t\t\t// TODO: Make this a setting\r\n\t\t\tlet cognateNodeObject = findNodes(f, \"cognate\");\r\n\t\t\tlet journeyNodeObjects = findNodes(f, \"journey\"); // All nodes across all journey collections belonging to this country/region\r\n\t\t\tif(cognateNodeObject)\r\n\t\t\t{\r\n\t\t\t\t/* Cognate visualisations */\r\n\t\t\t\tlet node = cognateNodeObject.node;\r\n\t\t\t\tlet boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\r\n\t\t\t\tlet fontSize = node.label.fontSize;                 // Font size of the label\r\n\t\t\t\tlet labelText = node.language;                      // Language by default\r\n\t\t\t\tif(node.label.type === \"country\") labelText = f.properties.name_long;\r\n\t\t\t\telse if(node.label.type === \"customText\") labelText = node.label.customText;\r\n\t\t\t\telse if(node.label.type === \"word\") labelText = node.word;\r\n\r\n\t\t\t\t// TODO: Initial scale factor depending on size of country (to stop oversized text from escaping country)\r\n\t\t\t\tif(labelText.length !== 0 && !node.label.fontSize) // Only scale if font size hasn't been set by user\r\n\t\t\t\t{\r\n\t\t\t\t\tif(boundingBox.width < (labelText.length * 16))\r\n\t\t\t\t\t\tfontSize = boundingBox.width/8 + \"px\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Append labels to paths, with co-ordinates according to feature's position on map\r\n\t\t\t\tlet x = (node.label.x === null) ? (boundingBox.x + boundingBox.width/4) : node.label.x;\r\n\t\t\t\tlet y = (node.label.y === null) ? (boundingBox.y + boundingBox.height/2) : node.label.y;\r\n\t\t\t\tlet label = verticesLabelsG.append(\"text\")\r\n\t\t\t\t\t.attr(\"x\", x).attr(\"y\", y)\r\n\t\t\t\t\t.attr(\"fill\", node.label.fontColour)\r\n\t\t\t\t\t.style(\"font-size\", fontSize)\r\n\t\t\t\t\t.text(labelText);\r\n\r\n\t\t\t\t// Dragging/resizing handlers\r\n\t\t\t\tlet startXOffset, startYOffset, resizing = false, startX, startY, startSize, newSize;\r\n\t\t\t\tlabel\r\n\t\t\t\t\t.on(\"mousemove\", (e) => {\r\n\t\t\t\t\t\tlet labelX = parseFloat(label.attr(\"x\")), labelY = parseFloat(label.attr(\"y\"));\r\n\t\t\t\t\t\tlet mouseX = e.layerX, mouseY = e.layerY;\r\n\r\n\t\t\t\t\t\t// Determine corner of text's box\r\n\t\t\t\t\t\tconst southEastCorner = {\r\n\t\t\t\t\t\t\txStart: labelX + label.node().getBBox().width - 5,\r\n\t\t\t\t\t\t\txEnd: labelX + label.node().getBBox().width + 15,\r\n\t\t\t\t\t\t\tyStart: labelY,\r\n\t\t\t\t\t\t\tyEnd: labelY + 10\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Check corner\r\n\t\t\t\t\t\tif(mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd\r\n\t\t\t\t\t\t\t&& mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlabel.style(\"cursor\", \"se-resize\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tlabel.style(\"cursor\", \"grab\");\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.call(d3.drag()\r\n\t\t\t\t\t\t.on(\"start\", (e) => {\r\n\t\t\t\t\t\t\tlet labelX = parseFloat(label.attr(\"x\")), labelY = parseFloat(label.attr(\"y\"));\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tstartXOffset = mouseX - labelX;\r\n\t\t\t\t\t\t\tstartYOffset = mouseY - labelY;\r\n\r\n\t\t\t\t\t\t\t// Determine corner of text's box\r\n\t\t\t\t\t\t\tconst southEastCorner = {\r\n\t\t\t\t\t\t\t\txStart: labelX + label.node().getBBox().width - 5,\r\n\t\t\t\t\t\t\t\txEnd: labelX + label.node().getBBox().width + 15,\r\n\t\t\t\t\t\t\t\tyStart: labelY,\r\n\t\t\t\t\t\t\t\tyEnd: labelY + 10\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Check corner\r\n\t\t\t\t\t\t\tif(mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd\r\n\t\t\t\t\t\t\t\t&& mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tresizing = true;\r\n\t\t\t\t\t\t\t\tstartX = mouseX;\r\n\t\t\t\t\t\t\t\tstartY = mouseY;\r\n\t\t\t\t\t\t\t\tstartSize = parseFloat(label.style(\"font-size\"));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"drag\", (e) => {\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tif(resizing)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Resize the label\r\n\t\t\t\t\t\t\t\tif(mouseX >= startX && mouseY >= startY || mouseX <= startX && mouseY <= startY)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tlet deltaX = mouseX - startX;\r\n\t\t\t\t\t\t\t\t\tnewSize = startSize + (deltaX / 10);\r\n\t\t\t\t\t\t\t\t\tif(newSize < 5) newSize = 5; // Floor of 5px to prevent it shrinking into nothingness\r\n\t\t\t\t\t\t\t\t\tlabel.style(\"font-size\", newSize + \"px\"); // Only visually, not updating state itself\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Move the label\r\n\t\t\t\t\t\t\t\tx = mouseX - startXOffset;\r\n\t\t\t\t\t\t\t\ty = mouseY - startYOffset;\r\n\t\t\t\t\t\t\t\tlabel.attr(\"x\", x).attr(\"y\", y); // Only visually\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"end\", () => {\r\n\t\t\t\t\t\t\tresizing = false;\r\n\t\t\t\t\t\t\tmoveLabel(cognateNodeObject.collectionIndex, cognateNodeObject.childNodeIndex, x, y, newSize); // Set final properties\r\n\t\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tif(journeyNodeObjects)\r\n\t\t\t{\r\n\t\t\t\t/* Journey visualisations */\r\n\r\n\t\t\t\t// Loop through all journey nodes inside this country/region\r\n\t\t\t\tlet xOffset = 0, yOffset = 0, prevDiameter = 0;\r\n\t\t\t\tlet startEdgeXOffset = 0, startEdgeYOffset = 0, endEdgeXOffset = 0, endEdgeYOffset = 0; // Centre by default\r\n\t\t\t\tfor(let i = 0; i < journeyNodeObjects.length; ++i)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet journeyNodeObject = journeyNodeObjects[i];\r\n\t\t\t\t\tlet node = journeyNodeObject.node;\r\n\t\t\t\t\tlet nextNodeObject = findNextNode(journeyNodeObject.collectionIndex, journeyNodeObject.childNodeIndex);\r\n\t\t\t\t\tlet nextNode = (nextNodeObject) ? nextNodeObject.node : null;\r\n\t\t\t\t\tlet boundingBox = d3.select(this).node().getBBox(); // Get rectangular bounds of country/region\r\n\t\t\t\t\tlet radius = node.vertex.radius || 50;              // Inherit radius (determined later if null)\r\n\t\t\t\t\tlet vertexText = node.language;                     // Language by default\r\n\t\t\t\t\tif(node.vertex.type === \"country\") vertexText = f.properties.name_long;\r\n\t\t\t\t\telse if(node.vertex.type === \"customText\") vertexText = node.vertex.customText;\r\n\t\t\t\t\telse if(node.vertex.type === \"word\") vertexText = node.word;\r\n\r\n\t\t\t\t\t// Initial co-ordinates\r\n\t\t\t\t\t// TODO: Vertex xOffset, yOffset attributes in country/region data\r\n\t\t\t\t\tlet vertexX = (node.vertex.x === null) ? (boundingBox.x) : node.vertex.x;\r\n\t\t\t\t\tlet vertexY = (node.vertex.y === null) ? (boundingBox.y) : node.vertex.y;\r\n\r\n\t\t\t\t\t// If vertex's default position would exit country/regions' bounds, push it down\r\n\t\t\t\t\tif(!node.vertex.x && !node.vertex.y)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((vertexX + xOffset*2) > (boundingBox.x + boundingBox.width))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tyOffset += prevDiameter;\r\n\t\t\t\t\t\t\txOffset = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse // Otherwise, increase the offset by the previous vertex's diameter\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\txOffset += prevDiameter;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvertexY += yOffset;\r\n\t\t\t\t\t\tvertexX += xOffset;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Prepare text element. This is required to calculate circle radius based on text element's width\r\n\t\t\t\t\tlet vertexG = verticesLabelsG.append(\"g\"); // Group required to have circle and text together\r\n\t\t\t\t\tlet preparedText = vertexG.append(\"text\")\r\n\t\t\t\t\t\t.attr(\"x\", vertexX).attr(\"y\", vertexY)\r\n\t\t\t\t\t\t.attr(\"fill\", node.vertex.strokeColour)\r\n\t\t\t\t\t\t.attr(\"text-anchor\", \"middle\")        // Centre of circle\r\n\t\t\t\t\t\t.attr(\"alignment-baseline\", \"middle\") // Centre of circle\r\n\t\t\t\t\t\t.style(\"font-size\", \"16px\")\r\n\t\t\t\t\t\t.text(vertexText);\r\n\r\n\t\t\t\t\t// Determine initial radius of circle\r\n\t\t\t\t\t// TODO: Initial scale factor depending on size of country (to stop oversized text from escaping country)\r\n\t\t\t\t\tlet innerTextWidth = preparedText.node().getBBox().width;\r\n\t\t\t\t\tif(vertexText.length !== 0 && !node.vertex.radius) // Only scale if font size hasn't been set by user\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tradius = boundingBox.width/8;\r\n\t\t\t\t\t\tif(radius < innerTextWidth) radius = innerTextWidth/2 + 5; // Convert text \"diameter\" to radius, add padding\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpreparedText.remove(); // Remove prepared text element. It will not show if appended before the circle\r\n\r\n\t\t\t\t\t// Set initial vertex position // TODO: Do it for label, too\r\n\t\t\t\t\tif(!node.vertex.x || !node.vertex.y)\r\n\t\t\t\t\t\tmoveVertex(journeyNodeObject.collectionIndex, journeyNodeObject.childNodeIndex, vertexX, vertexY, radius);\r\n\r\n\t\t\t\t\t// Place edge between this node and next node\r\n\t\t\t\t\tlet edge;\r\n\t\t\t\t\tif(nextNode)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// TODO: Arrowheads\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t labelVertexG.append(\"defs\")\r\n\t\t\t\t\t\t .append(\"marker\")\r\n\t\t\t\t\t\t .attr(\"id\", \"arrow\")\r\n\t\t\t\t\t\t .attr(\"markerWidth\", 5).attr(\"markerHeight\", 4)\r\n\t\t\t\t\t\t .attr(\"refX\", 0).attr(\"refY\", 2)\r\n\t\t\t\t\t\t .attr(\"orient\", \"auto\")\r\n\t\t\t\t\t\t .append(\"polygon\")\r\n\t\t\t\t\t\t .attr(\"points\", \"0 0, 5 2, 0 4\");\r\n\t\t\t\t\t\t */\r\n\r\n\t\t\t\t\t\t// Determine edge start position\r\n\t\t\t\t\t\tif(node.vertex.edgeStart === \"top\") startEdgeYOffset = -(node.vertex.radius);\r\n\t\t\t\t\t\telse if(node.vertex.edgeStart === \"right\") startEdgeXOffset = node.vertex.radius;\r\n\t\t\t\t\t\telse if(node.vertex.edgeStart === \"bottom\") startEdgeYOffset = node.vertex.radius;\r\n\t\t\t\t\t\telse if(node.vertex.edgeStart === \"left\") startEdgeXOffset = -(node.vertex.radius);\r\n\r\n\t\t\t\t\t\t// Determine edge end position\r\n\t\t\t\t\t\tif(node.vertex.edgeEnd === \"top\") endEdgeYOffset = -(node.vertex.radius);\r\n\t\t\t\t\t\telse if(node.vertex.edgeEnd === \"right\") endEdgeXOffset = node.vertex.radius;\r\n\t\t\t\t\t\telse if(node.vertex.edgeEnd === \"bottom\") endEdgeYOffset = node.vertex.radius;\r\n\t\t\t\t\t\telse if(node.vertex.edgeEnd === \"left\") endEdgeXOffset = -(node.vertex.radius);\r\n\r\n\t\t\t\t\t\t// Place edge\r\n\t\t\t\t\t\tedge = vertexEdgesG.append(\"line\")\r\n\t\t\t\t\t\t\t.attr(\"x1\", node.vertex.x + startEdgeXOffset)\r\n\t\t\t\t\t\t\t.attr(\"y1\", node.vertex.y + startEdgeYOffset)\r\n\t\t\t\t\t\t\t.attr(\"x2\", nextNode.vertex.x + endEdgeXOffset)\r\n\t\t\t\t\t\t\t.attr(\"y2\", nextNode.vertex.y + endEdgeYOffset)\r\n\t\t\t\t\t\t\t.attr(\"stroke\", \"black\")     // TODO: User choice\r\n\t\t\t\t\t\t\t.attr(\"stroke-width\", \"2px\") // TODO: User choice\r\n\t\t\t\t\t\t\t.attr(\"data-start\", journeyNodeObject.collectionIndex + \"|\" + journeyNodeObject.childNodeIndex) // For finding attached edges later\r\n\t\t\t\t\t\t\t.attr(\"data-end\", nextNodeObject.collectionIndex + \"|\" + nextNodeObject.childNodeIndex);\r\n\t\t\t\t\t\t//.attr(\"marker-end\", \"url(#arrow)\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet vertex = vertexG.append(\"circle\")\r\n\t\t\t\t\t\t.attr(\"cx\", vertexX).attr(\"cy\", vertexY)\r\n\t\t\t\t\t\t.attr(\"r\", radius + \"px\")\r\n\t\t\t\t\t\t.attr(\"stroke\", node.vertex.strokeColour)\r\n\t\t\t\t\t\t.attr(\"fill\", node.vertex.fillColour);\r\n\t\t\t\t\tlet text = vertexG.append(\"text\")\r\n\t\t\t\t\t\t.attr(\"x\", vertexX).attr(\"y\", vertexY)\r\n\t\t\t\t\t\t.attr(\"fill\", node.vertex.strokeColour)\r\n\t\t\t\t\t\t.attr(\"text-anchor\", \"middle\")        // Centre of circle\r\n\t\t\t\t\t\t.attr(\"alignment-baseline\", \"middle\") // Centre of circle\r\n\t\t\t\t\t\t.style(\"font-size\", \"16px\")\r\n\t\t\t\t\t\t.text(vertexText);\r\n\t\t\t\t\tprevDiameter = radius*2;\r\n\r\n\t\t\t\t\t// Dragging/resizing handlers\r\n\t\t\t\t\tlet startXOffset, startYOffset, resizing = false, startX, startY, startSize, newVertexSize, newLabelSize;\r\n\t\t\t\t\tvertex.on(\"mousemove\", (e) => {\r\n\t\t\t\t\t\tlet vertexX = parseFloat(vertex.attr(\"cx\")), vertexY = parseFloat(vertex.attr(\"cy\"));\r\n\t\t\t\t\t\tlet mouseX = e.layerX, mouseY = e.layerY;\r\n\r\n\t\t\t\t\t\t// Dimensions of bottom-right corner\r\n\t\t\t\t\t\tlet squareArea = vertex.node().getBBox().width * vertex.node().getBBox().height;\r\n\t\t\t\t\t\tlet circleArea = Math.PI * Math.pow(parseFloat(vertex.attr(\"r\")),2);\r\n\t\t\t\t\t\tlet cornerWidth = ((squareArea - circleArea) / 4) / 2; // Extract corners, divide by four, width and height are equal length (/2)\r\n\r\n\t\t\t\t\t\t// Determine corner of circle's box\r\n\t\t\t\t\t\tconst southEastCorner = {\r\n\t\t\t\t\t\t\txStart: vertexX,\r\n\t\t\t\t\t\t\txEnd: vertexX + cornerWidth,\r\n\t\t\t\t\t\t\tyStart: vertexY,\r\n\t\t\t\t\t\t\tyEnd: vertexY + cornerWidth\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t// Check corner\r\n\t\t\t\t\t\tif(mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd\r\n\t\t\t\t\t\t\t&& mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvertex.style(\"cursor\", \"se-resize\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tvertex.style(\"cursor\", \"grab\");\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.call(d3.drag()\r\n\t\t\t\t\t\t.on(\"start\", (e) => {\r\n\t\t\t\t\t\t\tlet vertexX = parseFloat(vertex.attr(\"cx\")), vertexY = parseFloat(vertex.attr(\"cy\"));\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tstartX = vertexX;\r\n\t\t\t\t\t\t\tstartY = vertexY;\r\n\t\t\t\t\t\t\tstartXOffset = mouseX - vertexX;\r\n\t\t\t\t\t\t\tstartYOffset = mouseY - vertexY;\r\n\r\n\t\t\t\t\t\t\t// Dimensions of bottom-right corner\r\n\t\t\t\t\t\t\tlet squareArea = vertex.node().getBBox().width * vertex.node().getBBox().height;\r\n\t\t\t\t\t\t\tlet circleArea = Math.PI * Math.pow(parseFloat(vertex.attr(\"r\")),2);\r\n\t\t\t\t\t\t\tlet cornerWidth = ((squareArea - circleArea) / 4) / 2; // Extract corners, divide by four, width and height are equal length (/2)\r\n\r\n\t\t\t\t\t\t\t// Determine corner of circle's box\r\n\t\t\t\t\t\t\tconst southEastCorner = {\r\n\t\t\t\t\t\t\t\txStart: vertexX,\r\n\t\t\t\t\t\t\t\txEnd: vertexX + cornerWidth,\r\n\t\t\t\t\t\t\t\tyStart: vertexY,\r\n\t\t\t\t\t\t\t\tyEnd: vertexY + cornerWidth\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Check corner\r\n\t\t\t\t\t\t\tif(mouseX >= southEastCorner.xStart && mouseX <= southEastCorner.xEnd\r\n\t\t\t\t\t\t\t\t&& mouseY >= southEastCorner.yStart && mouseY <= southEastCorner.yEnd)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tresizing = true;\r\n\t\t\t\t\t\t\t\tstartX = mouseX;\r\n\t\t\t\t\t\t\t\tstartY = mouseY;\r\n\t\t\t\t\t\t\t\tstartSize = parseFloat(vertex.attr(\"r\"));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"drag\", (e) => {\r\n\t\t\t\t\t\t\tlet mouseX = e.x, mouseY = e.y;\r\n\t\t\t\t\t\t\tif(resizing)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(mouseX >= startX && mouseY >= startY || mouseX <= startX && mouseY <= startY)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Resize the vertex\r\n\t\t\t\t\t\t\t\t\tlet deltaX = mouseX - startX;\r\n\t\t\t\t\t\t\t\t\tnewVertexSize = startSize + (deltaX / 10);\r\n\t\t\t\t\t\t\t\t\tif(newVertexSize < 10) newVertexSize = 10; // Floor of 10px to prevent it shrinking into nothingness\r\n\t\t\t\t\t\t\t\t\tvertex.attr(\"r\", newVertexSize + \"px\"); // Only visually, not updating state itself\r\n\r\n\t\t\t\t\t\t\t\t\t// Resize the vertex's text\r\n\t\t\t\t\t\t\t\t\tif(!newLabelSize) newLabelSize = parseFloat(text.style(\"font-size\"));\r\n\t\t\t\t\t\t\t\t\tconsole.log((newVertexSize*2) / innerTextWidth);\r\n\t\t\t\t\t\t\t\t\tif(newVertexSize*2 < innerTextWidth)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tnewLabelSize = (((newVertexSize*2) / innerTextWidth) * 100) + \"px\";\r\n\t\t\t\t\t\t\t\t\t\tconsole.log(newLabelSize);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\ttext.style(\"font-size\", newLabelSize + \"px\");\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Move the vertex\r\n\t\t\t\t\t\t\t\tvertexX = mouseX - startXOffset;\r\n\t\t\t\t\t\t\t\tvertexY = mouseY - startYOffset;\r\n\t\t\t\t\t\t\t\tvertex.attr(\"cx\", vertexX).attr(\"cy\", vertexY); // Only visually\r\n\t\t\t\t\t\t\t\ttext.attr(\"x\", vertexX).attr(\"y\", vertexY); // Only visually\r\n\r\n\t\t\t\t\t\t\t\t// Move the edges\r\n\t\t\t\t\t\t\t\tlet dataEnd = journeyNodeObject.collectionIndex + \"|\" + journeyNodeObject.childNodeIndex;\r\n\t\t\t\t\t\t\t\tlet attachedEdges = d3.selectAll(\"line[data-end=\\\"\"+dataEnd+\"\\\"]\"); // Find all edges that end on this node\r\n\t\t\t\t\t\t\t\tif(attachedEdges)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tattachedEdges.attr(\"x2\", vertexX + startEdgeXOffset)\r\n\t\t\t\t\t\t\t\t\t\t.attr(\"y2\", vertexY + startEdgeYOffset);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(edge)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tedge.attr(\"x1\", vertexX + startEdgeXOffset)\r\n\t\t\t\t\t\t\t\t\t\t.attr(\"y1\", vertexY + startEdgeYOffset);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.on(\"end\", () => {\r\n\t\t\t\t\t\t\tresizing = false;\r\n\t\t\t\t\t\t\tmoveVertex(journeyNodeObject.collectionIndex, journeyNodeObject.childNodeIndex, vertexX, vertexY, newVertexSize); // Set final properties\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Graticules (lines on the map)\r\n\t\tconst g = svg.append(\"g\");\r\n\t\tconst graticules = g.classed(\"graticules\", true)\r\n\t\t\t.append(\"path\")\r\n\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\")\r\n\t\t\t.attr(\"d\", path(d3.geoGraticule()()));\r\n\r\n\t\t/*\r\n\t\tsvg.call(d3.zoom().on(\"zoom\", function () {\r\n\t\t\tz = d3.event.transform.k;\r\n\t\t\tdraw(); // TODO: Contain above render code into draw() function\r\n\t\t}));\r\n\t\t */\r\n\r\n\t\t// Clean-up function (kills all SVG elements upon unmounting)\r\n\t\treturn function cleanup()\r\n\t\t{\r\n\t\t\tsvg.selectAll(\"g\").remove();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\t/**\r\n\t * Finds all nodes in all collections of specified type where the node's language is within the feature's language array\r\n\t * @param {*} d The dataset feature (country/region) currently being rendered\r\n\t * @param {string} type The type of collection to search for (\"journey\" or \"cognate\")\r\n\t */\r\n\tfunction findNodes(d, type)\r\n\t{\r\n\t\t// Search collections\r\n\t\tif(type === \"cognate\")\r\n\t\t{\r\n\t\t\tfor(let c = 0; c < collections.length; ++c)\r\n\t\t\t{\r\n\t\t\t\tlet collection = collections[c];\r\n\t\t\t\tif(collection.type === \"cognate\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let n = 0; n < collection.childNodes.length; ++n)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet childNode = collection.childNodes[n];\r\n\r\n\t\t\t\t\t\tif(d.properties.languages.includes(childNode.language))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {node: childNode, collectionIndex: c, childNodeIndex: n}; // TODO: Currently only returns first cognate\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(type === \"journey\")\r\n\t\t{\r\n\t\t\tlet countryNodes = [];\r\n\t\t\tfor(let c = 0; c < collections.length; ++c) // Search for all nodes in all collections for this country/region\r\n\t\t\t{\r\n\t\t\t\tlet collection = collections[c];\r\n\t\t\t\tif(collection.type === \"journey\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let n = 0; n < collection.childNodes.length; ++n)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet childNode = collection.childNodes[n];\r\n\r\n\t\t\t\t\t\tif(d.properties.languages.includes(childNode.language))\r\n\t\t\t\t\t\t\tcountryNodes.push({node: childNode, collectionIndex: c, childNodeIndex: n});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn countryNodes;\r\n\t\t}\r\n\r\n\t}\r\n\tfunction findNextNode(collectionIndex, childIndex)\r\n\t{\r\n\t\tlet nextNode;\r\n\t\tif(collections[collectionIndex].childNodes[childIndex+1])\r\n\t\t\treturn {node: collections[collectionIndex].childNodes[childIndex+1], collectionIndex: collectionIndex, childNodeIndex: childIndex+1}\r\n\t\telse\r\n\t\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Determines country SVG fill colour according to countries' language(s) and the specified colour of that language's cognate node(s)\r\n\t * @param d Data attached to DOM element via D3 (i.e. the country)\r\n\t * @returns {string} The fill colour, as specified by user in Collection.jsx\r\n\t */\r\n\tfunction determineFillColour(d)\r\n\t{\r\n\t\tconst nodeObject = findNodes(d, \"cognate\"); // Find node in collections\r\n\t\tif(nodeObject) return nodeObject.node.colour;   // Country has associated collection node? Return the colour\r\n\t\telse return \"white\";                            // Otherwise, return white by default for all countries with no associated data\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div className={\"map-container\"}>\r\n\t\t\t<svg\r\n\t\t\t\t/*ref={ref}*/\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\tbackgroundColor: \"#3d73ab\" /* The sea */\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}