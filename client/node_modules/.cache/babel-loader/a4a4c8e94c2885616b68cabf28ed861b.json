{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\COMP3000_LEMA\\\\Project\\\\lema\\\\src\\\\components\\\\Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { useD3 } from \"../hooks/useD3\";\nimport languageCountries from \"../languageCountries.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Map(props) {\n  _s();\n\n  const items = props.items;\n\n  let topojson = require(\"topojson\");\n\n  let world = require(\"../data/world.json\");\n\n  let foo = [{\n    \"name\": \"Netherlands\",\n    \"continent\": \"Europe\"\n  }, {\n    \"name\": \"England\",\n    \"continent\": \"Europe\"\n  }, {\n    \"name\": \"Germany\",\n    \"continent\": \"Europe\"\n  }, {\n    \"name\": \"France\",\n    \"continent\": \"Europe\"\n  }];\n  useEffect(() => {\n    let innerDiv = d3.selectAll(\".map-container\").append(\"div\");\n    innerDiv.selectAll(\"div\").data(foo).text(d => {\n      return d.name;\n    }).enter().append(\"div\").text(d => {\n      return d.name;\n    });\n  });\n  /*let ref = useD3(\r\n  \t(svg) =>\r\n  \t{\r\n  \t\tlet width = svg._groups[0][0].clientWidth;\r\n  \t\tlet height = svg._groups[0][0].clientHeight;\r\n  \n  \t\tsvg.append(\"div\");\r\n  \t\tsvg.selectAll(\"div\")\r\n  \t\t\t.data(foo)\r\n  \t\t\t.enter()\r\n  \t\t\t.append(\"div\")\r\n  \t\t\t.text(function(d){return d.name});\r\n  \n  \t\t/!*let areas = world.features\r\n  \t\t\t.reduce((countries2, feature) =>\r\n  \t\t\t{\r\n  \t\t\t\t// flatten multipolygons into polygons\r\n  \t\t\t\tif(feature.geometry.type === \"Polygon\")\r\n  \t\t\t\t{\r\n  \t\t\t\t\tcountries2.push(feature);\r\n  \t\t\t\t}\r\n  \t\t\t\telse\r\n  \t\t\t\t{ // MultiPolygon\r\n  \t\t\t\t\tfeature.geometry.coordinates.forEach(coordinates =>\r\n  \t\t\t\t\t{\r\n  \t\t\t\t\t\tcountries2.push({\r\n  \t\t\t\t\t\t\ttype: \"Feature\",\r\n  \t\t\t\t\t\t\tproperties: feature.properties,\r\n  \t\t\t\t\t\t\tgeometry: {type: \"Polygon\", coordinates}\r\n  \t\t\t\t\t\t});\r\n  \t\t\t\t\t});\r\n  \t\t\t\t}\r\n  \t\t\t\treturn countries2;\r\n  \t\t\t}, []);\r\n  \n  \t\t// TODO: Adjust dimensions so it displays better; have it auto-scale as window is dragged\r\n  \t\tconst W = width;\r\n  \t\tconst H = W * height / width;\r\n  \t\tconst g = svg.append(\"g\");\r\n  \t\tconst g_countries = g.append(\"g\");\r\n  \n  \t\tconst graticules = g.append(\"path\")\r\n  \t\t\t.attr(\"fill\", \"none\")\r\n  \t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\");\r\n  \n  \t\tlet x = 0;\r\n  \t\tlet z = 1.7;\r\n  \n  \t\tfunction draw()\r\n  \t\t{\r\n  \t\t\tconst projection = d3.geoConicConformal()\r\n  \t\t\t\t.parallels([40, 68])\r\n  \t\t\t\t.rotate([-10 + x / z / 15, 0])\r\n  \t\t\t\t.center([8 - 10, 53.823])\r\n  \t\t\t\t.scale(900 * z)\r\n  \t\t\t\t.translate([W / 2, H / 2]);\r\n  \n  \t\t\tconst path = d3.geoPath().projection(projection);\r\n  \t\t\tconst countries = svg.append(\"g\").append(\"g\").selectAll(\"path\").data(areas);\r\n  \t\t\tcountries.exit().remove();\r\n  \t\t\tconsole.log(countries);\r\n  \t\t\tcountries\r\n  \t\t\t\t.enter().append(\"path\")\r\n  \t\t\t\t.attr(\"fill\", function(d){\r\n  \t\t\t\t\t// TODO: Determine fill colour by node colour data\r\n  \t\t\t\t\t//  - Need a language->country mapping\r\n  \t\t\t\t\t//  - Find node language, get corresponding country, if this d's name is country then change to node colour\r\n  \n  \t\t\t\t\tlet countryName = d.properties.name;\r\n  \t\t\t\t\tlet fillColour = \"white\";\r\n  \n  \t\t\t\t\tfor(let collection in items)\r\n  \t\t\t\t\t{\r\n  \t\t\t\t\t\tif(items.hasOwnProperty(collection))\r\n  \t\t\t\t\t\t{\r\n  \t\t\t\t\t\t\tcollection = items[collection];\r\n  \t\t\t\t\t\t\tif(collection.type === \"cognate\")\r\n  \t\t\t\t\t\t\t{\r\n  \t\t\t\t\t\t\t\tfor(let childNode in collection.childNodes)\r\n  \t\t\t\t\t\t\t\t{\r\n  \t\t\t\t\t\t\t\t\tif(collection.childNodes.hasOwnProperty(childNode))\r\n  \t\t\t\t\t\t\t\t\t{\r\n  \t\t\t\t\t\t\t\t\t\tchildNode = collection.childNodes[childNode];\r\n  \t\t\t\t\t\t\t\t\t\tif(languageCountries[childNode.language] === countryName)\r\n  \t\t\t\t\t\t\t\t\t\t\tfillColour = childNode.colour;\r\n  \t\t\t\t\t\t\t\t\t}\r\n  \t\t\t\t\t\t\t\t}\r\n  \t\t\t\t\t\t\t}\r\n  \t\t\t\t\t\t}\r\n  \t\t\t\t\t}\r\n  \t\t\t\t\treturn fillColour;\r\n  \t\t\t\t})\r\n  \t\t\t\t.attr(\"stroke\", \"black\")\r\n  \t\t\t\t.attr(\"stroke-linejoin\", \"round\")\r\n  \t\t\t\t.merge(countries)\r\n  \t\t\t\t.attr(\"d\", path);\r\n  \n  \t\t\tgraticules.attr(\"d\", path(d3.geoGraticule().step([20, 20])()));\r\n  \t\t}\r\n  \n  \n  \t\t/!*\r\n  \t\t svg.call(d3.zoom().on(\"zoom\", function () {\r\n  \t\t z = d3.event.transform.k;\r\n  \t\t draw();\r\n  \t\t }));\r\n  \t\t *!/\r\n  \n  \t\tdraw();*!/\r\n  \n  \t\treturn svg.node();\r\n  \n  \t},\r\n  \t[props.mapRenderCounter]\r\n  );*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Map, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["D:/xampp/htdocs/COMP3000_LEMA/Project/lema/src/components/Map.jsx"],"names":["React","useEffect","useState","d3","useD3","languageCountries","Map","props","items","topojson","require","world","foo","innerDiv","selectAll","append","data","text","d","name","enter"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAAQC,KAAR,QAAoB,gBAApB;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;;AAEA,OAAO,SAASC,GAAT,CAAaC,KAAb,EACP;AAAA;;AACC,QAAMC,KAAK,GAAGD,KAAK,CAACC,KAApB;;AACA,MAAIC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAIC,KAAK,GAAGD,OAAO,CAAC,oBAAD,CAAnB;;AAEA,MAAIE,GAAG,GAAG,CAAC;AAAC,YAAQ,aAAT;AAAwB,iBAAa;AAArC,GAAD,EAAiD;AAAC,YAAQ,SAAT;AAAoB,iBAAa;AAAjC,GAAjD,EACT;AAAC,YAAQ,SAAT;AAAoB,iBAAa;AAAjC,GADS,EACmC;AAAC,YAAQ,QAAT;AAAmB,iBAAa;AAAhC,GADnC,CAAV;AAGAX,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIY,QAAQ,GAAGV,EAAE,CAACW,SAAH,CAAa,gBAAb,EAA+BC,MAA/B,CAAsC,KAAtC,CAAf;AACAF,IAAAA,QAAQ,CACNC,SADF,CACY,KADZ,EAEEE,IAFF,CAEOJ,GAFP,EAGEK,IAHF,CAGQC,CAAD,IAAO;AAAC,aAAOA,CAAC,CAACC,IAAT;AAAc,KAH7B,EAIEC,KAJF,GAKEL,MALF,CAKS,KALT,EAMEE,IANF,CAMQC,CAAD,IAAO;AAAC,aAAOA,CAAC,CAACC,IAAT;AAAcsBACC;AAAK,IAAA,SAAS,EAAE;AAAhB;AAAA;AAAA;AAAA;AAAA,UADD;AAYA;;GApJeb,G;;KAAAA,G","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {useD3} from \"../hooks/useD3\";\r\nimport languageCountries from \"../languageCountries.json\";\r\n\r\nexport function Map(props)\r\n{\r\n\tconst items = props.items;\r\n\tlet topojson = require(\"topojson\");\r\n\tlet world = require(\"../data/world.json\");\r\n\r\n\tlet foo = [{\"name\": \"Netherlands\", \"continent\": \"Europe\"}, {\"name\": \"England\", \"continent\": \"Europe\"},\r\n\t\t{\"name\": \"Germany\", \"continent\": \"Europe\"}, {\"name\": \"France\", \"continent\": \"Europe\"}];\r\n\r\n\tuseEffect(() => {\r\n\t\tlet innerDiv = d3.selectAll(\".map-container\").append(\"div\");\r\n\t\tinnerDiv\r\n\t\t\t.selectAll(\"div\")\r\n\t\t\t.data(foo)\r\n\t\t\t.text((d) => {return d.name})\r\n\t\t\t.enter()\r\n\t\t\t.append(\"div\")\r\n\t\t\t.text((d) => {return d.name});\r\n\t})\r\n\r\n\t/*let ref = useD3(\r\n\t\t(svg) =>\r\n\t\t{\r\n\t\t\tlet width = svg._groups[0][0].clientWidth;\r\n\t\t\tlet height = svg._groups[0][0].clientHeight;\r\n\r\n\t\t\tsvg.append(\"div\");\r\n\t\t\tsvg.selectAll(\"div\")\r\n\t\t\t\t.data(foo)\r\n\t\t\t\t.enter()\r\n\t\t\t\t.append(\"div\")\r\n\t\t\t\t.text(function(d){return d.name});\r\n\r\n\t\t\t/!*let areas = world.features\r\n\t\t\t\t.reduce((countries2, feature) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// flatten multipolygons into polygons\r\n\t\t\t\t\tif(feature.geometry.type === \"Polygon\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcountries2.push(feature);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{ // MultiPolygon\r\n\t\t\t\t\t\tfeature.geometry.coordinates.forEach(coordinates =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcountries2.push({\r\n\t\t\t\t\t\t\t\ttype: \"Feature\",\r\n\t\t\t\t\t\t\t\tproperties: feature.properties,\r\n\t\t\t\t\t\t\t\tgeometry: {type: \"Polygon\", coordinates}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn countries2;\r\n\t\t\t\t}, []);\r\n\r\n\t\t\t// TODO: Adjust dimensions so it displays better; have it auto-scale as window is dragged\r\n\t\t\tconst W = width;\r\n\t\t\tconst H = W * height / width;\r\n\t\t\tconst g = svg.append(\"g\");\r\n\t\t\tconst g_countries = g.append(\"g\");\r\n\r\n\t\t\tconst graticules = g.append(\"path\")\r\n\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t.attr(\"stroke\", \"rgba(0,0,0,.2)\");\r\n\r\n\t\t\tlet x = 0;\r\n\t\t\tlet z = 1.7;\r\n\r\n\t\t\tfunction draw()\r\n\t\t\t{\r\n\t\t\t\tconst projection = d3.geoConicConformal()\r\n\t\t\t\t\t.parallels([40, 68])\r\n\t\t\t\t\t.rotate([-10 + x / z / 15, 0])\r\n\t\t\t\t\t.center([8 - 10, 53.823])\r\n\t\t\t\t\t.scale(900 * z)\r\n\t\t\t\t\t.translate([W / 2, H / 2]);\r\n\r\n\t\t\t\tconst path = d3.geoPath().projection(projection);\r\n\t\t\t\tconst countries = svg.append(\"g\").append(\"g\").selectAll(\"path\").data(areas);\r\n\t\t\t\tcountries.exit().remove();\r\n\t\t\t\tconsole.log(countries);\r\n\t\t\t\tcountries\r\n\t\t\t\t\t.enter().append(\"path\")\r\n\t\t\t\t\t.attr(\"fill\", function(d){\r\n\t\t\t\t\t\t// TODO: Determine fill colour by node colour data\r\n\t\t\t\t\t\t//  - Need a language->country mapping\r\n\t\t\t\t\t\t//  - Find node language, get corresponding country, if this d's name is country then change to node colour\r\n\r\n\t\t\t\t\t\tlet countryName = d.properties.name;\r\n\t\t\t\t\t\tlet fillColour = \"white\";\r\n\r\n\t\t\t\t\t\tfor(let collection in items)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(items.hasOwnProperty(collection))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcollection = items[collection];\r\n\t\t\t\t\t\t\t\tif(collection.type === \"cognate\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let childNode in collection.childNodes)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(collection.childNodes.hasOwnProperty(childNode))\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tchildNode = collection.childNodes[childNode];\r\n\t\t\t\t\t\t\t\t\t\t\tif(languageCountries[childNode.language] === countryName)\r\n\t\t\t\t\t\t\t\t\t\t\t\tfillColour = childNode.colour;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn fillColour;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.attr(\"stroke\", \"black\")\r\n\t\t\t\t\t.attr(\"stroke-linejoin\", \"round\")\r\n\t\t\t\t\t.merge(countries)\r\n\t\t\t\t\t.attr(\"d\", path);\r\n\r\n\t\t\t\tgraticules.attr(\"d\", path(d3.geoGraticule().step([20, 20])()));\r\n\t\t\t}\r\n\r\n\r\n\t\t\t/!*\r\n\t\t\t svg.call(d3.zoom().on(\"zoom\", function () {\r\n\t\t\t z = d3.event.transform.k;\r\n\t\t\t draw();\r\n\t\t\t }));\r\n\t\t\t *!/\r\n\r\n\t\t\tdraw();*!/\r\n\r\n\t\t\treturn svg.node();\r\n\r\n\t\t},\r\n\t\t[props.mapRenderCounter]\r\n\t);*/\r\n\r\n\treturn (\r\n\t\t<div className={\"map-container\"}>\r\n\t\t\t{/*<svg\r\n\t\t\t\tref={ref}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmargin: 0\r\n\t\t\t\t}}>\r\n\t\t\t</svg>*/}\r\n\t\t</div>\r\n\t);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}